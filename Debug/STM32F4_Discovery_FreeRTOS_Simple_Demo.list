
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08003d20  08003d20  00013d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  20000000  08003d24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  6 .bss          00000248  2000008c  2000008c  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002d4  200002d4  0002008c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cba2  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002012  00000000  00000000  0002cc5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000b68  00000000  00000000  0002ec70  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a80  00000000  00000000  0002f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005237  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004333  00000000  00000000  0003548f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000397c2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002fac  00000000  00000000  00039840  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0003c7ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d04 	.word	0x08003d04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08003d04 	.word	0x08003d04

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	200000b0 	.word	0x200000b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	200000a8 	.word	0x200000a8
 8000530:	200000ac 	.word	0x200000ac
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 faf6 	bl	8001c10 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	200000b0 	.word	0x200000b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 fa0a 	bl	8001a88 <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000024 	.word	0x20000024
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	200000a8 	.word	0x200000a8
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	200000ac 	.word	0x200000ac

08000760 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8000768:	f001 f8d4 	bl	8001914 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f003 f98f 	bl	8003a90 <malloc>
 8000772:	4603      	mov	r3, r0
 8000774:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000776:	f001 f8db 	bl	8001930 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <pvPortMalloc+0x24>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8000780:	f003 f856 	bl	8003830 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8000784:	68fb      	ldr	r3, [r7, #12]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	if( pv )
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d006      	beq.n	80007aa <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800079c:	f001 f8ba 	bl	8001914 <vTaskSuspendAll>
		{
			free( pv );
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f003 f97d 	bl	8003aa0 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80007a6:	f001 f8c3 	bl	8001930 <xTaskResumeAll>
	}
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d109      	bne.n	80007dc <xQueueGenericReset+0x28>
 80007c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	e7fe      	b.n	80007da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80007dc:	f7ff feb0 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007e8:	68f9      	ldr	r1, [r7, #12]
 80007ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007ec:	fb01 f303 	mul.w	r3, r1, r3
 80007f0:	441a      	add	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2200      	movs	r2, #0
 80007fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800080c:	3b01      	subs	r3, #1
 800080e:	68f9      	ldr	r1, [r7, #12]
 8000810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	441a      	add	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	22ff      	movs	r2, #255	; 0xff
 8000820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	22ff      	movs	r2, #255	; 0xff
 8000828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d114      	bne.n	800085c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d01a      	beq.n	8000870 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3310      	adds	r3, #16
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fab4 	bl	8001dac <xTaskRemoveFromEventList>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d012      	beq.n	8000870 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <xQueueGenericReset+0xcc>)
 800084c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	e009      	b.n	8000870 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3310      	adds	r3, #16
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fcb5 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3324      	adds	r3, #36	; 0x24
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fcb0 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000870:	f7ff fe94 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000874:	2301      	movs	r3, #1
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000ed04 	.word	0xe000ed04

08000884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af02      	add	r7, sp, #8
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	4613      	mov	r3, r2
 8000890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d109      	bne.n	80008ac <xQueueGenericCreate+0x28>
 8000898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	e7fe      	b.n	80008aa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	e004      	b.n	80008c2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
 80008c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3348      	adds	r3, #72	; 0x48
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff4a 	bl	8000760 <pvPortMalloc>
 80008cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00b      	beq.n	80008ec <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	3348      	adds	r3, #72	; 0x48
 80008d8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	4613      	mov	r3, r2
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f000 f805 	bl	80008f6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80008ec:	69bb      	ldr	r3, [r7, #24]
	}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d103      	bne.n	8000912 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	e002      	b.n	8000918 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000924:	2101      	movs	r1, #1
 8000926:	69b8      	ldr	r0, [r7, #24]
 8000928:	f7ff ff44 	bl	80007b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	; 0x38
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800094a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094c:	2b00      	cmp	r3, #0
 800094e:	d109      	bne.n	8000964 <xQueueGenericSend+0x30>
 8000950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000954:	f383 8811 	msr	BASEPRI, r3
 8000958:	f3bf 8f6f 	isb	sy
 800095c:	f3bf 8f4f 	dsb	sy
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
 8000962:	e7fe      	b.n	8000962 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d103      	bne.n	8000972 <xQueueGenericSend+0x3e>
 800096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <xQueueGenericSend+0x42>
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <xQueueGenericSend+0x44>
 8000976:	2300      	movs	r3, #0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d109      	bne.n	8000990 <xQueueGenericSend+0x5c>
 800097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000980:	f383 8811 	msr	BASEPRI, r3
 8000984:	f3bf 8f6f 	isb	sy
 8000988:	f3bf 8f4f 	dsb	sy
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
 800098e:	e7fe      	b.n	800098e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d103      	bne.n	800099e <xQueueGenericSend+0x6a>
 8000996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099a:	2b01      	cmp	r3, #1
 800099c:	d101      	bne.n	80009a2 <xQueueGenericSend+0x6e>
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <xQueueGenericSend+0x70>
 80009a2:	2300      	movs	r3, #0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <xQueueGenericSend+0x88>
 80009a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ac:	f383 8811 	msr	BASEPRI, r3
 80009b0:	f3bf 8f6f 	isb	sy
 80009b4:	f3bf 8f4f 	dsb	sy
 80009b8:	623b      	str	r3, [r7, #32]
 80009ba:	e7fe      	b.n	80009ba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80009bc:	f001 fbc2 	bl	8002144 <xTaskGetSchedulerState>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <xQueueGenericSend+0x98>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d101      	bne.n	80009d0 <xQueueGenericSend+0x9c>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <xQueueGenericSend+0x9e>
 80009d0:	2300      	movs	r3, #0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d109      	bne.n	80009ea <xQueueGenericSend+0xb6>
 80009d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009da:	f383 8811 	msr	BASEPRI, r3
 80009de:	f3bf 8f6f 	isb	sy
 80009e2:	f3bf 8f4f 	dsb	sy
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	e7fe      	b.n	80009e8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80009ea:	f7ff fda9 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d302      	bcc.n	8000a00 <xQueueGenericSend+0xcc>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d129      	bne.n	8000a54 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	68b9      	ldr	r1, [r7, #8]
 8000a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a06:	f000 fadc 	bl	8000fc2 <prvCopyDataToQueue>
 8000a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d010      	beq.n	8000a36 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a16:	3324      	adds	r3, #36	; 0x24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 f9c7 	bl	8001dac <xTaskRemoveFromEventList>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d013      	beq.n	8000a4c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000a24:	4b3f      	ldr	r3, [pc, #252]	; (8000b24 <xQueueGenericSend+0x1f0>)
 8000a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	f3bf 8f6f 	isb	sy
 8000a34:	e00a      	b.n	8000a4c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d007      	beq.n	8000a4c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000a3c:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <xQueueGenericSend+0x1f0>)
 8000a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	f3bf 8f4f 	dsb	sy
 8000a48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000a4c:	f7ff fda6 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e063      	b.n	8000b1c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000a5a:	f7ff fd9f 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e05c      	b.n	8000b1c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d106      	bne.n	8000a76 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 f9ff 	bl	8001e70 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000a76:	f7ff fd91 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000a7a:	f000 ff4b 	bl	8001914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000a7e:	f7ff fd5f 	bl	8000540 <vPortEnterCritical>
 8000a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8e:	d103      	bne.n	8000a98 <xQueueGenericSend+0x164>
 8000a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d103      	bne.n	8000aae <xQueueGenericSend+0x17a>
 8000aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000aae:	f7ff fd75 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ab2:	1d3a      	adds	r2, r7, #4
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 f9fc 	bl	8001eb8 <xTaskCheckForTimeOut>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d124      	bne.n	8000b10 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ac8:	f000 fb73 	bl	80011b2 <prvIsQueueFull>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d018      	beq.n	8000b04 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad4:	3310      	adds	r3, #16
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 f918 	bl	8001d10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ae2:	f000 fafe 	bl	80010e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000ae6:	f000 ff23 	bl	8001930 <xTaskResumeAll>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f47f af7c 	bne.w	80009ea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <xQueueGenericSend+0x1f0>)
 8000af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	f3bf 8f4f 	dsb	sy
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	e772      	b.n	80009ea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b06:	f000 faec 	bl	80010e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b0a:	f000 ff11 	bl	8001930 <xTaskResumeAll>
 8000b0e:	e76c      	b.n	80009ea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b12:	f000 fae6 	bl	80010e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000b16:	f000 ff0b 	bl	8001930 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000b1a:	2300      	movs	r3, #0
		}
	}
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3738      	adds	r7, #56	; 0x38
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	e000ed04 	.word	0xe000ed04

08000b28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <xQueueGenericSendFromISR+0x2c>
 8000b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
 8000b52:	e7fe      	b.n	8000b52 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <xQueueGenericSendFromISR+0x3a>
 8000b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <xQueueGenericSendFromISR+0x3e>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <xQueueGenericSendFromISR+0x40>
 8000b66:	2300      	movs	r3, #0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d109      	bne.n	8000b80 <xQueueGenericSendFromISR+0x58>
 8000b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b70:	f383 8811 	msr	BASEPRI, r3
 8000b74:	f3bf 8f6f 	isb	sy
 8000b78:	f3bf 8f4f 	dsb	sy
 8000b7c:	623b      	str	r3, [r7, #32]
 8000b7e:	e7fe      	b.n	8000b7e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d103      	bne.n	8000b8e <xQueueGenericSendFromISR+0x66>
 8000b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d101      	bne.n	8000b92 <xQueueGenericSendFromISR+0x6a>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e000      	b.n	8000b94 <xQueueGenericSendFromISR+0x6c>
 8000b92:	2300      	movs	r3, #0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <xQueueGenericSendFromISR+0x84>
 8000b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b9c:	f383 8811 	msr	BASEPRI, r3
 8000ba0:	f3bf 8f6f 	isb	sy
 8000ba4:	f3bf 8f4f 	dsb	sy
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	e7fe      	b.n	8000baa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000bac:	f7ff fd9a 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000bb0:	f3ef 8211 	mrs	r2, BASEPRI
 8000bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb8:	f383 8811 	msr	BASEPRI, r3
 8000bbc:	f3bf 8f6f 	isb	sy
 8000bc0:	f3bf 8f4f 	dsb	sy
 8000bc4:	61ba      	str	r2, [r7, #24]
 8000bc6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000bc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d302      	bcc.n	8000bde <xQueueGenericSendFromISR+0xb6>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d12c      	bne.n	8000c38 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bee:	f000 f9e8 	bl	8000fc2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000bf2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfa:	d112      	bne.n	8000c22 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d016      	beq.n	8000c32 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c06:	3324      	adds	r3, #36	; 0x24
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f8cf 	bl	8001dac <xTaskRemoveFromEventList>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00e      	beq.n	8000c32 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e007      	b.n	8000c32 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000c32:	2301      	movs	r3, #1
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000c36:	e001      	b.n	8000c3c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3738      	adds	r7, #56	; 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8000c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <xQueueGiveFromISR+0x28>
	__asm volatile
 8000c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c68:	f383 8811 	msr	BASEPRI, r3
 8000c6c:	f3bf 8f6f 	isb	sy
 8000c70:	f3bf 8f4f 	dsb	sy
 8000c74:	623b      	str	r3, [r7, #32]
 8000c76:	e7fe      	b.n	8000c76 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d009      	beq.n	8000c94 <xQueueGiveFromISR+0x44>
 8000c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c84:	f383 8811 	msr	BASEPRI, r3
 8000c88:	f3bf 8f6f 	isb	sy
 8000c8c:	f3bf 8f4f 	dsb	sy
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	e7fe      	b.n	8000c92 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d103      	bne.n	8000ca4 <xQueueGiveFromISR+0x54>
 8000c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <xQueueGiveFromISR+0x58>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <xQueueGiveFromISR+0x5a>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d109      	bne.n	8000cc2 <xQueueGiveFromISR+0x72>
 8000cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb2:	f383 8811 	msr	BASEPRI, r3
 8000cb6:	f3bf 8f6f 	isb	sy
 8000cba:	f3bf 8f4f 	dsb	sy
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	e7fe      	b.n	8000cc0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000cc2:	f7ff fd0f 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000cc6:	f3ef 8211 	mrs	r2, BASEPRI
 8000cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cce:	f383 8811 	msr	BASEPRI, r3
 8000cd2:	f3bf 8f6f 	isb	sy
 8000cd6:	f3bf 8f4f 	dsb	sy
 8000cda:	617a      	str	r2, [r7, #20]
 8000cdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8000cde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8000ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d92b      	bls.n	8000d4a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d112      	bne.n	8000d34 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d016      	beq.n	8000d44 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d18:	3324      	adds	r3, #36	; 0x24
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f846 	bl	8001dac <xTaskRemoveFromEventList>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00e      	beq.n	8000d44 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e007      	b.n	8000d44 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	b25a      	sxtb	r2, r3
 8000d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000d44:	2301      	movs	r3, #1
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
 8000d48:	e001      	b.n	8000d4e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3738      	adds	r7, #56	; 0x38
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d109      	bne.n	8000d94 <xQueueGenericReceive+0x30>
	__asm volatile
 8000d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d84:	f383 8811 	msr	BASEPRI, r3
 8000d88:	f3bf 8f6f 	isb	sy
 8000d8c:	f3bf 8f4f 	dsb	sy
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
 8000d92:	e7fe      	b.n	8000d92 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <xQueueGenericReceive+0x3e>
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <xQueueGenericReceive+0x42>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <xQueueGenericReceive+0x44>
 8000da6:	2300      	movs	r3, #0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d109      	bne.n	8000dc0 <xQueueGenericReceive+0x5c>
 8000dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db0:	f383 8811 	msr	BASEPRI, r3
 8000db4:	f3bf 8f6f 	isb	sy
 8000db8:	f3bf 8f4f 	dsb	sy
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	e7fe      	b.n	8000dbe <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dc0:	f001 f9c0 	bl	8002144 <xTaskGetSchedulerState>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d102      	bne.n	8000dd0 <xQueueGenericReceive+0x6c>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <xQueueGenericReceive+0x70>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <xQueueGenericReceive+0x72>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d109      	bne.n	8000dee <xQueueGenericReceive+0x8a>
 8000dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dde:	f383 8811 	msr	BASEPRI, r3
 8000de2:	f3bf 8f6f 	isb	sy
 8000de6:	f3bf 8f4f 	dsb	sy
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	e7fe      	b.n	8000dec <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000dee:	f7ff fba7 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d046      	beq.n	8000e8c <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e08:	f000 f945 	bl	8001096 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d121      	bne.n	8000e56 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8000e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d104      	bne.n	8000e2c <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000e22:	f001 faa7 	bl	8002374 <pvTaskIncrementMutexHeldCount>
 8000e26:	4602      	mov	r2, r0
 8000e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d027      	beq.n	8000e84 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e36:	3310      	adds	r3, #16
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 ffb7 	bl	8001dac <xTaskRemoveFromEventList>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d01f      	beq.n	8000e84 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000e44:	4b4f      	ldr	r3, [pc, #316]	; (8000f84 <xQueueGenericReceive+0x220>)
 8000e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	f3bf 8f4f 	dsb	sy
 8000e50:	f3bf 8f6f 	isb	sy
 8000e54:	e016      	b.n	8000e84 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e5a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00f      	beq.n	8000e84 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e66:	3324      	adds	r3, #36	; 0x24
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 ff9f 	bl	8001dac <xTaskRemoveFromEventList>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e74:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <xQueueGenericReceive+0x220>)
 8000e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	f3bf 8f4f 	dsb	sy
 8000e80:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000e84:	f7ff fb8a 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e077      	b.n	8000f7c <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d103      	bne.n	8000e9a <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e92:	f7ff fb83 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e070      	b.n	8000f7c <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d106      	bne.n	8000eae <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 ffe3 	bl	8001e70 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000eae:	f7ff fb75 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000eb2:	f000 fd2f 	bl	8001914 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000eb6:	f7ff fb43 	bl	8000540 <vPortEnterCritical>
 8000eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec6:	d103      	bne.n	8000ed0 <xQueueGenericReceive+0x16c>
 8000ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d103      	bne.n	8000ee6 <xQueueGenericReceive+0x182>
 8000ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ee6:	f7ff fb59 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 ffe0 	bl	8001eb8 <xTaskCheckForTimeOut>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d131      	bne.n	8000f62 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f00:	f000 f941 	bl	8001186 <prvIsQueueEmpty>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d025      	beq.n	8000f56 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d108      	bne.n	8000f24 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8000f12:	f7ff fb15 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 f930 	bl	8002180 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000f20:	f7ff fb3c 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f26:	3324      	adds	r3, #36	; 0x24
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 feef 	bl	8001d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f34:	f000 f8d5 	bl	80010e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f38:	f000 fcfa 	bl	8001930 <xTaskResumeAll>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f47f af55 	bne.w	8000dee <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <xQueueGenericReceive+0x220>)
 8000f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	f3bf 8f4f 	dsb	sy
 8000f50:	f3bf 8f6f 	isb	sy
 8000f54:	e74b      	b.n	8000dee <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f58:	f000 f8c3 	bl	80010e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f5c:	f000 fce8 	bl	8001930 <xTaskResumeAll>
 8000f60:	e745      	b.n	8000dee <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f64:	f000 f8bd 	bl	80010e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f68:	f000 fce2 	bl	8001930 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f6e:	f000 f90a 	bl	8001186 <prvIsQueueEmpty>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f43f af3a 	beq.w	8000dee <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000f7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3738      	adds	r7, #56	; 0x38
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	e000ed04 	.word	0xe000ed04

08000f88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d109      	bne.n	8000fae <vQueueDelete+0x26>
 8000f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f9e:	f383 8811 	msr	BASEPRI, r3
 8000fa2:	f3bf 8f6f 	isb	sy
 8000fa6:	f3bf 8f4f 	dsb	sy
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	e7fe      	b.n	8000fac <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 f940 	bl	8001234 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff fbea 	bl	800078e <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10d      	bne.n	8000ffc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d14d      	bne.n	8001084 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 f93d 	bl	800226c <xTaskPriorityDisinherit>
 8000ff2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	e043      	b.n	8001084 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d119      	bne.n	8001036 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6898      	ldr	r0, [r3, #8]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	461a      	mov	r2, r3
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	f002 fd4f 	bl	8003ab0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	441a      	add	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d32b      	bcc.n	8001084 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	e026      	b.n	8001084 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	68d8      	ldr	r0, [r3, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	461a      	mov	r2, r3
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	f002 fd35 	bl	8003ab0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	425b      	negs	r3, r3
 8001050:	441a      	add	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d207      	bcs.n	8001072 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	425b      	negs	r3, r3
 800106c:	441a      	add	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d105      	bne.n	8001084 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	3b01      	subs	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800108c:	697b      	ldr	r3, [r7, #20]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d018      	beq.n	80010da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	441a      	add	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d303      	bcc.n	80010ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68d9      	ldr	r1, [r3, #12]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	461a      	mov	r2, r3
 80010d4:	6838      	ldr	r0, [r7, #0]
 80010d6:	f002 fceb 	bl	8003ab0 <memcpy>
	}
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80010ea:	f7ff fa29 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010f6:	e011      	b.n	800111c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d012      	beq.n	8001126 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3324      	adds	r3, #36	; 0x24
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fe51 	bl	8001dac <xTaskRemoveFromEventList>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001110:	f000 ff30 	bl	8001f74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3b01      	subs	r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	dce9      	bgt.n	80010f8 <prvUnlockQueue+0x16>
 8001124:	e000      	b.n	8001128 <prvUnlockQueue+0x46>
					break;
 8001126:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	22ff      	movs	r2, #255	; 0xff
 800112c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001130:	f7ff fa34 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001134:	f7ff fa04 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800113e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001140:	e011      	b.n	8001166 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d012      	beq.n	8001170 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3310      	adds	r3, #16
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fe2c 	bl	8001dac <xTaskRemoveFromEventList>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800115a:	f000 ff0b 	bl	8001f74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	3b01      	subs	r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800116a:	2b00      	cmp	r3, #0
 800116c:	dce9      	bgt.n	8001142 <prvUnlockQueue+0x60>
 800116e:	e000      	b.n	8001172 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001170:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	22ff      	movs	r2, #255	; 0xff
 8001176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800117a:	f7ff fa0f 	bl	800059c <vPortExitCritical>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800118e:	f7ff f9d7 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800119a:	2301      	movs	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e001      	b.n	80011a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80011a4:	f7ff f9fa 	bl	800059c <vPortExitCritical>

	return xReturn;
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80011ba:	f7ff f9c1 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d102      	bne.n	80011d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80011ca:	2301      	movs	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	e001      	b.n	80011d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80011d4:	f7ff f9e2 	bl	800059c <vPortExitCritical>

	return xReturn;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	e014      	b.n	800121e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <vQueueAddToRegistry+0x4c>)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10b      	bne.n	8001218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001200:	490b      	ldr	r1, [pc, #44]	; (8001230 <vQueueAddToRegistry+0x4c>)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <vQueueAddToRegistry+0x4c>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001216:	e005      	b.n	8001224 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b07      	cmp	r3, #7
 8001222:	d9e7      	bls.n	80011f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	20000214 	.word	0x20000214

08001234 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e016      	b.n	8001270 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <vQueueUnregisterQueue+0x50>)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d10b      	bne.n	800126a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <vQueueUnregisterQueue+0x50>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2100      	movs	r1, #0
 8001258:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800125c:	4a09      	ldr	r2, [pc, #36]	; (8001284 <vQueueUnregisterQueue+0x50>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4413      	add	r3, r2
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
				break;
 8001268:	e005      	b.n	8001276 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b07      	cmp	r3, #7
 8001274:	d9e5      	bls.n	8001242 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000214 	.word	0x20000214

08001288 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001298:	f7ff f952 	bl	8000540 <vPortEnterCritical>
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d103      	bne.n	80012b2 <vQueueWaitForMessageRestricted+0x2a>
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012be:	d103      	bne.n	80012c8 <vQueueWaitForMessageRestricted+0x40>
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80012c8:	f7ff f968 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d106      	bne.n	80012e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3324      	adds	r3, #36	; 0x24
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fd3b 	bl	8001d58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff fefd 	bl	80010e2 <prvUnlockQueue>
	}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af04      	add	r7, sp, #16
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fa2b 	bl	8000760 <pvPortMalloc>
 800130a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00e      	beq.n	8001330 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001312:	2050      	movs	r0, #80	; 0x50
 8001314:	f7ff fa24 	bl	8000760 <pvPortMalloc>
 8001318:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	631a      	str	r2, [r3, #48]	; 0x30
 8001326:	e005      	b.n	8001334 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001328:	6978      	ldr	r0, [r7, #20]
 800132a:	f7ff fa30 	bl	800078e <vPortFree>
 800132e:	e001      	b.n	8001334 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d013      	beq.n	8001362 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800133a:	88fa      	ldrh	r2, [r7, #6]
 800133c:	2300      	movs	r3, #0
 800133e:	9303      	str	r3, [sp, #12]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 f80e 	bl	8001372 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001356:	69f8      	ldr	r0, [r7, #28]
 8001358:	f000 f892 	bl	8001480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	e002      	b.n	8001368 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001368:	69bb      	ldr	r3, [r7, #24]
	}
 800136a:	4618      	mov	r0, r3
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b088      	sub	sp, #32
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001382:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	461a      	mov	r2, r3
 800138a:	21a5      	movs	r1, #165	; 0xa5
 800138c:	f002 fb9b 	bl	8003ac6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800139a:	3b01      	subs	r3, #1
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f023 0307 	bic.w	r3, r3, #7
 80013a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <prvInitialiseNewTask+0x56>
 80013b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b8:	f383 8811 	msr	BASEPRI, r3
 80013bc:	f3bf 8f6f 	isb	sy
 80013c0:	f3bf 8f4f 	dsb	sy
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e7fe      	b.n	80013c6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	e012      	b.n	80013f4 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	4413      	add	r3, r2
 80013d4:	7819      	ldrb	r1, [r3, #0]
 80013d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	4413      	add	r3, r2
 80013dc:	3334      	adds	r3, #52	; 0x34
 80013de:	460a      	mov	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	d9e9      	bls.n	80013ce <prvInitialiseNewTask+0x5c>
 80013fa:	e000      	b.n	80013fe <prvInitialiseNewTask+0x8c>
		{
			break;
 80013fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80013fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	2b04      	cmp	r3, #4
 800140a:	d901      	bls.n	8001410 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800140c:	2304      	movs	r3, #4
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800141a:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 800141c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001424:	3304      	adds	r3, #4
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe fef2 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800142c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142e:	3318      	adds	r3, #24
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe feed 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800143a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	f1c3 0205 	rsb	r2, r3, #5
 8001442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001444:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800144c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144e:	2200      	movs	r2, #0
 8001450:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001454:	2200      	movs	r2, #0
 8001456:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	68f9      	ldr	r1, [r7, #12]
 800145e:	69b8      	ldr	r0, [r7, #24]
 8001460:	f7fe ff6a 	bl	8000338 <pxPortInitialiseStack>
 8001464:	4602      	mov	r2, r0
 8001466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001468:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001488:	f7ff f85a 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <prvAddNewTaskToReadyList+0xb8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <prvAddNewTaskToReadyList+0xb8>)
 8001494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <prvAddNewTaskToReadyList+0xbc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800149e:	4a27      	ldr	r2, [pc, #156]	; (800153c <prvAddNewTaskToReadyList+0xbc>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <prvAddNewTaskToReadyList+0xb8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d110      	bne.n	80014ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80014ac:	f000 fd88 	bl	8001fc0 <prvInitialiseTaskLists>
 80014b0:	e00d      	b.n	80014ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <prvAddNewTaskToReadyList+0xc0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <prvAddNewTaskToReadyList+0xbc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d802      	bhi.n	80014ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <prvAddNewTaskToReadyList+0xbc>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <prvAddNewTaskToReadyList+0xc4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <prvAddNewTaskToReadyList+0xc4>)
 80014d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	2201      	movs	r2, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <prvAddNewTaskToReadyList+0xc8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <prvAddNewTaskToReadyList+0xc8>)
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <prvAddNewTaskToReadyList+0xcc>)
 80014f8:	441a      	add	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4610      	mov	r0, r2
 8001502:	f7fe fe92 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001506:	f7ff f849 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <prvAddNewTaskToReadyList+0xc0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00e      	beq.n	8001530 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <prvAddNewTaskToReadyList+0xbc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <prvAddNewTaskToReadyList+0xd0>)
 8001522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000188 	.word	0x20000188
 800153c:	200000b0 	.word	0x200000b0
 8001540:	20000194 	.word	0x20000194
 8001544:	200001a4 	.word	0x200001a4
 8001548:	20000190 	.word	0x20000190
 800154c:	200000b4 	.word	0x200000b4
 8001550:	e000ed04 	.word	0xe000ed04

08001554 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800155c:	f7fe fff0 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <vTaskDelete+0x18>
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <vTaskDelete+0xf4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	e000      	b.n	800156e <vTaskDelete+0x1a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3304      	adds	r3, #4
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe feb5 	bl	80002e4 <uxListRemove>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d115      	bne.n	80015ac <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001584:	4931      	ldr	r1, [pc, #196]	; (800164c <vTaskDelete+0xf8>)
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10a      	bne.n	80015ac <vTaskDelete+0x58>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	2201      	movs	r2, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43da      	mvns	r2, r3
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <vTaskDelete+0xfc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4013      	ands	r3, r2
 80015a8:	4a29      	ldr	r2, [pc, #164]	; (8001650 <vTaskDelete+0xfc>)
 80015aa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3318      	adds	r3, #24
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe fe93 	bl	80002e4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <vTaskDelete+0x100>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a23      	ldr	r2, [pc, #140]	; (8001654 <vTaskDelete+0x100>)
 80015c6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <vTaskDelete+0xf4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d10b      	bne.n	80015ea <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3304      	adds	r3, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	481f      	ldr	r0, [pc, #124]	; (8001658 <vTaskDelete+0x104>)
 80015da:	f7fe fe26 	bl	800022a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <vTaskDelete+0x108>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <vTaskDelete+0x108>)
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e009      	b.n	80015fe <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <vTaskDelete+0x10c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <vTaskDelete+0x10c>)
 80015f2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 fd5f 	bl	80020b8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80015fa:	f000 fd6d 	bl	80020d8 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80015fe:	f7fe ffcd 	bl	800059c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <vTaskDelete+0x110>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d01a      	beq.n	8001640 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <vTaskDelete+0xf4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d115      	bne.n	8001640 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <vTaskDelete+0x114>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d009      	beq.n	8001630 <vTaskDelete+0xdc>
 800161c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001620:	f383 8811 	msr	BASEPRI, r3
 8001624:	f3bf 8f6f 	isb	sy
 8001628:	f3bf 8f4f 	dsb	sy
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	e7fe      	b.n	800162e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <vTaskDelete+0x118>)
 8001632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f3bf 8f4f 	dsb	sy
 800163c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000b0 	.word	0x200000b0
 800164c:	200000b4 	.word	0x200000b4
 8001650:	20000190 	.word	0x20000190
 8001654:	200001a4 	.word	0x200001a4
 8001658:	2000015c 	.word	0x2000015c
 800165c:	20000170 	.word	0x20000170
 8001660:	20000188 	.word	0x20000188
 8001664:	20000194 	.word	0x20000194
 8001668:	200001b0 	.word	0x200001b0
 800166c:	e000ed04 	.word	0xe000ed04

08001670 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <eTaskGetState+0x26>
 8001682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001686:	f383 8811 	msr	BASEPRI, r3
 800168a:	f3bf 8f6f 	isb	sy
 800168e:	f3bf 8f4f 	dsb	sy
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	e7fe      	b.n	8001694 <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <eTaskGetState+0x9c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	429a      	cmp	r2, r3
 800169e:	d102      	bne.n	80016a6 <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80016a0:	2300      	movs	r3, #0
 80016a2:	75fb      	strb	r3, [r7, #23]
 80016a4:	e02d      	b.n	8001702 <eTaskGetState+0x92>
		}
		else
		{
			taskENTER_CRITICAL();
 80016a6:	f7fe ff4b 	bl	8000540 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	695b      	ldr	r3, [r3, #20]
 80016ae:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80016b0:	f7fe ff74 	bl	800059c <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <eTaskGetState+0xa0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d004      	beq.n	80016c8 <eTaskGetState+0x58>
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <eTaskGetState+0xa4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d102      	bne.n	80016ce <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80016c8:	2302      	movs	r3, #2
 80016ca:	75fb      	strb	r3, [r7, #23]
 80016cc:	e019      	b.n	8001702 <eTaskGetState+0x92>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	4a11      	ldr	r2, [pc, #68]	; (8001718 <eTaskGetState+0xa8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d109      	bne.n	80016ea <eTaskGetState+0x7a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d102      	bne.n	80016e4 <eTaskGetState+0x74>
					{
						eReturn = eSuspended;
 80016de:	2303      	movs	r3, #3
 80016e0:	75fb      	strb	r3, [r7, #23]
 80016e2:	e00e      	b.n	8001702 <eTaskGetState+0x92>
					}
					else
					{
						eReturn = eBlocked;
 80016e4:	2302      	movs	r3, #2
 80016e6:	75fb      	strb	r3, [r7, #23]
 80016e8:	e00b      	b.n	8001702 <eTaskGetState+0x92>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <eTaskGetState+0xac>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d002      	beq.n	80016f8 <eTaskGetState+0x88>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <eTaskGetState+0x8e>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80016f8:	2304      	movs	r3, #4
 80016fa:	75fb      	strb	r3, [r7, #23]
 80016fc:	e001      	b.n	8001702 <eTaskGetState+0x92>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 8001702:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200000b0 	.word	0x200000b0
 8001710:	20000140 	.word	0x20000140
 8001714:	20000144 	.word	0x20000144
 8001718:	20000174 	.word	0x20000174
 800171c:	2000015c 	.word	0x2000015c

08001720 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8001720:	b580      	push	{r7, lr}
 8001722:	b088      	sub	sp, #32
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b04      	cmp	r3, #4
 8001732:	d909      	bls.n	8001748 <vTaskPrioritySet+0x28>
 8001734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001738:	f383 8811 	msr	BASEPRI, r3
 800173c:	f3bf 8f6f 	isb	sy
 8001740:	f3bf 8f4f 	dsb	sy
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e7fe      	b.n	8001746 <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2b04      	cmp	r3, #4
 800174c:	d901      	bls.n	8001752 <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800174e:	2304      	movs	r3, #4
 8001750:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8001752:	f7fe fef5 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <vTaskPrioritySet+0x42>
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <vTaskPrioritySet+0x14c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	e000      	b.n	8001764 <vTaskPrioritySet+0x44>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d074      	beq.n	800185e <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	429a      	cmp	r2, r3
 800177a:	d90d      	bls.n	8001798 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 800177c:	4b3b      	ldr	r3, [pc, #236]	; (800186c <vTaskPrioritySet+0x14c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	429a      	cmp	r2, r3
 8001784:	d00f      	beq.n	80017a6 <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001786:	4b39      	ldr	r3, [pc, #228]	; (800186c <vTaskPrioritySet+0x14c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d809      	bhi.n	80017a6 <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 8001792:	2301      	movs	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e006      	b.n	80017a6 <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <vTaskPrioritySet+0x14c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d101      	bne.n	80017a6 <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 80017a2:	2301      	movs	r3, #1
 80017a4:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d102      	bne.n	80017be <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	db04      	blt.n	80017d6 <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f1c3 0205 	rsb	r2, r3, #5
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6959      	ldr	r1, [r3, #20]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	4a22      	ldr	r2, [pc, #136]	; (8001870 <vTaskPrioritySet+0x150>)
 80017e6:	4413      	add	r3, r2
 80017e8:	4299      	cmp	r1, r3
 80017ea:	d101      	bne.n	80017f0 <vTaskPrioritySet+0xd0>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <vTaskPrioritySet+0xd2>
 80017f0:	2300      	movs	r3, #0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d028      	beq.n	8001848 <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	3304      	adds	r3, #4
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fd72 	bl	80002e4 <uxListRemove>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8001806:	2201      	movs	r2, #1
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43da      	mvns	r2, r3
 8001810:	4b18      	ldr	r3, [pc, #96]	; (8001874 <vTaskPrioritySet+0x154>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4013      	ands	r3, r2
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <vTaskPrioritySet+0x154>)
 8001818:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	2201      	movs	r2, #1
 8001820:	409a      	lsls	r2, r3
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <vTaskPrioritySet+0x154>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	4a12      	ldr	r2, [pc, #72]	; (8001874 <vTaskPrioritySet+0x154>)
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4a0d      	ldr	r2, [pc, #52]	; (8001870 <vTaskPrioritySet+0x150>)
 800183a:	441a      	add	r2, r3
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	3304      	adds	r3, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f7fe fcf1 	bl	800022a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <vTaskPrioritySet+0x158>)
 8001850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800185e:	f7fe fe9d 	bl	800059c <vPortExitCritical>
	}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	200000b0 	.word	0x200000b0
 8001870:	200000b4 	.word	0x200000b4
 8001874:	20000190 	.word	0x20000190
 8001878:	e000ed04 	.word	0xe000ed04

0800187c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001882:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <vTaskStartScheduler+0x80>)
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	2300      	movs	r3, #0
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2300      	movs	r3, #0
 800188c:	2282      	movs	r2, #130	; 0x82
 800188e:	491c      	ldr	r1, [pc, #112]	; (8001900 <vTaskStartScheduler+0x84>)
 8001890:	481c      	ldr	r0, [pc, #112]	; (8001904 <vTaskStartScheduler+0x88>)
 8001892:	f7ff fd2d 	bl	80012f0 <xTaskCreate>
 8001896:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d102      	bne.n	80018a4 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800189e:	f000 fde3 	bl	8002468 <xTimerCreateTimerTask>
 80018a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d115      	bne.n	80018d6 <vTaskStartScheduler+0x5a>
 80018aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ae:	f383 8811 	msr	BASEPRI, r3
 80018b2:	f3bf 8f6f 	isb	sy
 80018b6:	f3bf 8f4f 	dsb	sy
 80018ba:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <vTaskStartScheduler+0x8c>)
 80018be:	f04f 32ff 	mov.w	r2, #4294967295
 80018c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <vTaskStartScheduler+0x90>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <vTaskStartScheduler+0x94>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80018d0:	f7fe fdaa 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80018d4:	e00d      	b.n	80018f2 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d109      	bne.n	80018f2 <vTaskStartScheduler+0x76>
 80018de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e2:	f383 8811 	msr	BASEPRI, r3
 80018e6:	f3bf 8f6f 	isb	sy
 80018ea:	f3bf 8f4f 	dsb	sy
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	e7fe      	b.n	80018f0 <vTaskStartScheduler+0x74>
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200001ac 	.word	0x200001ac
 8001900:	08003c70 	.word	0x08003c70
 8001904:	08001f8d 	.word	0x08001f8d
 8001908:	200001a8 	.word	0x200001a8
 800190c:	20000194 	.word	0x20000194
 8001910:	2000018c 	.word	0x2000018c

08001914 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <vTaskSuspendAll+0x18>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	3301      	adds	r3, #1
 800191e:	4a03      	ldr	r2, [pc, #12]	; (800192c <vTaskSuspendAll+0x18>)
 8001920:	6013      	str	r3, [r2, #0]
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	200001b0 	.word	0x200001b0

08001930 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <xTaskResumeAll+0x114>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <xTaskResumeAll+0x2a>
 8001946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194a:	f383 8811 	msr	BASEPRI, r3
 800194e:	f3bf 8f6f 	isb	sy
 8001952:	f3bf 8f4f 	dsb	sy
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	e7fe      	b.n	8001958 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800195a:	f7fe fdf1 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800195e:	4b39      	ldr	r3, [pc, #228]	; (8001a44 <xTaskResumeAll+0x114>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	3b01      	subs	r3, #1
 8001964:	4a37      	ldr	r2, [pc, #220]	; (8001a44 <xTaskResumeAll+0x114>)
 8001966:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001968:	4b36      	ldr	r3, [pc, #216]	; (8001a44 <xTaskResumeAll+0x114>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d161      	bne.n	8001a34 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <xTaskResumeAll+0x118>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d05d      	beq.n	8001a34 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001978:	e02e      	b.n	80019d8 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800197a:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <xTaskResumeAll+0x11c>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3318      	adds	r3, #24
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fcac 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3304      	adds	r3, #4
 8001990:	4618      	mov	r0, r3
 8001992:	f7fe fca7 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	2201      	movs	r2, #1
 800199c:	409a      	lsls	r2, r3
 800199e:	4b2c      	ldr	r3, [pc, #176]	; (8001a50 <xTaskResumeAll+0x120>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <xTaskResumeAll+0x120>)
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <xTaskResumeAll+0x124>)
 80019b6:	441a      	add	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3304      	adds	r3, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4610      	mov	r0, r2
 80019c0:	f7fe fc33 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c8:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <xTaskResumeAll+0x128>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d302      	bcc.n	80019d8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80019d2:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <xTaskResumeAll+0x12c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <xTaskResumeAll+0x11c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1cc      	bne.n	800197a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80019e6:	f000 fb77 	bl	80020d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <xTaskResumeAll+0x130>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80019f6:	f000 f847 	bl	8001a88 <xTaskIncrementTick>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <xTaskResumeAll+0x12c>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f1      	bne.n	80019f6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <xTaskResumeAll+0x130>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <xTaskResumeAll+0x12c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001a20:	2301      	movs	r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a24:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <xTaskResumeAll+0x134>)
 8001a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f3bf 8f4f 	dsb	sy
 8001a30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001a34:	f7fe fdb2 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001a38:	68bb      	ldr	r3, [r7, #8]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200001b0 	.word	0x200001b0
 8001a48:	20000188 	.word	0x20000188
 8001a4c:	20000148 	.word	0x20000148
 8001a50:	20000190 	.word	0x20000190
 8001a54:	200000b4 	.word	0x200000b4
 8001a58:	200000b0 	.word	0x200000b0
 8001a5c:	2000019c 	.word	0x2000019c
 8001a60:	20000198 	.word	0x20000198
 8001a64:	e000ed04 	.word	0xe000ed04

08001a68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <xTaskGetTickCount+0x1c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2000018c 	.word	0x2000018c

08001a88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a92:	4b54      	ldr	r3, [pc, #336]	; (8001be4 <xTaskIncrementTick+0x15c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f040 8092 	bne.w	8001bc0 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001a9c:	4b52      	ldr	r3, [pc, #328]	; (8001be8 <xTaskIncrementTick+0x160>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001aa4:	4a50      	ldr	r2, [pc, #320]	; (8001be8 <xTaskIncrementTick+0x160>)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d11f      	bne.n	8001af0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001ab0:	4b4e      	ldr	r3, [pc, #312]	; (8001bec <xTaskIncrementTick+0x164>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <xTaskIncrementTick+0x46>
 8001aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abe:	f383 8811 	msr	BASEPRI, r3
 8001ac2:	f3bf 8f6f 	isb	sy
 8001ac6:	f3bf 8f4f 	dsb	sy
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	e7fe      	b.n	8001acc <xTaskIncrementTick+0x44>
 8001ace:	4b47      	ldr	r3, [pc, #284]	; (8001bec <xTaskIncrementTick+0x164>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <xTaskIncrementTick+0x168>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a44      	ldr	r2, [pc, #272]	; (8001bec <xTaskIncrementTick+0x164>)
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4a44      	ldr	r2, [pc, #272]	; (8001bf0 <xTaskIncrementTick+0x168>)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	4b44      	ldr	r3, [pc, #272]	; (8001bf4 <xTaskIncrementTick+0x16c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	4a42      	ldr	r2, [pc, #264]	; (8001bf4 <xTaskIncrementTick+0x16c>)
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	f000 faf4 	bl	80020d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001af0:	4b41      	ldr	r3, [pc, #260]	; (8001bf8 <xTaskIncrementTick+0x170>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d34d      	bcc.n	8001b96 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001afa:	4b3c      	ldr	r3, [pc, #240]	; (8001bec <xTaskIncrementTick+0x164>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <xTaskIncrementTick+0x80>
 8001b04:	2301      	movs	r3, #1
 8001b06:	e000      	b.n	8001b0a <xTaskIncrementTick+0x82>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b0e:	4b3a      	ldr	r3, [pc, #232]	; (8001bf8 <xTaskIncrementTick+0x170>)
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	601a      	str	r2, [r3, #0]
					break;
 8001b16:	e03e      	b.n	8001b96 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <xTaskIncrementTick+0x164>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d203      	bcs.n	8001b38 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001b30:	4a31      	ldr	r2, [pc, #196]	; (8001bf8 <xTaskIncrementTick+0x170>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
						break;
 8001b36:	e02e      	b.n	8001b96 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7fe fbd1 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3318      	adds	r3, #24
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fbc8 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	2201      	movs	r2, #1
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <xTaskIncrementTick+0x174>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <xTaskIncrementTick+0x174>)
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4a23      	ldr	r2, [pc, #140]	; (8001c00 <xTaskIncrementTick+0x178>)
 8001b74:	441a      	add	r2, r3
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	f7fe fb54 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <xTaskIncrementTick+0x17c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d3b4      	bcc.n	8001afa <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001b90:	2301      	movs	r3, #1
 8001b92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b94:	e7b1      	b.n	8001afa <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <xTaskIncrementTick+0x17c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9c:	4918      	ldr	r1, [pc, #96]	; (8001c00 <xTaskIncrementTick+0x178>)
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d901      	bls.n	8001bb2 <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <xTaskIncrementTick+0x180>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <xTaskIncrementTick+0x146>
			{
				vApplicationTickHook();
 8001bba:	f001 fe17 	bl	80037ec <vApplicationTickHook>
 8001bbe:	e006      	b.n	8001bce <xTaskIncrementTick+0x146>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001bc0:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <xTaskIncrementTick+0x180>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <xTaskIncrementTick+0x180>)
 8001bc8:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8001bca:	f001 fe0f 	bl	80037ec <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <xTaskIncrementTick+0x184>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <xTaskIncrementTick+0x152>
		{
			xSwitchRequired = pdTRUE;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001bda:	697b      	ldr	r3, [r7, #20]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200001b0 	.word	0x200001b0
 8001be8:	2000018c 	.word	0x2000018c
 8001bec:	20000140 	.word	0x20000140
 8001bf0:	20000144 	.word	0x20000144
 8001bf4:	200001a0 	.word	0x200001a0
 8001bf8:	200001a8 	.word	0x200001a8
 8001bfc:	20000190 	.word	0x20000190
 8001c00:	200000b4 	.word	0x200000b4
 8001c04:	200000b0 	.word	0x200000b0
 8001c08:	20000198 	.word	0x20000198
 8001c0c:	2000019c 	.word	0x2000019c

08001c10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c16:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <vTaskSwitchContext+0xec>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <vTaskSwitchContext+0xf0>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001c24:	e065      	b.n	8001cf2 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001c26:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <vTaskSwitchContext+0xf0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <vTaskSwitchContext+0xf4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	61fb      	str	r3, [r7, #28]
 8001c34:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001c38:	61bb      	str	r3, [r7, #24]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d111      	bne.n	8001c68 <vTaskSwitchContext+0x58>
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	3304      	adds	r3, #4
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10b      	bne.n	8001c68 <vTaskSwitchContext+0x58>
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	3308      	adds	r3, #8
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d105      	bne.n	8001c68 <vTaskSwitchContext+0x58>
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	330c      	adds	r3, #12
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d008      	beq.n	8001c7a <vTaskSwitchContext+0x6a>
 8001c68:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <vTaskSwitchContext+0xf4>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <vTaskSwitchContext+0xf4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	3334      	adds	r3, #52	; 0x34
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f001 fdde 	bl	8003836 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c7a:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <vTaskSwitchContext+0xf8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001c88:	7afb      	ldrb	r3, [r7, #11]
 8001c8a:	f1c3 031f 	rsb	r3, r3, #31
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	491e      	ldr	r1, [pc, #120]	; (8001d0c <vTaskSwitchContext+0xfc>)
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <vTaskSwitchContext+0xa8>
	__asm volatile
 8001ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	607b      	str	r3, [r7, #4]
 8001cb6:	e7fe      	b.n	8001cb6 <vTaskSwitchContext+0xa6>
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <vTaskSwitchContext+0xfc>)
 8001cc4:	4413      	add	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	3308      	adds	r3, #8
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d104      	bne.n	8001ce8 <vTaskSwitchContext+0xd8>
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	605a      	str	r2, [r3, #4]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <vTaskSwitchContext+0xf4>)
 8001cf0:	6013      	str	r3, [r2, #0]
}
 8001cf2:	bf00      	nop
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200001b0 	.word	0x200001b0
 8001d00:	2000019c 	.word	0x2000019c
 8001d04:	200000b0 	.word	0x200000b0
 8001d08:	20000190 	.word	0x20000190
 8001d0c:	200000b4 	.word	0x200000b4

08001d10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d109      	bne.n	8001d34 <vTaskPlaceOnEventList+0x24>
 8001d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d24:	f383 8811 	msr	BASEPRI, r3
 8001d28:	f3bf 8f6f 	isb	sy
 8001d2c:	f3bf 8f4f 	dsb	sy
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	e7fe      	b.n	8001d32 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <vTaskPlaceOnEventList+0x44>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	3318      	adds	r3, #24
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7fe fa98 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001d42:	2101      	movs	r1, #1
 8001d44:	6838      	ldr	r0, [r7, #0]
 8001d46:	f000 fb29 	bl	800239c <prvAddCurrentTaskToDelayedList>
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200000b0 	.word	0x200000b0

08001d58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <vTaskPlaceOnEventListRestricted+0x26>
 8001d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6e:	f383 8811 	msr	BASEPRI, r3
 8001d72:	f3bf 8f6f 	isb	sy
 8001d76:	f3bf 8f4f 	dsb	sy
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	e7fe      	b.n	8001d7c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <vTaskPlaceOnEventListRestricted+0x50>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	3318      	adds	r3, #24
 8001d84:	4619      	mov	r1, r3
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f7fe fa4f 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
 8001d96:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001d98:	6879      	ldr	r1, [r7, #4]
 8001d9a:	68b8      	ldr	r0, [r7, #8]
 8001d9c:	f000 fafe 	bl	800239c <prvAddCurrentTaskToDelayedList>
	}
 8001da0:	bf00      	nop
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200000b0 	.word	0x200000b0

08001dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <xTaskRemoveFromEventList+0x2a>
 8001dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc6:	f383 8811 	msr	BASEPRI, r3
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	e7fe      	b.n	8001dd4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	3318      	adds	r3, #24
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fa82 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001de0:	4b1d      	ldr	r3, [pc, #116]	; (8001e58 <xTaskRemoveFromEventList+0xac>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d11c      	bne.n	8001e22 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	3304      	adds	r3, #4
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fa79 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df6:	2201      	movs	r2, #1
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <xTaskRemoveFromEventList+0xb0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <xTaskRemoveFromEventList+0xb0>)
 8001e02:	6013      	str	r3, [r2, #0]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4a13      	ldr	r2, [pc, #76]	; (8001e60 <xTaskRemoveFromEventList+0xb4>)
 8001e12:	441a      	add	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	3304      	adds	r3, #4
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	f7fe fa05 	bl	800022a <vListInsertEnd>
 8001e20:	e005      	b.n	8001e2e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	3318      	adds	r3, #24
 8001e26:	4619      	mov	r1, r3
 8001e28:	480e      	ldr	r0, [pc, #56]	; (8001e64 <xTaskRemoveFromEventList+0xb8>)
 8001e2a:	f7fe f9fe 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e32:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <xTaskRemoveFromEventList+0xbc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d905      	bls.n	8001e48 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <xTaskRemoveFromEventList+0xc0>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e001      	b.n	8001e4c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001e4c:	697b      	ldr	r3, [r7, #20]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200001b0 	.word	0x200001b0
 8001e5c:	20000190 	.word	0x20000190
 8001e60:	200000b4 	.word	0x200000b4
 8001e64:	20000148 	.word	0x20000148
 8001e68:	200000b0 	.word	0x200000b0
 8001e6c:	2000019c 	.word	0x2000019c

08001e70 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <vTaskSetTimeOutState+0x22>
 8001e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e82:	f383 8811 	msr	BASEPRI, r3
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	f3bf 8f4f 	dsb	sy
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	e7fe      	b.n	8001e90 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001e92:	4b07      	ldr	r3, [pc, #28]	; (8001eb0 <vTaskSetTimeOutState+0x40>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <vTaskSetTimeOutState+0x44>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	605a      	str	r2, [r3, #4]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	200001a0 	.word	0x200001a0
 8001eb4:	2000018c 	.word	0x2000018c

08001eb8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d109      	bne.n	8001edc <xTaskCheckForTimeOut+0x24>
 8001ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e7fe      	b.n	8001eda <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <xTaskCheckForTimeOut+0x3e>
 8001ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee6:	f383 8811 	msr	BASEPRI, r3
 8001eea:	f3bf 8f6f 	isb	sy
 8001eee:	f3bf 8f4f 	dsb	sy
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	e7fe      	b.n	8001ef4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001ef6:	f7fe fb23 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001efa:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <xTaskCheckForTimeOut+0xb4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d102      	bne.n	8001f10 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e026      	b.n	8001f5e <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b16      	ldr	r3, [pc, #88]	; (8001f70 <xTaskCheckForTimeOut+0xb8>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d007      	beq.n	8001f2c <xTaskCheckForTimeOut+0x74>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d802      	bhi.n	8001f2c <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001f26:	2301      	movs	r3, #1
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e018      	b.n	8001f5e <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	1ad2      	subs	r2, r2, r3
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d20e      	bcs.n	8001f5a <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1acb      	subs	r3, r1, r3
 8001f48:	441a      	add	r2, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff8e 	bl	8001e70 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e001      	b.n	8001f5e <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001f5e:	f7fe fb1d 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001f62:	697b      	ldr	r3, [r7, #20]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	2000018c 	.word	0x2000018c
 8001f70:	200001a0 	.word	0x200001a0

08001f74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <vTaskMissedYield+0x14>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	601a      	str	r2, [r3, #0]
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	2000019c 	.word	0x2000019c

08001f8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001f94:	f000 f854 	bl	8002040 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <prvIdleTask+0x2c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d907      	bls.n	8001fb0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <prvIdleTask+0x30>)
 8001fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001fb0:	f001 fc47 	bl	8003842 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001fb4:	e7ee      	b.n	8001f94 <prvIdleTask+0x8>
 8001fb6:	bf00      	nop
 8001fb8:	200000b4 	.word	0x200000b4
 8001fbc:	e000ed04 	.word	0xe000ed04

08001fc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	e00c      	b.n	8001fe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4a12      	ldr	r2, [pc, #72]	; (8002020 <prvInitialiseTaskLists+0x60>)
 8001fd8:	4413      	add	r3, r2
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe f8f8 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d9ef      	bls.n	8001fcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <prvInitialiseTaskLists+0x64>)
 8001fee:	f7fe f8ef 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001ff2:	480d      	ldr	r0, [pc, #52]	; (8002028 <prvInitialiseTaskLists+0x68>)
 8001ff4:	f7fe f8ec 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001ff8:	480c      	ldr	r0, [pc, #48]	; (800202c <prvInitialiseTaskLists+0x6c>)
 8001ffa:	f7fe f8e9 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001ffe:	480c      	ldr	r0, [pc, #48]	; (8002030 <prvInitialiseTaskLists+0x70>)
 8002000:	f7fe f8e6 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002004:	480b      	ldr	r0, [pc, #44]	; (8002034 <prvInitialiseTaskLists+0x74>)
 8002006:	f7fe f8e3 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800200a:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <prvInitialiseTaskLists+0x78>)
 800200c:	4a05      	ldr	r2, [pc, #20]	; (8002024 <prvInitialiseTaskLists+0x64>)
 800200e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <prvInitialiseTaskLists+0x7c>)
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <prvInitialiseTaskLists+0x68>)
 8002014:	601a      	str	r2, [r3, #0]
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200000b4 	.word	0x200000b4
 8002024:	20000118 	.word	0x20000118
 8002028:	2000012c 	.word	0x2000012c
 800202c:	20000148 	.word	0x20000148
 8002030:	2000015c 	.word	0x2000015c
 8002034:	20000174 	.word	0x20000174
 8002038:	20000140 	.word	0x20000140
 800203c:	20000144 	.word	0x20000144

08002040 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002046:	e028      	b.n	800209a <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8002048:	f7ff fc64 	bl	8001914 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <prvCheckTasksWaitingTermination+0x6c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800205c:	f7ff fc68 	bl	8001930 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d119      	bne.n	800209a <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002066:	f7fe fa6b 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <prvCheckTasksWaitingTermination+0x6c>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	3304      	adds	r3, #4
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe f934 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800207c:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <prvCheckTasksWaitingTermination+0x70>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <prvCheckTasksWaitingTermination+0x70>)
 8002084:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <prvCheckTasksWaitingTermination+0x74>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3b01      	subs	r3, #1
 800208c:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <prvCheckTasksWaitingTermination+0x74>)
 800208e:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8002090:	f7fe fa84 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002094:	6838      	ldr	r0, [r7, #0]
 8002096:	f000 f80f 	bl	80020b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <prvCheckTasksWaitingTermination+0x74>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1d2      	bne.n	8002048 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	2000015c 	.word	0x2000015c
 80020b0:	20000188 	.word	0x20000188
 80020b4:	20000170 	.word	0x20000170

080020b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fb62 	bl	800078e <vPortFree>
			vPortFree( pxTCB );
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fb5f 	bl	800078e <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020de:	4b0f      	ldr	r3, [pc, #60]	; (800211c <prvResetNextTaskUnblockTime+0x44>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <prvResetNextTaskUnblockTime+0x14>
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <prvResetNextTaskUnblockTime+0x16>
 80020ec:	2300      	movs	r3, #0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d004      	beq.n	80020fc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <prvResetNextTaskUnblockTime+0x48>)
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80020fa:	e008      	b.n	800210e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <prvResetNextTaskUnblockTime+0x44>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <prvResetNextTaskUnblockTime+0x48>)
 800210c:	6013      	str	r3, [r2, #0]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	20000140 	.word	0x20000140
 8002120:	200001a8 	.word	0x200001a8

08002124 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <xTaskGetCurrentTaskHandle+0x1c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8002130:	687b      	ldr	r3, [r7, #4]
	}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	200000b0 	.word	0x200000b0

08002144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <xTaskGetSchedulerState+0x34>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002152:	2301      	movs	r3, #1
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	e008      	b.n	800216a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <xTaskGetSchedulerState+0x38>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002160:	2302      	movs	r3, #2
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	e001      	b.n	800216a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800216a:	687b      	ldr	r3, [r7, #4]
	}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	20000194 	.word	0x20000194
 800217c:	200001b0 	.word	0x200001b0

08002180 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d062      	beq.n	8002258 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002196:	4b32      	ldr	r3, [pc, #200]	; (8002260 <vTaskPriorityInherit+0xe0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	429a      	cmp	r2, r3
 800219e:	d25b      	bcs.n	8002258 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db06      	blt.n	80021b6 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <vTaskPriorityInherit+0xe0>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ae:	f1c3 0205 	rsb	r2, r3, #5
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6959      	ldr	r1, [r3, #20]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4a27      	ldr	r2, [pc, #156]	; (8002264 <vTaskPriorityInherit+0xe4>)
 80021c8:	4413      	add	r3, r2
 80021ca:	4299      	cmp	r1, r3
 80021cc:	d101      	bne.n	80021d2 <vTaskPriorityInherit+0x52>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <vTaskPriorityInherit+0x54>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d03a      	beq.n	800224e <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3304      	adds	r3, #4
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f881 	bl	80002e4 <uxListRemove>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d115      	bne.n	8002214 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021ec:	491d      	ldr	r1, [pc, #116]	; (8002264 <vTaskPriorityInherit+0xe4>)
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10a      	bne.n	8002214 <vTaskPriorityInherit+0x94>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	2201      	movs	r2, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43da      	mvns	r2, r3
 800220a:	4b17      	ldr	r3, [pc, #92]	; (8002268 <vTaskPriorityInherit+0xe8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4013      	ands	r3, r2
 8002210:	4a15      	ldr	r2, [pc, #84]	; (8002268 <vTaskPriorityInherit+0xe8>)
 8002212:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <vTaskPriorityInherit+0xe0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002222:	2201      	movs	r2, #1
 8002224:	409a      	lsls	r2, r3
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <vTaskPriorityInherit+0xe8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4313      	orrs	r3, r2
 800222c:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <vTaskPriorityInherit+0xe8>)
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4a09      	ldr	r2, [pc, #36]	; (8002264 <vTaskPriorityInherit+0xe4>)
 800223e:	441a      	add	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3304      	adds	r3, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f7fd ffef 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800224c:	e004      	b.n	8002258 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <vTaskPriorityInherit+0xe0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	200000b0 	.word	0x200000b0
 8002264:	200000b4 	.word	0x200000b4
 8002268:	20000190 	.word	0x20000190

0800226c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d06c      	beq.n	800235c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <xTaskPriorityDisinherit+0xfc>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d009      	beq.n	80022a0 <xTaskPriorityDisinherit+0x34>
 800228c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002290:	f383 8811 	msr	BASEPRI, r3
 8002294:	f3bf 8f6f 	isb	sy
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	e7fe      	b.n	800229e <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <xTaskPriorityDisinherit+0x50>
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	e7fe      	b.n	80022ba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c0:	1e5a      	subs	r2, r3, #1
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d044      	beq.n	800235c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d140      	bne.n	800235c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	3304      	adds	r3, #4
 80022de:	4618      	mov	r0, r3
 80022e0:	f7fe f800 	bl	80002e4 <uxListRemove>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d115      	bne.n	8002316 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	491f      	ldr	r1, [pc, #124]	; (800236c <xTaskPriorityDisinherit+0x100>)
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d10a      	bne.n	8002316 <xTaskPriorityDisinherit+0xaa>
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	2201      	movs	r2, #1
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	4b18      	ldr	r3, [pc, #96]	; (8002370 <xTaskPriorityDisinherit+0x104>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4013      	ands	r3, r2
 8002312:	4a17      	ldr	r2, [pc, #92]	; (8002370 <xTaskPriorityDisinherit+0x104>)
 8002314:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	f1c3 0205 	rsb	r2, r3, #5
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232e:	2201      	movs	r2, #1
 8002330:	409a      	lsls	r2, r3
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <xTaskPriorityDisinherit+0x104>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4313      	orrs	r3, r2
 8002338:	4a0d      	ldr	r2, [pc, #52]	; (8002370 <xTaskPriorityDisinherit+0x104>)
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4a08      	ldr	r2, [pc, #32]	; (800236c <xTaskPriorityDisinherit+0x100>)
 800234a:	441a      	add	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	3304      	adds	r3, #4
 8002350:	4619      	mov	r1, r3
 8002352:	4610      	mov	r0, r2
 8002354:	f7fd ff69 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8002358:	2301      	movs	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800235c:	697b      	ldr	r3, [r7, #20]
	}
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200000b0 	.word	0x200000b0
 800236c:	200000b4 	.word	0x200000b4
 8002370:	20000190 	.word	0x20000190

08002374 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <pvTaskIncrementMutexHeldCount+0x24>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <pvTaskIncrementMutexHeldCount+0x24>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002386:	3201      	adds	r2, #1
 8002388:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 800238a:	4b03      	ldr	r3, [pc, #12]	; (8002398 <pvTaskIncrementMutexHeldCount+0x24>)
 800238c:	681b      	ldr	r3, [r3, #0]
	}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	200000b0 	.word	0x200000b0

0800239c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <prvAddCurrentTaskToDelayedList+0xb0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023ac:	4b28      	ldr	r3, [pc, #160]	; (8002450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	3304      	adds	r3, #4
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fd ff96 	bl	80002e4 <uxListRemove>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10b      	bne.n	80023d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	2201      	movs	r2, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43da      	mvns	r2, r3
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4013      	ands	r3, r2
 80023d2:	4a20      	ldr	r2, [pc, #128]	; (8002454 <prvAddCurrentTaskToDelayedList+0xb8>)
 80023d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d10a      	bne.n	80023f4 <prvAddCurrentTaskToDelayedList+0x58>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d007      	beq.n	80023f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3304      	adds	r3, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	481a      	ldr	r0, [pc, #104]	; (8002458 <prvAddCurrentTaskToDelayedList+0xbc>)
 80023ee:	f7fd ff1c 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023f2:	e026      	b.n	8002442 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023fc:	4b14      	ldr	r3, [pc, #80]	; (8002450 <prvAddCurrentTaskToDelayedList+0xb4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002404:	68ba      	ldr	r2, [r7, #8]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	429a      	cmp	r2, r3
 800240a:	d209      	bcs.n	8002420 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800240c:	4b13      	ldr	r3, [pc, #76]	; (800245c <prvAddCurrentTaskToDelayedList+0xc0>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	3304      	adds	r3, #4
 8002416:	4619      	mov	r1, r3
 8002418:	4610      	mov	r0, r2
 800241a:	f7fd ff2a 	bl	8000272 <vListInsert>
}
 800241e:	e010      	b.n	8002442 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3304      	adds	r3, #4
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f7fd ff20 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d202      	bcs.n	8002442 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800243c:	4a09      	ldr	r2, [pc, #36]	; (8002464 <prvAddCurrentTaskToDelayedList+0xc8>)
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6013      	str	r3, [r2, #0]
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	2000018c 	.word	0x2000018c
 8002450:	200000b0 	.word	0x200000b0
 8002454:	20000190 	.word	0x20000190
 8002458:	20000174 	.word	0x20000174
 800245c:	20000144 	.word	0x20000144
 8002460:	20000140 	.word	0x20000140
 8002464:	200001a8 	.word	0x200001a8

08002468 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800246e:	2300      	movs	r3, #0
 8002470:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002472:	f000 fadd 	bl	8002a30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <xTimerCreateTimerTask+0x54>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <xTimerCreateTimerTask+0x58>)
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	2303      	movs	r3, #3
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2300      	movs	r3, #0
 8002488:	f44f 7202 	mov.w	r2, #520	; 0x208
 800248c:	490d      	ldr	r1, [pc, #52]	; (80024c4 <xTimerCreateTimerTask+0x5c>)
 800248e:	480e      	ldr	r0, [pc, #56]	; (80024c8 <xTimerCreateTimerTask+0x60>)
 8002490:	f7fe ff2e 	bl	80012f0 <xTaskCreate>
 8002494:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d109      	bne.n	80024b0 <xTimerCreateTimerTask+0x48>
 800249c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a0:	f383 8811 	msr	BASEPRI, r3
 80024a4:	f3bf 8f6f 	isb	sy
 80024a8:	f3bf 8f4f 	dsb	sy
 80024ac:	603b      	str	r3, [r7, #0]
 80024ae:	e7fe      	b.n	80024ae <xTimerCreateTimerTask+0x46>
	return xReturn;
 80024b0:	687b      	ldr	r3, [r7, #4]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200001e4 	.word	0x200001e4
 80024c0:	200001e8 	.word	0x200001e8
 80024c4:	08003c78 	.word	0x08003c78
 80024c8:	08002681 	.word	0x08002681

080024cc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80024da:	2028      	movs	r0, #40	; 0x28
 80024dc:	f7fe f940 	bl	8000760 <pvPortMalloc>
 80024e0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f805 	bl	8002506 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 80024fc:	697b      	ldr	r3, [r7, #20]
	}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
 8002512:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <prvInitialiseNewTimer+0x28>
 800251a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800251e:	f383 8811 	msr	BASEPRI, r3
 8002522:	f3bf 8f6f 	isb	sy
 8002526:	f3bf 8f4f 	dsb	sy
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e7fe      	b.n	800252c <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	2b00      	cmp	r3, #0
 8002532:	d015      	beq.n	8002560 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8002534:	f000 fa7c 	bl	8002a30 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8002538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	6a3a      	ldr	r2, [r7, #32]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3304      	adds	r3, #4
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd fe58 	bl	8000210 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8002560:	bf00      	nop
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002576:	2300      	movs	r3, #0
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d109      	bne.n	8002594 <xTimerGenericCommand+0x2c>
 8002580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	e7fe      	b.n	8002592 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <xTimerGenericCommand+0x94>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d02a      	beq.n	80025f2 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	dc18      	bgt.n	80025e0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80025ae:	f7ff fdc9 	bl	8002144 <xTaskGetSchedulerState>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d109      	bne.n	80025cc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <xTimerGenericCommand+0x94>)
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	f107 0114 	add.w	r1, r7, #20
 80025c0:	2300      	movs	r3, #0
 80025c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025c4:	f7fe f9b6 	bl	8000934 <xQueueGenericSend>
 80025c8:	6278      	str	r0, [r7, #36]	; 0x24
 80025ca:	e012      	b.n	80025f2 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80025cc:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <xTimerGenericCommand+0x94>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f107 0114 	add.w	r1, r7, #20
 80025d4:	2300      	movs	r3, #0
 80025d6:	2200      	movs	r2, #0
 80025d8:	f7fe f9ac 	bl	8000934 <xQueueGenericSend>
 80025dc:	6278      	str	r0, [r7, #36]	; 0x24
 80025de:	e008      	b.n	80025f2 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <xTimerGenericCommand+0x94>)
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	f107 0114 	add.w	r1, r7, #20
 80025e8:	2300      	movs	r3, #0
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	f7fe fa9c 	bl	8000b28 <xQueueGenericSendFromISR>
 80025f0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3728      	adds	r7, #40	; 0x28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200001e4 	.word	0x200001e4

08002600 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af02      	add	r7, sp, #8
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800260a:	4b1c      	ldr	r3, [pc, #112]	; (800267c <prvProcessExpiredTimer+0x7c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3304      	adds	r3, #4
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd fe63 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d121      	bne.n	800266a <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	18d1      	adds	r1, r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	6978      	ldr	r0, [r7, #20]
 8002634:	f000 f8c8 	bl	80027c8 <prvInsertTimerInActiveList>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d015      	beq.n	800266a <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	2100      	movs	r1, #0
 8002648:	6978      	ldr	r0, [r7, #20]
 800264a:	f7ff ff8d 	bl	8002568 <xTimerGenericCommand>
 800264e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d109      	bne.n	800266a <prvProcessExpiredTimer+0x6a>
 8002656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	e7fe      	b.n	8002668 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	4798      	blx	r3
}
 8002672:	bf00      	nop
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001dc 	.word	0x200001dc

08002680 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002688:	f107 0308 	add.w	r3, r7, #8
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f857 	bl	8002740 <prvGetNextExpireTime>
 8002692:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4619      	mov	r1, r3
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 f803 	bl	80026a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800269e:	f000 f8d5 	bl	800284c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80026a2:	e7f1      	b.n	8002688 <prvTimerTask+0x8>

080026a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80026ae:	f7ff f931 	bl	8001914 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80026b2:	f107 0308 	add.w	r3, r7, #8
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f866 	bl	8002788 <prvSampleTimeNow>
 80026bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d130      	bne.n	8002726 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <prvProcessTimerOrBlockTask+0x3c>
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d806      	bhi.n	80026e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80026d2:	f7ff f92d 	bl	8001930 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80026d6:	68f9      	ldr	r1, [r7, #12]
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff91 	bl	8002600 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80026de:	e024      	b.n	800272a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80026e6:	4b13      	ldr	r3, [pc, #76]	; (8002734 <prvProcessTimerOrBlockTask+0x90>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <prvProcessTimerOrBlockTask+0x94>)
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	f7fe fdbf 	bl	8001288 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800270a:	f7ff f911 	bl	8001930 <xTaskResumeAll>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <prvProcessTimerOrBlockTask+0x98>)
 8002716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	f3bf 8f6f 	isb	sy
}
 8002724:	e001      	b.n	800272a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002726:	f7ff f903 	bl	8001930 <xTaskResumeAll>
}
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200001e0 	.word	0x200001e0
 8002738:	200001e4 	.word	0x200001e4
 800273c:	e000ed04 	.word	0xe000ed04

08002740 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002748:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <prvGetNextExpireTime+0x44>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d105      	bne.n	8002772 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <prvGetNextExpireTime+0x44>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e001      	b.n	8002776 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	200001dc 	.word	0x200001dc

08002788 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002790:	f7ff f96a 	bl	8001a68 <xTaskGetTickCount>
 8002794:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <prvSampleTimeNow+0x3c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	429a      	cmp	r2, r3
 800279e:	d205      	bcs.n	80027ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80027a0:	f000 f8e6 	bl	8002970 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	e002      	b.n	80027b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80027b2:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <prvSampleTimeNow+0x3c>)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80027b8:	68fb      	ldr	r3, [r7, #12]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200001ec 	.word	0x200001ec

080027c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d812      	bhi.n	8002814 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	1ad2      	subs	r2, r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d302      	bcc.n	8002802 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80027fc:	2301      	movs	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	e01b      	b.n	800283a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <prvInsertTimerInActiveList+0x7c>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	3304      	adds	r3, #4
 800280a:	4619      	mov	r1, r3
 800280c:	4610      	mov	r0, r2
 800280e:	f7fd fd30 	bl	8000272 <vListInsert>
 8002812:	e012      	b.n	800283a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d206      	bcs.n	800282a <prvInsertTimerInActiveList+0x62>
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d302      	bcc.n	800282a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002824:	2301      	movs	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	e007      	b.n	800283a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800282a:	4b07      	ldr	r3, [pc, #28]	; (8002848 <prvInsertTimerInActiveList+0x80>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3304      	adds	r3, #4
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f7fd fd1c 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800283a:	697b      	ldr	r3, [r7, #20]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	200001e0 	.word	0x200001e0
 8002848:	200001dc 	.word	0x200001dc

0800284c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08c      	sub	sp, #48	; 0x30
 8002850:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002852:	e07a      	b.n	800294a <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db77      	blt.n	800294a <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d004      	beq.n	8002870 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	3304      	adds	r3, #4
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd fd3a 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002870:	1d3b      	adds	r3, r7, #4
 8002872:	4618      	mov	r0, r3
 8002874:	f7ff ff88 	bl	8002788 <prvSampleTimeNow>
 8002878:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	2b09      	cmp	r3, #9
 800287e:	d863      	bhi.n	8002948 <prvProcessReceivedCommands+0xfc>
 8002880:	a201      	add	r2, pc, #4	; (adr r2, 8002888 <prvProcessReceivedCommands+0x3c>)
 8002882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002886:	bf00      	nop
 8002888:	080028b1 	.word	0x080028b1
 800288c:	080028b1 	.word	0x080028b1
 8002890:	080028b1 	.word	0x080028b1
 8002894:	0800294b 	.word	0x0800294b
 8002898:	0800290b 	.word	0x0800290b
 800289c:	08002941 	.word	0x08002941
 80028a0:	080028b1 	.word	0x080028b1
 80028a4:	080028b1 	.word	0x080028b1
 80028a8:	0800294b 	.word	0x0800294b
 80028ac:	0800290b 	.word	0x0800290b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	18d1      	adds	r1, r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a3a      	ldr	r2, [r7, #32]
 80028bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028be:	f7ff ff83 	bl	80027c8 <prvInsertTimerInActiveList>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d040      	beq.n	800294a <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d138      	bne.n	800294a <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	441a      	add	r2, r3
 80028e0:	2300      	movs	r3, #0
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2300      	movs	r3, #0
 80028e6:	2100      	movs	r1, #0
 80028e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ea:	f7ff fe3d 	bl	8002568 <xTimerGenericCommand>
 80028ee:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d129      	bne.n	800294a <prvProcessReceivedCommands+0xfe>
 80028f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028fa:	f383 8811 	msr	BASEPRI, r3
 80028fe:	f3bf 8f6f 	isb	sy
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	61bb      	str	r3, [r7, #24]
 8002908:	e7fe      	b.n	8002908 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <prvProcessReceivedCommands+0xe0>
 8002918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291c:	f383 8811 	msr	BASEPRI, r3
 8002920:	f3bf 8f6f 	isb	sy
 8002924:	f3bf 8f4f 	dsb	sy
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e7fe      	b.n	800292a <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	699a      	ldr	r2, [r3, #24]
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	18d1      	adds	r1, r2, r3
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	6a3a      	ldr	r2, [r7, #32]
 8002938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800293a:	f7ff ff45 	bl	80027c8 <prvInsertTimerInActiveList>
					break;
 800293e:	e004      	b.n	800294a <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002942:	f7fd ff24 	bl	800078e <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002946:	e000      	b.n	800294a <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002948:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <prvProcessReceivedCommands+0x120>)
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	f107 0108 	add.w	r1, r7, #8
 8002952:	2300      	movs	r3, #0
 8002954:	2200      	movs	r2, #0
 8002956:	f7fe fa05 	bl	8000d64 <xQueueGenericReceive>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	f47f af79 	bne.w	8002854 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002962:	bf00      	nop
 8002964:	3728      	adds	r7, #40	; 0x28
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200001e4 	.word	0x200001e4

08002970 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002976:	e044      	b.n	8002a02 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <prvSwitchTimerLists+0xb8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002982:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <prvSwitchTimerLists+0xb8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	3304      	adds	r3, #4
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fca7 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	6938      	ldr	r0, [r7, #16]
 800299c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d12d      	bne.n	8002a02 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	4413      	add	r3, r2
 80029ae:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d90e      	bls.n	80029d6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <prvSwitchTimerLists+0xb8>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	3304      	adds	r3, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	4610      	mov	r0, r2
 80029d0:	f7fd fc4f 	bl	8000272 <vListInsert>
 80029d4:	e015      	b.n	8002a02 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80029d6:	2300      	movs	r3, #0
 80029d8:	9300      	str	r3, [sp, #0]
 80029da:	2300      	movs	r3, #0
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	2100      	movs	r1, #0
 80029e0:	6938      	ldr	r0, [r7, #16]
 80029e2:	f7ff fdc1 	bl	8002568 <xTimerGenericCommand>
 80029e6:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <prvSwitchTimerLists+0x92>
 80029ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	e7fe      	b.n	8002a00 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <prvSwitchTimerLists+0xb8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1b5      	bne.n	8002978 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <prvSwitchTimerLists+0xb8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <prvSwitchTimerLists+0xbc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <prvSwitchTimerLists+0xb8>)
 8002a18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <prvSwitchTimerLists+0xbc>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	200001dc 	.word	0x200001dc
 8002a2c:	200001e0 	.word	0x200001e0

08002a30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002a34:	f7fd fd84 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002a38:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <prvCheckForValidListAndQueue+0x54>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d11d      	bne.n	8002a7c <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002a40:	4811      	ldr	r0, [pc, #68]	; (8002a88 <prvCheckForValidListAndQueue+0x58>)
 8002a42:	f7fd fbc5 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002a46:	4811      	ldr	r0, [pc, #68]	; (8002a8c <prvCheckForValidListAndQueue+0x5c>)
 8002a48:	f7fd fbc2 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <prvCheckForValidListAndQueue+0x60>)
 8002a4e:	4a0e      	ldr	r2, [pc, #56]	; (8002a88 <prvCheckForValidListAndQueue+0x58>)
 8002a50:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <prvCheckForValidListAndQueue+0x64>)
 8002a54:	4a0d      	ldr	r2, [pc, #52]	; (8002a8c <prvCheckForValidListAndQueue+0x5c>)
 8002a56:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002a58:	2200      	movs	r2, #0
 8002a5a:	210c      	movs	r1, #12
 8002a5c:	2005      	movs	r0, #5
 8002a5e:	f7fd ff11 	bl	8000884 <xQueueGenericCreate>
 8002a62:	4602      	mov	r2, r0
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <prvCheckForValidListAndQueue+0x54>)
 8002a66:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <prvCheckForValidListAndQueue+0x54>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002a70:	4b04      	ldr	r3, [pc, #16]	; (8002a84 <prvCheckForValidListAndQueue+0x54>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4908      	ldr	r1, [pc, #32]	; (8002a98 <prvCheckForValidListAndQueue+0x68>)
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fbb4 	bl	80011e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a7c:	f7fd fd8e 	bl	800059c <vPortExitCritical>
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	200001e4 	.word	0x200001e4
 8002a88:	200001b4 	.word	0x200001b4
 8002a8c:	200001c8 	.word	0x200001c8
 8002a90:	200001dc 	.word	0x200001dc
 8002a94:	200001e0 	.word	0x200001e0
 8002a98:	08003c80 	.word	0x08003c80

08002a9c <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <DAC_SetChannel1Data+0x34>)
 8002aae:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	461a      	mov	r2, r3
 8002abe:	887b      	ldrh	r3, [r7, #2]
 8002ac0:	6013      	str	r3, [r2, #0]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40007400 	.word	0x40007400

08002ad4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <DMA_Init+0xac>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002afe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002b0a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002b16:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002b22:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b28:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0307 	bic.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68fa      	ldr	r2, [r7, #12]
 8002b58:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685a      	ldr	r2, [r3, #4]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689a      	ldr	r2, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60da      	str	r2, [r3, #12]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	f01c803f 	.word	0xf01c803f

08002b84 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002ba2:	e005      	b.n	8002bb0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 0201 	bic.w	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	601a      	str	r2, [r3, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
 8002bd8:	e001      	b.n	8002bde <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3714      	adds	r7, #20
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a15      	ldr	r2, [pc, #84]	; (8002c58 <DMA_GetFlagStatus+0x6c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d802      	bhi.n	8002c0c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <DMA_GetFlagStatus+0x70>)
 8002c08:	613b      	str	r3, [r7, #16]
 8002c0a:	e001      	b.n	8002c10 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <DMA_GetFlagStatus+0x74>)
 8002c0e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	e002      	b.n	8002c28 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002c2e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	75fb      	strb	r3, [r7, #23]
 8002c42:	e001      	b.n	8002c48 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002c44:	2300      	movs	r3, #0
 8002c46:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	4002640f 	.word	0x4002640f
 8002c5c:	40026000 	.word	0x40026000
 8002c60:	40026400 	.word	0x40026400

08002c64 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <DMA_ClearFlag+0x50>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d802      	bhi.n	8002c7c <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <DMA_ClearFlag+0x54>)
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	e001      	b.n	8002c80 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	; (8002cbc <DMA_ClearFlag+0x58>)
 8002c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d007      	beq.n	8002c9a <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002c90:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002c98:	e006      	b.n	8002ca8 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002ca0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	6093      	str	r3, [r2, #8]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	4002640f 	.word	0x4002640f
 8002cb8:	40026000 	.word	0x40026000
 8002cbc:	40026400 	.word	0x40026400

08002cc0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e076      	b.n	8002dca <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002cdc:	2201      	movs	r2, #1
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d165      	bne.n	8002dc4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	2103      	movs	r1, #3
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	401a      	ands	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	791b      	ldrb	r3, [r3, #4]
 8002d16:	4619      	mov	r1, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	791b      	ldrb	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d003      	beq.n	8002d36 <GPIO_Init+0x76>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	791b      	ldrb	r3, [r3, #4]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d12e      	bne.n	8002d94 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689a      	ldr	r2, [r3, #8]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2103      	movs	r1, #3
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	401a      	ands	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	795b      	ldrb	r3, [r3, #5]
 8002d54:	4619      	mov	r1, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	2301      	movs	r3, #1
 8002d70:	408b      	lsls	r3, r1
 8002d72:	43db      	mvns	r3, r3
 8002d74:	401a      	ands	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	7992      	ldrb	r2, [r2, #6]
 8002d82:	4611      	mov	r1, r2
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	b292      	uxth	r2, r2
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	b292      	uxth	r2, r2
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2103      	movs	r1, #3
 8002da0:	fa01 f303 	lsl.w	r3, r1, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	401a      	ands	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	79db      	ldrb	r3, [r3, #7]
 8002db4:	4619      	mov	r1, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b0f      	cmp	r3, #15
 8002dce:	d985      	bls.n	8002cdc <GPIO_Init+0x1c>
    }
  }
}
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	460b      	mov	r3, r1
 8002de6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002de8:	78fb      	ldrb	r3, [r7, #3]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002dee:	490a      	ldr	r1, [pc, #40]	; (8002e18 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002df2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002dfa:	e006      	b.n	8002e0a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002dfc:	4906      	ldr	r1, [pc, #24]	; (8002e18 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	4013      	ands	r3, r2
 8002e08:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800

08002e1c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	887a      	ldrh	r2, [r7, #2]
 8002e2c:	819a      	strh	r2, [r3, #12]
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	460b      	mov	r3, r1
 8002e44:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	891b      	ldrh	r3, [r3, #8]
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	887b      	ldrh	r3, [r7, #2]
 8002e52:	4013      	ands	r3, r2
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
 8002e5e:	e001      	b.n	8002e64 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	4a10      	ldr	r2, [pc, #64]	; (8002ec4 <STM_EVAL_LEDInit+0x50>)
 8002e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e86:	2101      	movs	r1, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ffa7 	bl	8002ddc <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	4a0d      	ldr	r2, [pc, #52]	; (8002ec8 <STM_EVAL_LEDInit+0x54>)
 8002e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <STM_EVAL_LEDInit+0x58>)
 8002eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb0:	f107 0208 	add.w	r2, r7, #8
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ff02 	bl	8002cc0 <GPIO_Init>
}
 8002ebc:	bf00      	nop
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	08003cf4 	.word	0x08003cf4
 8002ec8:	08003cec 	.word	0x08003cec
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	4a06      	ldr	r2, [pc, #24]	; (8002ef8 <STM_EVAL_LEDOn+0x28>)
 8002ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee2:	79fa      	ldrb	r2, [r7, #7]
 8002ee4:	4905      	ldr	r1, [pc, #20]	; (8002efc <STM_EVAL_LEDOn+0x2c>)
 8002ee6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002eea:	831a      	strh	r2, [r3, #24]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	20000004 	.word	0x20000004
 8002efc:	08003cec 	.word	0x08003cec

08002f00 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	4a06      	ldr	r2, [pc, #24]	; (8002f28 <STM_EVAL_LEDOff+0x28>)
 8002f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f12:	79fa      	ldrb	r2, [r7, #7]
 8002f14:	4905      	ldr	r1, [pc, #20]	; (8002f2c <STM_EVAL_LEDOff+0x2c>)
 8002f16:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002f1a:	835a      	strh	r2, [r3, #26]
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	20000004 	.word	0x20000004
 8002f2c:	08003cec 	.word	0x08003cec

08002f30 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002f34:	4b38      	ldr	r3, [pc, #224]	; (8003018 <Audio_MAL_IRQHandler+0xe8>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b38      	ldr	r3, [pc, #224]	; (800301c <Audio_MAL_IRQHandler+0xec>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f7ff fe54 	bl	8002bec <DMA_GetFlagStatus>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d064      	beq.n	8003014 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002f4a:	4b35      	ldr	r3, [pc, #212]	; (8003020 <Audio_MAL_IRQHandler+0xf0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d04c      	beq.n	8002fec <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002f52:	bf00      	nop
 8002f54:	4b30      	ldr	r3, [pc, #192]	; (8003018 <Audio_MAL_IRQHandler+0xe8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fe2f 	bl	8002bbc <DMA_GetCmdStatus>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1f7      	bne.n	8002f54 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002f64:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <Audio_MAL_IRQHandler+0xe8>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b2c      	ldr	r3, [pc, #176]	; (800301c <Audio_MAL_IRQHandler+0xec>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f7ff fe78 	bl	8002c64 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002f74:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <Audio_MAL_IRQHandler+0xf4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	; (8003028 <Audio_MAL_IRQHandler+0xf8>)
 8002f7c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002f7e:	4b28      	ldr	r3, [pc, #160]	; (8003020 <Audio_MAL_IRQHandler+0xf0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f86:	4293      	cmp	r3, r2
 8002f88:	bf28      	it	cs
 8002f8a:	4613      	movcs	r3, r2
 8002f8c:	4a26      	ldr	r2, [pc, #152]	; (8003028 <Audio_MAL_IRQHandler+0xf8>)
 8002f8e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <Audio_MAL_IRQHandler+0xe8>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4924      	ldr	r1, [pc, #144]	; (8003028 <Audio_MAL_IRQHandler+0xf8>)
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fd9c 	bl	8002ad4 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8002f9c:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <Audio_MAL_IRQHandler+0xe8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fdee 	bl	8002b84 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8002fa8:	4b1e      	ldr	r3, [pc, #120]	; (8003024 <Audio_MAL_IRQHandler+0xf4>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <Audio_MAL_IRQHandler+0xf0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d203      	bcs.n	8002fbe <Audio_MAL_IRQHandler+0x8e>
 8002fb6:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <Audio_MAL_IRQHandler+0xf0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	e000      	b.n	8002fc0 <Audio_MAL_IRQHandler+0x90>
 8002fbe:	4b1b      	ldr	r3, [pc, #108]	; (800302c <Audio_MAL_IRQHandler+0xfc>)
 8002fc0:	4413      	add	r3, r2
 8002fc2:	4a18      	ldr	r2, [pc, #96]	; (8003024 <Audio_MAL_IRQHandler+0xf4>)
 8002fc4:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002fc6:	4b16      	ldr	r3, [pc, #88]	; (8003020 <Audio_MAL_IRQHandler+0xf0>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b15      	ldr	r3, [pc, #84]	; (8003020 <Audio_MAL_IRQHandler+0xf0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fd2:	428b      	cmp	r3, r1
 8002fd4:	bf28      	it	cs
 8002fd6:	460b      	movcs	r3, r1
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	4a11      	ldr	r2, [pc, #68]	; (8003020 <Audio_MAL_IRQHandler+0xf0>)
 8002fdc:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8002fde:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <Audio_MAL_IRQHandler+0xe8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fdcd 	bl	8002b84 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002fea:	e013      	b.n	8003014 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <Audio_MAL_IRQHandler+0xe8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fdc6 	bl	8002b84 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002ff8:	4b07      	ldr	r3, [pc, #28]	; (8003018 <Audio_MAL_IRQHandler+0xe8>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <Audio_MAL_IRQHandler+0xec>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4619      	mov	r1, r3
 8003002:	4610      	mov	r0, r2
 8003004:	f7ff fe2e 	bl	8002c64 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8003008:	4b06      	ldr	r3, [pc, #24]	; (8003024 <Audio_MAL_IRQHandler+0xf4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2100      	movs	r1, #0
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f83c 	bl	800308c <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}
 8003018:	2000001c 	.word	0x2000001c
 800301c:	20000020 	.word	0x20000020
 8003020:	20000014 	.word	0x20000014
 8003024:	20000254 	.word	0x20000254
 8003028:	20000294 	.word	0x20000294
 800302c:	0001fffe 	.word	0x0001fffe

08003030 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003034:	f7ff ff7c 	bl	8002f30 <Audio_MAL_IRQHandler>
}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}

0800303c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8003040:	f7ff ff76 	bl	8002f30 <Audio_MAL_IRQHandler>
}
 8003044:	bf00      	nop
 8003046:	bd80      	pop	{r7, pc}

08003048 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800304c:	2102      	movs	r1, #2
 800304e:	480d      	ldr	r0, [pc, #52]	; (8003084 <SPI3_IRQHandler+0x3c>)
 8003050:	f7ff fef3 	bl	8002e3a <SPI_I2S_GetFlagStatus>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d011      	beq.n	800307e <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <SPI3_IRQHandler+0x40>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d106      	bne.n	8003070 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8003062:	f000 f81e 	bl	80030a2 <EVAL_AUDIO_GetSampleCallBack>
 8003066:	4603      	mov	r3, r0
 8003068:	4619      	mov	r1, r3
 800306a:	2004      	movs	r0, #4
 800306c:	f7ff fd16 	bl	8002a9c <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8003070:	f000 f817 	bl	80030a2 <EVAL_AUDIO_GetSampleCallBack>
 8003074:	4603      	mov	r3, r0
 8003076:	4619      	mov	r1, r3
 8003078:	4802      	ldr	r0, [pc, #8]	; (8003084 <SPI3_IRQHandler+0x3c>)
 800307a:	f7ff fecf 	bl	8002e1c <SPI_I2S_SendData>
  }
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40003c00 	.word	0x40003c00
 8003088:	20000018 	.word	0x20000018

0800308c <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003096:	bf00      	nop
}
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030c4:	4b0c      	ldr	r3, [pc, #48]	; (80030f8 <NVIC_SetPriorityGrouping+0x44>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030d0:	4013      	ands	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80030dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030e6:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <NVIC_SetPriorityGrouping+0x44>)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	60d3      	str	r3, [r2, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <green_light>:
#define red_led		LED5
#define blue_led	LED6



void green_light(){
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0

	STM_EVAL_LEDOn(green_led);
 8003102:	2000      	movs	r0, #0
 8003104:	f7ff fee4 	bl	8002ed0 <STM_EVAL_LEDOn>
	uint32_t start_time = xTaskGetTickCount();
 8003108:	f7fe fcae 	bl	8001a68 <xTaskGetTickCount>
 800310c:	6078      	str	r0, [r7, #4]
	while (xTaskGetTickCount() < start_time+10000){}
 800310e:	bf00      	nop
 8003110:	f7fe fcaa 	bl	8001a68 <xTaskGetTickCount>
 8003114:	4602      	mov	r2, r0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800311c:	3310      	adds	r3, #16
 800311e:	429a      	cmp	r2, r3
 8003120:	d3f6      	bcc.n	8003110 <green_light+0x14>
	STM_EVAL_LEDOff(green_led);
 8003122:	2000      	movs	r0, #0
 8003124:	f7ff feec 	bl	8002f00 <STM_EVAL_LEDOff>

	TaskHandle_t currentTaskHandle = xTaskGetCurrentTaskHandle();
 8003128:	f7fe fffc 	bl	8002124 <xTaskGetCurrentTaskHandle>
 800312c:	6038      	str	r0, [r7, #0]
	dd_delete(currentTaskHandle);
 800312e:	6838      	ldr	r0, [r7, #0]
 8003130:	f000 fa92 	bl	8003658 <dd_delete>
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <gen>:
	STM_EVAL_LEDOff(red_led);
	TaskHandle_t currentTaskHandle = xTaskGetCurrentTaskHandle();
	dd_delete(currentTaskHandle);
}

void gen(){
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
	createTaskParams taskParams = {
 8003142:	4b0a      	ldr	r3, [pc, #40]	; (800316c <gen+0x30>)
 8003144:	1d3c      	adds	r4, r7, #4
 8003146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				.deadline = 1000,
				.task_type = APERIODIC,
				.func = &green_light
		};

	dd_tcreate(taskParams);
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003150:	f000 fa3a 	bl	80035c8 <dd_tcreate>
	dd_return_active_list();
 8003154:	f000 fab8 	bl	80036c8 <dd_return_active_list>
//				.deadline = 20,
//				.task_type = APERIODIC,
//				.func = &red_light
//		};
//	dd_tcreate(taskParams2);
	taskNames *task_names = dd_return_overdue_list();
 8003158:	f000 fafe 	bl	8003758 <dd_return_overdue_list>
 800315c:	6178      	str	r0, [r7, #20]

	vTaskDelete( NULL );
 800315e:	2000      	movs	r0, #0
 8003160:	f7fe f9f8 	bl	8001554 <vTaskDelete>


}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	bd90      	pop	{r4, r7, pc}
 800316c:	08003c94 	.word	0x08003c94

08003170 <main>:

int main(void)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b085      	sub	sp, #20
 8003174:	af02      	add	r7, sp, #8
	xTimerHandle xExampleSoftwareTimer = NULL;
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]
	// Init leds
	STM_EVAL_LEDInit(amber_led);
 800317a:	2001      	movs	r0, #1
 800317c:	f7ff fe7a 	bl	8002e74 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(green_led);
 8003180:	2000      	movs	r0, #0
 8003182:	f7ff fe77 	bl	8002e74 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(red_led);
 8003186:	2002      	movs	r0, #2
 8003188:	f7ff fe74 	bl	8002e74 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(blue_led);
 800318c:	2003      	movs	r0, #3
 800318e:	f7ff fe71 	bl	8002e74 <STM_EVAL_LEDInit>
	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 8003192:	f000 fb5f 	bl	8003854 <prvSetupHardware>

	xExpirationTimer = xTimerCreate("Expiration Timer", /* A text name, purely to help debugging. */
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <main+0xd8>)
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	2200      	movs	r2, #0
 800319e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031a2:	482a      	ldr	r0, [pc, #168]	; (800324c <main+0xdc>)
 80031a4:	f7ff f992 	bl	80024cc <xTimerCreate>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b29      	ldr	r3, [pc, #164]	; (8003250 <main+0xe0>)
 80031ac:	601a      	str	r2, [r3, #0]
		pdFALSE,										/* This is not a periodic timer, so xAutoReload is set to pdTRUE. */
		( void * ) 0,									/* The ID is not used, so can be set to anything. */
		purgeAndRun										/* The callback function that changes the running task. */
	);

	xTimerStart( xExpirationTimer, 0 );
 80031ae:	4b28      	ldr	r3, [pc, #160]	; (8003250 <main+0xe0>)
 80031b0:	681c      	ldr	r4, [r3, #0]
 80031b2:	f7fe fc59 	bl	8001a68 <xTaskGetTickCount>
 80031b6:	4602      	mov	r2, r0
 80031b8:	2300      	movs	r3, #0
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2300      	movs	r3, #0
 80031be:	2101      	movs	r1, #1
 80031c0:	4620      	mov	r0, r4
 80031c2:	f7ff f9d1 	bl	8002568 <xTimerGenericCommand>


	/* Create the queue used by the queue send and queue receive tasks.
	http://www.freertos.org/a00116.html */
	xQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 80031c6:	2200      	movs	r2, #0
 80031c8:	211c      	movs	r1, #28
 80031ca:	2064      	movs	r0, #100	; 0x64
 80031cc:	f7fd fb5a 	bl	8000884 <xQueueGenericCreate>
 80031d0:	4602      	mov	r2, r0
 80031d2:	4b20      	ldr	r3, [pc, #128]	; (8003254 <main+0xe4>)
 80031d4:	601a      	str	r2, [r3, #0]
							sizeof( queueMsg ) );	/* The size of each item the queue holds. */
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xQueue, "MainQueue" );
 80031d6:	4b1f      	ldr	r3, [pc, #124]	; (8003254 <main+0xe4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	491f      	ldr	r1, [pc, #124]	; (8003258 <main+0xe8>)
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe f801 	bl	80011e4 <vQueueAddToRegistry>


	/* Create the semaphore used by the FreeRTOS tick hook function and the
	event semaphore task. */
	vSemaphoreCreateBinary( xEventSemaphore );
 80031e2:	2203      	movs	r2, #3
 80031e4:	2100      	movs	r1, #0
 80031e6:	2001      	movs	r0, #1
 80031e8:	f7fd fb4c 	bl	8000884 <xQueueGenericCreate>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b1b      	ldr	r3, [pc, #108]	; (800325c <main+0xec>)
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	4b1a      	ldr	r3, [pc, #104]	; (800325c <main+0xec>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d006      	beq.n	8003208 <main+0x98>
 80031fa:	4b18      	ldr	r3, [pc, #96]	; (800325c <main+0xec>)
 80031fc:	6818      	ldr	r0, [r3, #0]
 80031fe:	2300      	movs	r3, #0
 8003200:	2200      	movs	r2, #0
 8003202:	2100      	movs	r1, #0
 8003204:	f7fd fb96 	bl	8000934 <xQueueGenericSend>
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xEventSemaphore, "xEventSemaphore" );
 8003208:	4b14      	ldr	r3, [pc, #80]	; (800325c <main+0xec>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4914      	ldr	r1, [pc, #80]	; (8003260 <main+0xf0>)
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd ffe8 	bl	80011e4 <vQueueAddToRegistry>
	/* Start the created timer.  A block time of zero is used as the timer
	command queue cannot possibly be full here (this is the first timer to
	be created, and it is not yet running).
	http://www.freertos.org/FreeRTOS-timers-xTimerStart.html */
//	xTimerStart( xExampleSoftwareTimer, 0 );
	BaseType_t xReturned = xTaskCreate(
 8003214:	2300      	movs	r3, #0
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	2304      	movs	r3, #4
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2300      	movs	r3, #0
 800321e:	2282      	movs	r2, #130	; 0x82
 8003220:	4910      	ldr	r1, [pc, #64]	; (8003264 <main+0xf4>)
 8003222:	4811      	ldr	r0, [pc, #68]	; (8003268 <main+0xf8>)
 8003224:	f7fe f864 	bl	80012f0 <xTaskCreate>
 8003228:	6038      	str	r0, [r7, #0]
							NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */


	/* Start the tasks and timer running. */

	xReturned = xTaskCreate(
 800322a:	2300      	movs	r3, #0
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	2303      	movs	r3, #3
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2300      	movs	r3, #0
 8003234:	2282      	movs	r2, #130	; 0x82
 8003236:	490d      	ldr	r1, [pc, #52]	; (800326c <main+0xfc>)
 8003238:	480d      	ldr	r0, [pc, #52]	; (8003270 <main+0x100>)
 800323a:	f7fe f859 	bl	80012f0 <xTaskCreate>
 800323e:	6038      	str	r0, [r7, #0]
							NULL, 							/* A parameter that can be passed into the task. */
							3,			/* The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority. */
							NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */


	vTaskStartScheduler();
 8003240:	f7fe fb1c 	bl	800187c <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 8003244:	e7fe      	b.n	8003244 <main+0xd4>
 8003246:	bf00      	nop
 8003248:	080033ed 	.word	0x080033ed
 800324c:	08003ca4 	.word	0x08003ca4
 8003250:	200001fc 	.word	0x200001fc
 8003254:	200001f0 	.word	0x200001f0
 8003258:	08003cb8 	.word	0x08003cb8
 800325c:	20000200 	.word	0x20000200
 8003260:	08003cc4 	.word	0x08003cc4
 8003264:	08003cd4 	.word	0x08003cd4
 8003268:	0800354d 	.word	0x0800354d
 800326c:	08003ce4 	.word	0x08003ce4
 8003270:	0800313d 	.word	0x0800313d

08003274 <insert>:
}
/*-----------------------------------------------------------*/


void insert(taskProps task) {
 8003274:	b084      	sub	sp, #16
 8003276:	b5b0      	push	{r4, r5, r7, lr}
 8003278:	b08a      	sub	sp, #40	; 0x28
 800327a:	af00      	add	r7, sp, #0
 800327c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003280:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Create cell for task
	taskList task_cell = {
		.handle = task.handle,
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	taskList task_cell = {
 8003286:	603b      	str	r3, [r7, #0]
		.name = task.name,
 8003288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	taskList task_cell = {
 800328a:	607b      	str	r3, [r7, #4]
		.deadline = task.deadline,
 800328c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	taskList task_cell = {
 800328e:	60bb      	str	r3, [r7, #8]
		.task_type = task.task_type,
 8003290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	taskList task_cell = {
 8003292:	60fb      	str	r3, [r7, #12]
		.creation_time = task.creation_time,
 8003294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	taskList task_cell = {
 8003296:	613b      	str	r3, [r7, #16]
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	2300      	movs	r3, #0
 800329e:	61bb      	str	r3, [r7, #24]
		.next_cell = NULL,
		.previous_cell = NULL
	};

	// Create space in memory for task
	taskList *pTask = (taskList*)pvPortMalloc(sizeof(taskList));
 80032a0:	201c      	movs	r0, #28
 80032a2:	f7fd fa5d 	bl	8000760 <pvPortMalloc>
 80032a6:	6238      	str	r0, [r7, #32]
	*pTask = task_cell;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	461d      	mov	r5, r3
 80032ac:	463c      	mov	r4, r7
 80032ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80032b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	// If there are no active tasks queued
	if (pActiveTasks == NULL) {
 80032ba:	4b2d      	ldr	r3, [pc, #180]	; (8003370 <insert+0xfc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <insert+0x56>
		pActiveTasks = pTask;
 80032c2:	4a2b      	ldr	r2, [pc, #172]	; (8003370 <insert+0xfc>)
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	6013      	str	r3, [r2, #0]
			currTask->previous_cell = pTask;
			pActiveTasks = pTask;
		}
	}

	return;
 80032c8:	e04b      	b.n	8003362 <insert+0xee>
		taskList* currTask = pActiveTasks;
 80032ca:	4b29      	ldr	r3, [pc, #164]	; (8003370 <insert+0xfc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
		while (currTask->next_cell != NULL) {
 80032d0:	e016      	b.n	8003300 <insert+0x8c>
			taskState = eTaskGetState(currTask->handle);
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe f9ca 	bl	8001670 <eTaskGetState>
 80032dc:	4603      	mov	r3, r0
 80032de:	77fb      	strb	r3, [r7, #31]
			if (taskState == eDeleted) {
 80032e0:	7ffb      	ldrb	r3, [r7, #31]
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d009      	beq.n	80032fa <insert+0x86>
			} else if (task.creation_time + task.deadline < currTask->creation_time + currTask->deadline) {
 80032e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ea:	441a      	add	r2, r3
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	6919      	ldr	r1, [r3, #16]
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	440b      	add	r3, r1
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d307      	bcc.n	800330a <insert+0x96>
			currTask = currTask->next_cell;
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
		while (currTask->next_cell != NULL) {
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e4      	bne.n	80032d2 <insert+0x5e>
 8003308:	e000      	b.n	800330c <insert+0x98>
				break;
 800330a:	bf00      	nop
		if (task.creation_time + task.deadline > currTask->creation_time + currTask->deadline) {
 800330c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800330e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003310:	441a      	add	r2, r3
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	6919      	ldr	r1, [r3, #16]
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	440b      	add	r3, r1
 800331c:	429a      	cmp	r2, r3
 800331e:	d90a      	bls.n	8003336 <insert+0xc2>
			pTask->next_cell = currTask->next_cell;
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	6a3b      	ldr	r3, [r7, #32]
 8003326:	615a      	str	r2, [r3, #20]
			pTask->previous_cell = currTask;
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332c:	619a      	str	r2, [r3, #24]
			currTask->next_cell = pTask;
 800332e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003330:	6a3a      	ldr	r2, [r7, #32]
 8003332:	615a      	str	r2, [r3, #20]
	return;
 8003334:	e015      	b.n	8003362 <insert+0xee>
			if (currTask->previous_cell != NULL) {
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <insert+0xda>
				pTask->previous_cell = currTask->previous_cell;
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	619a      	str	r2, [r3, #24]
				currTask->previous_cell->next_cell = pTask;
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	6a3a      	ldr	r2, [r7, #32]
 800334c:	615a      	str	r2, [r3, #20]
			pTask->next_cell = currTask;
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003352:	615a      	str	r2, [r3, #20]
			currTask->previous_cell = pTask;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	6a3a      	ldr	r2, [r7, #32]
 8003358:	619a      	str	r2, [r3, #24]
			pActiveTasks = pTask;
 800335a:	4a05      	ldr	r2, [pc, #20]	; (8003370 <insert+0xfc>)
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	6013      	str	r3, [r2, #0]
	return;
 8003360:	bf00      	nop
}
 8003362:	3728      	adds	r7, #40	; 0x28
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800336a:	b004      	add	sp, #16
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	200001f4 	.word	0x200001f4

08003374 <delete>:

void delete(TaskHandle_t handle) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
	if (pActiveTasks == NULL) {
 800337c:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <delete+0x74>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d02c      	beq.n	80033de <delete+0x6a>
		// Something went wrong
	} else {
		taskList* currTask = pActiveTasks;
 8003384:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <delete+0x74>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
		// Search for task using handle
		while (currTask != NULL) {
 800338a:	e022      	b.n	80033d2 <delete+0x5e>
			if (currTask->handle == handle) {
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	429a      	cmp	r2, r3
 8003394:	d11a      	bne.n	80033cc <delete+0x58>
				// Delete the task
				vTaskDelete(handle);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe f8dc 	bl	8001554 <vTaskDelete>

				// If it is the first/only task
				if (currTask->previous_cell == NULL) {
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d104      	bne.n	80033ae <delete+0x3a>
					// Move active tasks pointer to next one
					pActiveTasks = currTask->next_cell;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	4a0f      	ldr	r2, [pc, #60]	; (80033e8 <delete+0x74>)
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	e004      	b.n	80033b8 <delete+0x44>
				// If there is a previous task
				} else {
					currTask->previous_cell->next_cell = currTask->next_cell;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	6952      	ldr	r2, [r2, #20]
 80033b6:	615a      	str	r2, [r3, #20]
				}

				// If there is a next task
				if (currTask->next_cell != NULL) {
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00c      	beq.n	80033da <delete+0x66>
					currTask->next_cell->previous_cell = currTask->previous_cell;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	6992      	ldr	r2, [r2, #24]
 80033c8:	619a      	str	r2, [r3, #24]
				}

				break;
 80033ca:	e006      	b.n	80033da <delete+0x66>
			}

			currTask = currTask->next_cell;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	60fb      	str	r3, [r7, #12]
		while (currTask != NULL) {
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1d9      	bne.n	800338c <delete+0x18>
		}
	}
	return;
 80033d8:	e000      	b.n	80033dc <delete+0x68>
				break;
 80033da:	bf00      	nop
	return;
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
}
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	200001f4 	.word	0x200001f4

080033ec <purgeAndRun>:

void purgeAndRun() {
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b090      	sub	sp, #64	; 0x40
 80033f0:	af02      	add	r7, sp, #8
	taskList* currTask = pActiveTasks;
 80033f2:	4b53      	ldr	r3, [pc, #332]	; (8003540 <purgeAndRun+0x154>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
	TickType_t time;

	eTaskState taskState = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	while (currTask != NULL) {
 80033fe:	e05b      	b.n	80034b8 <purgeAndRun+0xcc>
		// If it has run
		taskState = eTaskGetState(currTask->handle);
 8003400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7fe f933 	bl	8001670 <eTaskGetState>
 800340a:	4603      	mov	r3, r0
 800340c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (taskState == eDeleted) {
 8003410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003414:	2b04      	cmp	r3, #4
 8003416:	d106      	bne.n	8003426 <purgeAndRun+0x3a>
			vPortFree(currTask);
 8003418:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800341a:	f7fd f9b8 	bl	800078e <vPortFree>

		// If it is overdue
		time = xTaskGetTickCount();
 800341e:	f7fe fb23 	bl	8001a68 <xTaskGetTickCount>
 8003422:	6238      	str	r0, [r7, #32]
 8003424:	e045      	b.n	80034b2 <purgeAndRun+0xc6>
		} else if (currTask->creation_time + currTask->deadline <= xTaskGetTickCount()) {
 8003426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	18d4      	adds	r4, r2, r3
 8003430:	f7fe fb1a 	bl	8001a68 <xTaskGetTickCount>
 8003434:	4603      	mov	r3, r0
 8003436:	429c      	cmp	r4, r3
 8003438:	d834      	bhi.n	80034a4 <purgeAndRun+0xb8>
			overdueTasks *overdueTask = pvPortMalloc(sizeof(overdueTasks));
 800343a:	201c      	movs	r0, #28
 800343c:	f7fd f990 	bl	8000760 <pvPortMalloc>
 8003440:	61f8      	str	r0, [r7, #28]
			overdueTasks odtask = {
					.handle = currTask->handle,
 8003442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003444:	681b      	ldr	r3, [r3, #0]
			overdueTasks odtask = {
 8003446:	603b      	str	r3, [r7, #0]
					.name = currTask->name,
 8003448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344a:	685b      	ldr	r3, [r3, #4]
			overdueTasks odtask = {
 800344c:	607b      	str	r3, [r7, #4]
					.deadline = currTask->deadline,
 800344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003450:	689b      	ldr	r3, [r3, #8]
			overdueTasks odtask = {
 8003452:	60bb      	str	r3, [r7, #8]
					.task_type = currTask->task_type,
 8003454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003456:	68db      	ldr	r3, [r3, #12]
			overdueTasks odtask = {
 8003458:	60fb      	str	r3, [r7, #12]
					.creation_time = currTask->creation_time,
 800345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345c:	691b      	ldr	r3, [r3, #16]
			overdueTasks odtask = {
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	4b38      	ldr	r3, [pc, #224]	; (8003544 <purgeAndRun+0x158>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
					.next_cell = pOverdueTasks,
					.previous_cell = NULL
			};
			*overdueTask = odtask;
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	461d      	mov	r5, r3
 800346e:	463c      	mov	r4, r7
 8003470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003474:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003478:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			if (pOverdueTasks != NULL) {
 800347c:	4b31      	ldr	r3, [pc, #196]	; (8003544 <purgeAndRun+0x158>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d003      	beq.n	800348c <purgeAndRun+0xa0>
				pOverdueTasks->previous_cell = overdueTask;
 8003484:	4b2f      	ldr	r3, [pc, #188]	; (8003544 <purgeAndRun+0x158>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	619a      	str	r2, [r3, #24]
			};
			pOverdueTasks = overdueTask;
 800348c:	4a2d      	ldr	r2, [pc, #180]	; (8003544 <purgeAndRun+0x158>)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	6013      	str	r3, [r2, #0]

			vTaskDelete(currTask->handle);
 8003492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f7fe f85c 	bl	8001554 <vTaskDelete>
			vPortFree(currTask);
 800349c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800349e:	f7fd f976 	bl	800078e <vPortFree>
 80034a2:	e006      	b.n	80034b2 <purgeAndRun+0xc6>
		} else {
			// Not overdue, not deleted. This is a valid task
			currTask->previous_cell = NULL;
 80034a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034a6:	2200      	movs	r2, #0
 80034a8:	619a      	str	r2, [r3, #24]
			pActiveTasks = currTask;
 80034aa:	4a25      	ldr	r2, [pc, #148]	; (8003540 <purgeAndRun+0x154>)
 80034ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ae:	6013      	str	r3, [r2, #0]
			break;
 80034b0:	e005      	b.n	80034be <purgeAndRun+0xd2>
		}
		currTask = currTask->next_cell;
 80034b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	637b      	str	r3, [r7, #52]	; 0x34
	while (currTask != NULL) {
 80034b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1a0      	bne.n	8003400 <purgeAndRun+0x14>
	}
	taskList* countTask = pActiveTasks;
 80034be:	4b20      	ldr	r3, [pc, #128]	; (8003540 <purgeAndRun+0x154>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30
	int num_tasks = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (countTask != NULL){
 80034c8:	e005      	b.n	80034d6 <purgeAndRun+0xea>
		countTask = countTask->next_cell;
 80034ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	633b      	str	r3, [r7, #48]	; 0x30
		num_tasks += 1;
 80034d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d2:	3301      	adds	r3, #1
 80034d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (countTask != NULL){
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f6      	bne.n	80034ca <purgeAndRun+0xde>
	}

	for (int i = 0; i < num_tasks; i++) {
 80034dc:	2300      	movs	r3, #0
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28
 80034e0:	e00e      	b.n	8003500 <purgeAndRun+0x114>
		vTaskPrioritySet(currTask->handle, num_tasks-i+1);
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	4619      	mov	r1, r3
 80034f0:	f7fe f916 	bl	8001720 <vTaskPrioritySet>
		currTask = currTask->next_cell;
 80034f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < num_tasks; i++) {
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	3301      	adds	r3, #1
 80034fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003504:	429a      	cmp	r2, r3
 8003506:	dbec      	blt.n	80034e2 <purgeAndRun+0xf6>
	}

	if (pActiveTasks != NULL) {
 8003508:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <purgeAndRun+0x154>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <purgeAndRun+0x14c>
		xTimerChangePeriod(
 8003510:	4b0d      	ldr	r3, [pc, #52]	; (8003548 <purgeAndRun+0x15c>)
 8003512:	681d      	ldr	r5, [r3, #0]
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <purgeAndRun+0x154>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <purgeAndRun+0x154>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	18d4      	adds	r4, r2, r3
 8003522:	f7fe faa1 	bl	8001a68 <xTaskGetTickCount>
 8003526:	4603      	mov	r3, r0
 8003528:	1ae2      	subs	r2, r4, r3
 800352a:	2300      	movs	r3, #0
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	2300      	movs	r3, #0
 8003530:	2104      	movs	r1, #4
 8003532:	4628      	mov	r0, r5
 8003534:	f7ff f818 	bl	8002568 <xTimerGenericCommand>
				xExpirationTimer,
				pActiveTasks->deadline + pActiveTasks->creation_time - xTaskGetTickCount(),
				0);
	}
}
 8003538:	bf00      	nop
 800353a:	3738      	adds	r7, #56	; 0x38
 800353c:	46bd      	mov	sp, r7
 800353e:	bdb0      	pop	{r4, r5, r7, pc}
 8003540:	200001f4 	.word	0x200001f4
 8003544:	200001f8 	.word	0x200001f8
 8003548:	200001fc 	.word	0x200001fc

0800354c <dd_scheduler>:

void dd_scheduler(void *pvParameters) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b08c      	sub	sp, #48	; 0x30
 8003550:	af02      	add	r7, sp, #8
 8003552:	6078      	str	r0, [r7, #4]
	queueMsg msg;
	while (1) {
		xQueueReceive( xQueue, &msg, portMAX_DELAY );
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <dd_scheduler+0x74>)
 8003556:	6818      	ldr	r0, [r3, #0]
 8003558:	f107 010c 	add.w	r1, r7, #12
 800355c:	2300      	movs	r3, #0
 800355e:	f04f 32ff 	mov.w	r2, #4294967295
 8003562:	f7fd fbff 	bl	8000d64 <xQueueGenericReceive>

		switch(msg.msg_type) {
 8003566:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800356a:	2b03      	cmp	r3, #3
 800356c:	d825      	bhi.n	80035ba <dd_scheduler+0x6e>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <dd_scheduler+0x28>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	08003585 	.word	0x08003585
 8003578:	080035a3 	.word	0x080035a3
 800357c:	080035bb 	.word	0x080035bb
 8003580:	080035bb 	.word	0x080035bb
		case CREATE:
			insert(msg.task_props);
 8003584:	6a3b      	ldr	r3, [r7, #32]
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	f107 0310 	add.w	r3, r7, #16
 800358c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800358e:	f7ff fe71 	bl	8003274 <insert>
			xQueueSend(msg.cb_queue, "y", portMAX_DELAY);
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	2300      	movs	r3, #0
 8003596:	f04f 32ff 	mov.w	r2, #4294967295
 800359a:	490a      	ldr	r1, [pc, #40]	; (80035c4 <dd_scheduler+0x78>)
 800359c:	f7fd f9ca 	bl	8000934 <xQueueGenericSend>
			break;
 80035a0:	e00b      	b.n	80035ba <dd_scheduler+0x6e>
		case DELETE:
			delete(msg.task_props.handle);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fee5 	bl	8003374 <delete>
			xQueueSend(msg.cb_queue, "y", portMAX_DELAY);
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	2300      	movs	r3, #0
 80035ae:	f04f 32ff 	mov.w	r2, #4294967295
 80035b2:	4904      	ldr	r1, [pc, #16]	; (80035c4 <dd_scheduler+0x78>)
 80035b4:	f7fd f9be 	bl	8000934 <xQueueGenericSend>
			break;
 80035b8:	bf00      	nop

			break;
		case OVERDUE:
			break;
		}
		purgeAndRun();
 80035ba:	f7ff ff17 	bl	80033ec <purgeAndRun>
		xQueueReceive( xQueue, &msg, portMAX_DELAY );
 80035be:	e7c9      	b.n	8003554 <dd_scheduler+0x8>
 80035c0:	200001f0 	.word	0x200001f0
 80035c4:	08003ce8 	.word	0x08003ce8

080035c8 <dd_tcreate>:
	}
}


TaskHandle_t dd_tcreate (createTaskParams create_task_params){
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b093      	sub	sp, #76	; 0x4c
 80035cc:	af02      	add	r7, sp, #8
 80035ce:	463c      	mov	r4, r7
 80035d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TaskHandle_t xHandle = NULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	637b      	str	r3, [r7, #52]	; 0x34
	BaseType_t xReturned = xTaskCreate(
							create_task_params.func,				/* The function that implements the task. */
 80035d8:	68f8      	ldr	r0, [r7, #12]
							create_task_params.name, 				/* Text name for the task, just to help debugging. */
 80035da:	6839      	ldr	r1, [r7, #0]
	BaseType_t xReturned = xTaskCreate(
 80035dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	2282      	movs	r2, #130	; 0x82
 80035ea:	f7fd fe81 	bl	80012f0 <xTaskCreate>
 80035ee:	63f8      	str	r0, [r7, #60]	; 0x3c
							NULL, 							/* A parameter that can be passed into the task. */
							mainMIN_TASK_PRIORITY,			/* The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority. */
							&xHandle );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */

	// Create callback queue for backwards communication
	xQueueHandle cb_queue = xQueueCreate(1, sizeof(char));
 80035f0:	2200      	movs	r2, #0
 80035f2:	2101      	movs	r1, #1
 80035f4:	2001      	movs	r0, #1
 80035f6:	f7fd f945 	bl	8000884 <xQueueGenericCreate>
 80035fa:	63b8      	str	r0, [r7, #56]	; 0x38

	// Build message for global queue
	queueMsg msg = {
 80035fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003602:	61fb      	str	r3, [r7, #28]
			.cb_queue = cb_queue,
			.task_props = {
					.handle = xHandle,
					.name = create_task_params.name,
 8003604:	683b      	ldr	r3, [r7, #0]
	queueMsg msg = {
 8003606:	623b      	str	r3, [r7, #32]
					.deadline = create_task_params.deadline,
 8003608:	687b      	ldr	r3, [r7, #4]
	queueMsg msg = {
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
					.task_type = create_task_params.task_type,
 800360c:	7a3b      	ldrb	r3, [r7, #8]
	queueMsg msg = {
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
					.creation_time = xTaskGetTickCount()
 8003610:	f7fe fa2a 	bl	8001a68 <xTaskGetTickCount>
 8003614:	4603      	mov	r3, r0
	queueMsg msg = {
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003618:	2300      	movs	r3, #0
 800361a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			},
			.msg_type = CREATE
	};

	// Put message on global queue
	xQueueSend(xQueue, &msg, portMAX_DELAY);
 800361e:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <dd_tcreate+0x8c>)
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	f107 0118 	add.w	r1, r7, #24
 8003626:	2300      	movs	r3, #0
 8003628:	f04f 32ff 	mov.w	r2, #4294967295
 800362c:	f7fd f982 	bl	8000934 <xQueueGenericSend>

	// Wait on receiver to call callback queue
	char res = 0;
 8003630:	2300      	movs	r3, #0
 8003632:	75fb      	strb	r3, [r7, #23]
	xQueueReceive(cb_queue, &res, portMAX_DELAY);
 8003634:	f107 0117 	add.w	r1, r7, #23
 8003638:	2300      	movs	r3, #0
 800363a:	f04f 32ff 	mov.w	r2, #4294967295
 800363e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003640:	f7fd fb90 	bl	8000d64 <xQueueGenericReceive>

	// Delete callback queue
	vQueueDelete(cb_queue);
 8003644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003646:	f7fd fc9f 	bl	8000f88 <vQueueDelete>


	return xHandle;
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800364c:	4618      	mov	r0, r3
 800364e:	3744      	adds	r7, #68	; 0x44
 8003650:	46bd      	mov	sp, r7
 8003652:	bd90      	pop	{r4, r7, pc}
 8003654:	200001f0 	.word	0x200001f0

08003658 <dd_delete>:

uint32_t dd_delete(TaskHandle_t t_handle){
 8003658:	b580      	push	{r7, lr}
 800365a:	b08c      	sub	sp, #48	; 0x30
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

	// Create callback queue for backwards communication
	xQueueHandle cb_queue = xQueueCreate(1, sizeof(char));
 8003660:	2200      	movs	r2, #0
 8003662:	2101      	movs	r1, #1
 8003664:	2001      	movs	r0, #1
 8003666:	f7fd f90d 	bl	8000884 <xQueueGenericCreate>
 800366a:	62f8      	str	r0, [r7, #44]	; 0x2c

	// Build message for global queue
	queueMsg msg = {
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	617b      	str	r3, [r7, #20]
 8003674:	2300      	movs	r3, #0
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	2300      	movs	r3, #0
 800367a:	61fb      	str	r3, [r7, #28]
 800367c:	2300      	movs	r3, #0
 800367e:	623b      	str	r3, [r7, #32]
 8003680:	2300      	movs	r3, #0
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
 8003684:	2301      	movs	r3, #1
 8003686:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			},
			.msg_type = DELETE
	};

	// Put message on global queue
	xQueueSend(xQueue, &msg, 0);
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <dd_delete+0x6c>)
 800368c:	6818      	ldr	r0, [r3, #0]
 800368e:	f107 0110 	add.w	r1, r7, #16
 8003692:	2300      	movs	r3, #0
 8003694:	2200      	movs	r2, #0
 8003696:	f7fd f94d 	bl	8000934 <xQueueGenericSend>

	// Wait on receiver to call callback queue
	char res = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]
	xQueueReceive(cb_queue, &res, portMAX_DELAY);
 800369e:	f107 010f 	add.w	r1, r7, #15
 80036a2:	2300      	movs	r3, #0
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036aa:	f7fd fb5b 	bl	8000d64 <xQueueGenericReceive>
	// Delete callback queue
	vQueueDelete(cb_queue);
 80036ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036b0:	f7fd fc6a 	bl	8000f88 <vQueueDelete>

	// Delete task
	vTaskDelete(t_handle);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fd ff4d 	bl	8001554 <vTaskDelete>

	return 0;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3730      	adds	r7, #48	; 0x30
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	200001f0 	.word	0x200001f0

080036c8 <dd_return_active_list>:

taskNames *dd_return_active_list(){
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08a      	sub	sp, #40	; 0x28
 80036cc:	af00      	add	r7, sp, #0
	if (pActiveTasks == NULL) {
 80036ce:	4b21      	ldr	r3, [pc, #132]	; (8003754 <dd_return_active_list+0x8c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <dd_return_active_list+0x12>
		return NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e037      	b.n	800374a <dd_return_active_list+0x82>
	}

	taskNames *head_task_names;
	taskNames *prev_task_name;
	taskList *curr_task = pActiveTasks;
 80036da:	4b1e      	ldr	r3, [pc, #120]	; (8003754 <dd_return_active_list+0x8c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	623b      	str	r3, [r7, #32]

	taskNames temp_task_name = {
		.name = curr_task->name,
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	685b      	ldr	r3, [r3, #4]
	taskNames temp_task_name = {
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
		.next_cell = NULL
	};

	taskNames *task_name = (taskNames*)pvPortMalloc(sizeof(taskNames));
 80036ea:	2008      	movs	r0, #8
 80036ec:	f7fd f838 	bl	8000760 <pvPortMalloc>
 80036f0:	61f8      	str	r0, [r7, #28]
	*task_name = temp_task_name;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	461a      	mov	r2, r3
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80036fe:	e882 0003 	stmia.w	r2, {r0, r1}
	head_task_names = task_name;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	61bb      	str	r3, [r7, #24]
	prev_task_name = task_name;
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	627b      	str	r3, [r7, #36]	; 0x24
	curr_task = curr_task->next_cell;
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	623b      	str	r3, [r7, #32]

	while (curr_task != NULL) {
 8003710:	e017      	b.n	8003742 <dd_return_active_list+0x7a>
		taskNames temp_task_name = {
			.name = curr_task->name,
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	685b      	ldr	r3, [r3, #4]
		taskNames temp_task_name = {
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
			.next_cell = NULL
		};

		taskNames *task_name = (taskNames*)pvPortMalloc(sizeof(taskNames));
 800371c:	2008      	movs	r0, #8
 800371e:	f7fd f81f 	bl	8000760 <pvPortMalloc>
 8003722:	6178      	str	r0, [r7, #20]
		*task_name = temp_task_name;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	461a      	mov	r2, r3
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800372e:	e882 0003 	stmia.w	r2, {r0, r1}

		prev_task_name->next_cell = task_name;
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	605a      	str	r2, [r3, #4]
		prev_task_name = task_name;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
		curr_task = curr_task->next_cell;
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	623b      	str	r3, [r7, #32]
	while (curr_task != NULL) {
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e4      	bne.n	8003712 <dd_return_active_list+0x4a>
	}

	return head_task_names;
 8003748:	69bb      	ldr	r3, [r7, #24]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3728      	adds	r7, #40	; 0x28
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	200001f4 	.word	0x200001f4

08003758 <dd_return_overdue_list>:

taskNames *dd_return_overdue_list(){
 8003758:	b580      	push	{r7, lr}
 800375a:	b08a      	sub	sp, #40	; 0x28
 800375c:	af00      	add	r7, sp, #0
	if (pOverdueTasks == NULL) {
 800375e:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <dd_return_overdue_list+0x90>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <dd_return_overdue_list+0x12>
		return NULL;
 8003766:	2300      	movs	r3, #0
 8003768:	e03a      	b.n	80037e0 <dd_return_overdue_list+0x88>
	}

	taskNames *head_task_names;
	taskNames *prev_task_name;
	taskList *curr_task = pOverdueTasks;
 800376a:	4b1f      	ldr	r3, [pc, #124]	; (80037e8 <dd_return_overdue_list+0x90>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	623b      	str	r3, [r7, #32]

	taskNames temp_task_name = {
		.name = curr_task->name,
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	685b      	ldr	r3, [r3, #4]
	taskNames temp_task_name = {
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	2300      	movs	r3, #0
 8003778:	613b      	str	r3, [r7, #16]
		.next_cell = NULL
	};

	taskNames *task_name = (taskNames*)pvPortMalloc(sizeof(taskNames));
 800377a:	2008      	movs	r0, #8
 800377c:	f7fc fff0 	bl	8000760 <pvPortMalloc>
 8003780:	61f8      	str	r0, [r7, #28]
	*task_name = temp_task_name;
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	461a      	mov	r2, r3
 8003786:	f107 030c 	add.w	r3, r7, #12
 800378a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800378e:	e882 0003 	stmia.w	r2, {r0, r1}
	head_task_names = task_name;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	61bb      	str	r3, [r7, #24]
	prev_task_name = task_name;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	627b      	str	r3, [r7, #36]	; 0x24
	curr_task = curr_task->next_cell;
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	623b      	str	r3, [r7, #32]

	while (curr_task != NULL) {
 80037a0:	e017      	b.n	80037d2 <dd_return_overdue_list+0x7a>
		taskNames temp_task_name = {
			.name = curr_task->name,
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	685b      	ldr	r3, [r3, #4]
		taskNames temp_task_name = {
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	2300      	movs	r3, #0
 80037aa:	60bb      	str	r3, [r7, #8]
			.next_cell = NULL
		};

		taskNames *task_name = (taskNames*)pvPortMalloc(sizeof(taskNames));
 80037ac:	2008      	movs	r0, #8
 80037ae:	f7fc ffd7 	bl	8000760 <pvPortMalloc>
 80037b2:	6178      	str	r0, [r7, #20]
		*task_name = temp_task_name;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	461a      	mov	r2, r3
 80037b8:	1d3b      	adds	r3, r7, #4
 80037ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80037be:	e882 0003 	stmia.w	r2, {r0, r1}

		prev_task_name->next_cell = task_name;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	605a      	str	r2, [r3, #4]
		prev_task_name = task_name;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
		curr_task = curr_task->next_cell;
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	623b      	str	r3, [r7, #32]
	while (curr_task != NULL) {
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e4      	bne.n	80037a2 <dd_return_overdue_list+0x4a>
	}

	pOverdueTasks = NULL;
 80037d8:	4b03      	ldr	r3, [pc, #12]	; (80037e8 <dd_return_overdue_list+0x90>)
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]

	return head_task_names;
 80037de:	69bb      	ldr	r3, [r7, #24]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3728      	adds	r7, #40	; 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	200001f8 	.word	0x200001f8

080037ec <vApplicationTickHook>:

void vApplicationTickHook( void )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80037f2:	2300      	movs	r3, #0
 80037f4:	607b      	str	r3, [r7, #4]

	/* The RTOS tick hook function is enabled by setting configUSE_TICK_HOOK to
	1 in FreeRTOSConfig.h.

	"Give" the semaphore on every 500th tick interrupt. */
	ulCount++;
 80037f6:	4b0c      	ldr	r3, [pc, #48]	; (8003828 <vApplicationTickHook+0x3c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	3301      	adds	r3, #1
 80037fc:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <vApplicationTickHook+0x3c>)
 80037fe:	6013      	str	r3, [r2, #0]
	if( ulCount >= 500UL )
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <vApplicationTickHook+0x3c>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003808:	d309      	bcc.n	800381e <vApplicationTickHook+0x32>

		xHigherPriorityTaskWoken was initialised to pdFALSE, and will be set to
		pdTRUE by xSemaphoreGiveFromISR() if giving the semaphore unblocked a
		task that has equal or higher priority than the interrupted task.
		http://www.freertos.org/a00124.html */
		xSemaphoreGiveFromISR( xEventSemaphore, &xHigherPriorityTaskWoken );
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <vApplicationTickHook+0x40>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	1d3a      	adds	r2, r7, #4
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fa1c 	bl	8000c50 <xQueueGiveFromISR>
		ulCount = 0UL;
 8003818:	4b03      	ldr	r3, [pc, #12]	; (8003828 <vApplicationTickHook+0x3c>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
	are using.  http://www.freertos.org/a00090.html

	In this case, the function is running in the context of the tick interrupt,
	which will automatically check for the higher priority task to run anyway,
	so no further action is required. */
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000204 	.word	0x20000204
 800382c:	20000200 	.word	0x20000200

08003830 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8003834:	e7fe      	b.n	8003834 <vApplicationMallocFailedHook+0x4>

08003836 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003840:	e7fe      	b.n	8003840 <vApplicationStackOverflowHook+0xa>

08003842 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
//		/* By now, the kernel has allocated everything it is going to, so
//		if there is a lot of heap remaining unallocated then
//		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
//		reduced accordingly. */
//	}
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8003858:	2000      	movs	r0, #0
 800385a:	f7ff fc2b 	bl	80030b4 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003864:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003866:	e003      	b.n	8003870 <LoopCopyDataInit>

08003868 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800386a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800386c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800386e:	3104      	adds	r1, #4

08003870 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003870:	480a      	ldr	r0, [pc, #40]	; (800389c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003874:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003876:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003878:	d3f6      	bcc.n	8003868 <CopyDataInit>
  ldr  r2, =_sbss
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800387c:	e002      	b.n	8003884 <LoopFillZerobss>

0800387e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800387e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003880:	f842 3b04 	str.w	r3, [r2], #4

08003884 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003886:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003888:	d3f9      	bcc.n	800387e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800388a:	f000 f82b 	bl	80038e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800388e:	f000 f8db 	bl	8003a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003892:	f7ff fc6d 	bl	8003170 <main>
  bx  lr    
 8003896:	4770      	bx	lr
  ldr  r3, =_sidata
 8003898:	08003d24 	.word	0x08003d24
  ldr  r0, =_sdata
 800389c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80038a0:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 80038a4:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 80038a8:	200002d4 	.word	0x200002d4

080038ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038ac:	e7fe      	b.n	80038ac <ADC_IRQHandler>

080038ae <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80038ae:	b480      	push	{r7}
 80038b0:	af00      	add	r7, sp, #0
}
 80038b2:	bf00      	nop
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80038c0:	e7fe      	b.n	80038c0 <HardFault_Handler+0x4>

080038c2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80038c2:	b480      	push	{r7}
 80038c4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80038c6:	e7fe      	b.n	80038c6 <MemManage_Handler+0x4>

080038c8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80038cc:	e7fe      	b.n	80038cc <BusFault_Handler+0x4>

080038ce <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80038d2:	e7fe      	b.n	80038d2 <UsageFault_Handler+0x4>

080038d4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038e8:	4a16      	ldr	r2, [pc, #88]	; (8003944 <SystemInit+0x60>)
 80038ea:	4b16      	ldr	r3, [pc, #88]	; (8003944 <SystemInit+0x60>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80038f8:	4a13      	ldr	r2, [pc, #76]	; (8003948 <SystemInit+0x64>)
 80038fa:	4b13      	ldr	r3, [pc, #76]	; (8003948 <SystemInit+0x64>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003904:	4b10      	ldr	r3, [pc, #64]	; (8003948 <SystemInit+0x64>)
 8003906:	2200      	movs	r2, #0
 8003908:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800390a:	4a0f      	ldr	r2, [pc, #60]	; (8003948 <SystemInit+0x64>)
 800390c:	4b0e      	ldr	r3, [pc, #56]	; (8003948 <SystemInit+0x64>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003918:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <SystemInit+0x64>)
 800391c:	4a0b      	ldr	r2, [pc, #44]	; (800394c <SystemInit+0x68>)
 800391e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003920:	4a09      	ldr	r2, [pc, #36]	; (8003948 <SystemInit+0x64>)
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <SystemInit+0x64>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800392a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <SystemInit+0x64>)
 800392e:	2200      	movs	r2, #0
 8003930:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003932:	f000 f80d 	bl	8003950 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003936:	4b03      	ldr	r3, [pc, #12]	; (8003944 <SystemInit+0x60>)
 8003938:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800393c:	609a      	str	r2, [r3, #8]
#endif
}
 800393e:	bf00      	nop
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	e000ed00 	.word	0xe000ed00
 8003948:	40023800 	.word	0x40023800
 800394c:	24003010 	.word	0x24003010

08003950 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003956:	2300      	movs	r3, #0
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	2300      	movs	r3, #0
 800395c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800395e:	4a36      	ldr	r2, [pc, #216]	; (8003a38 <SetSysClock+0xe8>)
 8003960:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <SetSysClock+0xe8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003968:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800396a:	4b33      	ldr	r3, [pc, #204]	; (8003a38 <SetSysClock+0xe8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3301      	adds	r3, #1
 8003978:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d103      	bne.n	8003988 <SetSysClock+0x38>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003986:	d1f0      	bne.n	800396a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <SetSysClock+0xe8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003994:	2301      	movs	r3, #1
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	e001      	b.n	800399e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800399a:	2300      	movs	r3, #0
 800399c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d142      	bne.n	8003a2a <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80039a4:	4a24      	ldr	r2, [pc, #144]	; (8003a38 <SetSysClock+0xe8>)
 80039a6:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <SetSysClock+0xe8>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ae:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80039b0:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <SetSysClock+0xec>)
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <SetSysClock+0xec>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039ba:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80039bc:	4a1e      	ldr	r2, [pc, #120]	; (8003a38 <SetSysClock+0xe8>)
 80039be:	4b1e      	ldr	r3, [pc, #120]	; (8003a38 <SetSysClock+0xe8>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80039c4:	4a1c      	ldr	r2, [pc, #112]	; (8003a38 <SetSysClock+0xe8>)
 80039c6:	4b1c      	ldr	r3, [pc, #112]	; (8003a38 <SetSysClock+0xe8>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ce:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80039d0:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <SetSysClock+0xe8>)
 80039d2:	4b19      	ldr	r3, [pc, #100]	; (8003a38 <SetSysClock+0xe8>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80039da:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80039dc:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <SetSysClock+0xe8>)
 80039de:	4a18      	ldr	r2, [pc, #96]	; (8003a40 <SetSysClock+0xf0>)
 80039e0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80039e2:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <SetSysClock+0xe8>)
 80039e4:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <SetSysClock+0xe8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ec:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80039ee:	bf00      	nop
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <SetSysClock+0xe8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f9      	beq.n	80039f0 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <SetSysClock+0xf4>)
 80039fe:	f240 6205 	movw	r2, #1541	; 0x605
 8003a02:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003a04:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <SetSysClock+0xe8>)
 8003a06:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <SetSysClock+0xe8>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003a10:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <SetSysClock+0xe8>)
 8003a12:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <SetSysClock+0xe8>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f043 0302 	orr.w	r3, r3, #2
 8003a1a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003a1c:	bf00      	nop
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <SetSysClock+0xe8>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d1f9      	bne.n	8003a1e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	07405408 	.word	0x07405408
 8003a44:	40023c00 	.word	0x40023c00

08003a48 <__libc_init_array>:
 8003a48:	b570      	push	{r4, r5, r6, lr}
 8003a4a:	4e0d      	ldr	r6, [pc, #52]	; (8003a80 <__libc_init_array+0x38>)
 8003a4c:	4c0d      	ldr	r4, [pc, #52]	; (8003a84 <__libc_init_array+0x3c>)
 8003a4e:	1ba4      	subs	r4, r4, r6
 8003a50:	10a4      	asrs	r4, r4, #2
 8003a52:	2500      	movs	r5, #0
 8003a54:	42a5      	cmp	r5, r4
 8003a56:	d109      	bne.n	8003a6c <__libc_init_array+0x24>
 8003a58:	4e0b      	ldr	r6, [pc, #44]	; (8003a88 <__libc_init_array+0x40>)
 8003a5a:	4c0c      	ldr	r4, [pc, #48]	; (8003a8c <__libc_init_array+0x44>)
 8003a5c:	f000 f952 	bl	8003d04 <_init>
 8003a60:	1ba4      	subs	r4, r4, r6
 8003a62:	10a4      	asrs	r4, r4, #2
 8003a64:	2500      	movs	r5, #0
 8003a66:	42a5      	cmp	r5, r4
 8003a68:	d105      	bne.n	8003a76 <__libc_init_array+0x2e>
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a70:	4798      	blx	r3
 8003a72:	3501      	adds	r5, #1
 8003a74:	e7ee      	b.n	8003a54 <__libc_init_array+0xc>
 8003a76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a7a:	4798      	blx	r3
 8003a7c:	3501      	adds	r5, #1
 8003a7e:	e7f2      	b.n	8003a66 <__libc_init_array+0x1e>
 8003a80:	08003d1c 	.word	0x08003d1c
 8003a84:	08003d1c 	.word	0x08003d1c
 8003a88:	08003d1c 	.word	0x08003d1c
 8003a8c:	08003d20 	.word	0x08003d20

08003a90 <malloc>:
 8003a90:	4b02      	ldr	r3, [pc, #8]	; (8003a9c <malloc+0xc>)
 8003a92:	4601      	mov	r1, r0
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	f000 b86d 	b.w	8003b74 <_malloc_r>
 8003a9a:	bf00      	nop
 8003a9c:	20000028 	.word	0x20000028

08003aa0 <free>:
 8003aa0:	4b02      	ldr	r3, [pc, #8]	; (8003aac <free+0xc>)
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	f000 b817 	b.w	8003ad8 <_free_r>
 8003aaa:	bf00      	nop
 8003aac:	20000028 	.word	0x20000028

08003ab0 <memcpy>:
 8003ab0:	b510      	push	{r4, lr}
 8003ab2:	1e43      	subs	r3, r0, #1
 8003ab4:	440a      	add	r2, r1
 8003ab6:	4291      	cmp	r1, r2
 8003ab8:	d100      	bne.n	8003abc <memcpy+0xc>
 8003aba:	bd10      	pop	{r4, pc}
 8003abc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ac0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ac4:	e7f7      	b.n	8003ab6 <memcpy+0x6>

08003ac6 <memset>:
 8003ac6:	4402      	add	r2, r0
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d100      	bne.n	8003ad0 <memset+0xa>
 8003ace:	4770      	bx	lr
 8003ad0:	f803 1b01 	strb.w	r1, [r3], #1
 8003ad4:	e7f9      	b.n	8003aca <memset+0x4>
	...

08003ad8 <_free_r>:
 8003ad8:	b538      	push	{r3, r4, r5, lr}
 8003ada:	4605      	mov	r5, r0
 8003adc:	2900      	cmp	r1, #0
 8003ade:	d045      	beq.n	8003b6c <_free_r+0x94>
 8003ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ae4:	1f0c      	subs	r4, r1, #4
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bfb8      	it	lt
 8003aea:	18e4      	addlt	r4, r4, r3
 8003aec:	f000 f8b0 	bl	8003c50 <__malloc_lock>
 8003af0:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <_free_r+0x98>)
 8003af2:	6813      	ldr	r3, [r2, #0]
 8003af4:	4610      	mov	r0, r2
 8003af6:	b933      	cbnz	r3, 8003b06 <_free_r+0x2e>
 8003af8:	6063      	str	r3, [r4, #4]
 8003afa:	6014      	str	r4, [r2, #0]
 8003afc:	4628      	mov	r0, r5
 8003afe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b02:	f000 b8a6 	b.w	8003c52 <__malloc_unlock>
 8003b06:	42a3      	cmp	r3, r4
 8003b08:	d90c      	bls.n	8003b24 <_free_r+0x4c>
 8003b0a:	6821      	ldr	r1, [r4, #0]
 8003b0c:	1862      	adds	r2, r4, r1
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	bf04      	itt	eq
 8003b12:	681a      	ldreq	r2, [r3, #0]
 8003b14:	685b      	ldreq	r3, [r3, #4]
 8003b16:	6063      	str	r3, [r4, #4]
 8003b18:	bf04      	itt	eq
 8003b1a:	1852      	addeq	r2, r2, r1
 8003b1c:	6022      	streq	r2, [r4, #0]
 8003b1e:	6004      	str	r4, [r0, #0]
 8003b20:	e7ec      	b.n	8003afc <_free_r+0x24>
 8003b22:	4613      	mov	r3, r2
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	b10a      	cbz	r2, 8003b2c <_free_r+0x54>
 8003b28:	42a2      	cmp	r2, r4
 8003b2a:	d9fa      	bls.n	8003b22 <_free_r+0x4a>
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	1858      	adds	r0, r3, r1
 8003b30:	42a0      	cmp	r0, r4
 8003b32:	d10b      	bne.n	8003b4c <_free_r+0x74>
 8003b34:	6820      	ldr	r0, [r4, #0]
 8003b36:	4401      	add	r1, r0
 8003b38:	1858      	adds	r0, r3, r1
 8003b3a:	4282      	cmp	r2, r0
 8003b3c:	6019      	str	r1, [r3, #0]
 8003b3e:	d1dd      	bne.n	8003afc <_free_r+0x24>
 8003b40:	6810      	ldr	r0, [r2, #0]
 8003b42:	6852      	ldr	r2, [r2, #4]
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	4401      	add	r1, r0
 8003b48:	6019      	str	r1, [r3, #0]
 8003b4a:	e7d7      	b.n	8003afc <_free_r+0x24>
 8003b4c:	d902      	bls.n	8003b54 <_free_r+0x7c>
 8003b4e:	230c      	movs	r3, #12
 8003b50:	602b      	str	r3, [r5, #0]
 8003b52:	e7d3      	b.n	8003afc <_free_r+0x24>
 8003b54:	6820      	ldr	r0, [r4, #0]
 8003b56:	1821      	adds	r1, r4, r0
 8003b58:	428a      	cmp	r2, r1
 8003b5a:	bf04      	itt	eq
 8003b5c:	6811      	ldreq	r1, [r2, #0]
 8003b5e:	6852      	ldreq	r2, [r2, #4]
 8003b60:	6062      	str	r2, [r4, #4]
 8003b62:	bf04      	itt	eq
 8003b64:	1809      	addeq	r1, r1, r0
 8003b66:	6021      	streq	r1, [r4, #0]
 8003b68:	605c      	str	r4, [r3, #4]
 8003b6a:	e7c7      	b.n	8003afc <_free_r+0x24>
 8003b6c:	bd38      	pop	{r3, r4, r5, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000208 	.word	0x20000208

08003b74 <_malloc_r>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	1ccd      	adds	r5, r1, #3
 8003b78:	f025 0503 	bic.w	r5, r5, #3
 8003b7c:	3508      	adds	r5, #8
 8003b7e:	2d0c      	cmp	r5, #12
 8003b80:	bf38      	it	cc
 8003b82:	250c      	movcc	r5, #12
 8003b84:	2d00      	cmp	r5, #0
 8003b86:	4606      	mov	r6, r0
 8003b88:	db01      	blt.n	8003b8e <_malloc_r+0x1a>
 8003b8a:	42a9      	cmp	r1, r5
 8003b8c:	d903      	bls.n	8003b96 <_malloc_r+0x22>
 8003b8e:	230c      	movs	r3, #12
 8003b90:	6033      	str	r3, [r6, #0]
 8003b92:	2000      	movs	r0, #0
 8003b94:	bd70      	pop	{r4, r5, r6, pc}
 8003b96:	f000 f85b 	bl	8003c50 <__malloc_lock>
 8003b9a:	4a23      	ldr	r2, [pc, #140]	; (8003c28 <_malloc_r+0xb4>)
 8003b9c:	6814      	ldr	r4, [r2, #0]
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	b991      	cbnz	r1, 8003bc8 <_malloc_r+0x54>
 8003ba2:	4c22      	ldr	r4, [pc, #136]	; (8003c2c <_malloc_r+0xb8>)
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	b91b      	cbnz	r3, 8003bb0 <_malloc_r+0x3c>
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f000 f841 	bl	8003c30 <_sbrk_r>
 8003bae:	6020      	str	r0, [r4, #0]
 8003bb0:	4629      	mov	r1, r5
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	f000 f83c 	bl	8003c30 <_sbrk_r>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d126      	bne.n	8003c0a <_malloc_r+0x96>
 8003bbc:	230c      	movs	r3, #12
 8003bbe:	6033      	str	r3, [r6, #0]
 8003bc0:	4630      	mov	r0, r6
 8003bc2:	f000 f846 	bl	8003c52 <__malloc_unlock>
 8003bc6:	e7e4      	b.n	8003b92 <_malloc_r+0x1e>
 8003bc8:	680b      	ldr	r3, [r1, #0]
 8003bca:	1b5b      	subs	r3, r3, r5
 8003bcc:	d41a      	bmi.n	8003c04 <_malloc_r+0x90>
 8003bce:	2b0b      	cmp	r3, #11
 8003bd0:	d90f      	bls.n	8003bf2 <_malloc_r+0x7e>
 8003bd2:	600b      	str	r3, [r1, #0]
 8003bd4:	50cd      	str	r5, [r1, r3]
 8003bd6:	18cc      	adds	r4, r1, r3
 8003bd8:	4630      	mov	r0, r6
 8003bda:	f000 f83a 	bl	8003c52 <__malloc_unlock>
 8003bde:	f104 000b 	add.w	r0, r4, #11
 8003be2:	1d23      	adds	r3, r4, #4
 8003be4:	f020 0007 	bic.w	r0, r0, #7
 8003be8:	1ac3      	subs	r3, r0, r3
 8003bea:	d01b      	beq.n	8003c24 <_malloc_r+0xb0>
 8003bec:	425a      	negs	r2, r3
 8003bee:	50e2      	str	r2, [r4, r3]
 8003bf0:	bd70      	pop	{r4, r5, r6, pc}
 8003bf2:	428c      	cmp	r4, r1
 8003bf4:	bf0d      	iteet	eq
 8003bf6:	6863      	ldreq	r3, [r4, #4]
 8003bf8:	684b      	ldrne	r3, [r1, #4]
 8003bfa:	6063      	strne	r3, [r4, #4]
 8003bfc:	6013      	streq	r3, [r2, #0]
 8003bfe:	bf18      	it	ne
 8003c00:	460c      	movne	r4, r1
 8003c02:	e7e9      	b.n	8003bd8 <_malloc_r+0x64>
 8003c04:	460c      	mov	r4, r1
 8003c06:	6849      	ldr	r1, [r1, #4]
 8003c08:	e7ca      	b.n	8003ba0 <_malloc_r+0x2c>
 8003c0a:	1cc4      	adds	r4, r0, #3
 8003c0c:	f024 0403 	bic.w	r4, r4, #3
 8003c10:	42a0      	cmp	r0, r4
 8003c12:	d005      	beq.n	8003c20 <_malloc_r+0xac>
 8003c14:	1a21      	subs	r1, r4, r0
 8003c16:	4630      	mov	r0, r6
 8003c18:	f000 f80a 	bl	8003c30 <_sbrk_r>
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d0cd      	beq.n	8003bbc <_malloc_r+0x48>
 8003c20:	6025      	str	r5, [r4, #0]
 8003c22:	e7d9      	b.n	8003bd8 <_malloc_r+0x64>
 8003c24:	bd70      	pop	{r4, r5, r6, pc}
 8003c26:	bf00      	nop
 8003c28:	20000208 	.word	0x20000208
 8003c2c:	2000020c 	.word	0x2000020c

08003c30 <_sbrk_r>:
 8003c30:	b538      	push	{r3, r4, r5, lr}
 8003c32:	4c06      	ldr	r4, [pc, #24]	; (8003c4c <_sbrk_r+0x1c>)
 8003c34:	2300      	movs	r3, #0
 8003c36:	4605      	mov	r5, r0
 8003c38:	4608      	mov	r0, r1
 8003c3a:	6023      	str	r3, [r4, #0]
 8003c3c:	f000 f80a 	bl	8003c54 <_sbrk>
 8003c40:	1c43      	adds	r3, r0, #1
 8003c42:	d102      	bne.n	8003c4a <_sbrk_r+0x1a>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	b103      	cbz	r3, 8003c4a <_sbrk_r+0x1a>
 8003c48:	602b      	str	r3, [r5, #0]
 8003c4a:	bd38      	pop	{r3, r4, r5, pc}
 8003c4c:	200002d0 	.word	0x200002d0

08003c50 <__malloc_lock>:
 8003c50:	4770      	bx	lr

08003c52 <__malloc_unlock>:
 8003c52:	4770      	bx	lr

08003c54 <_sbrk>:
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <_sbrk+0x14>)
 8003c56:	6819      	ldr	r1, [r3, #0]
 8003c58:	4602      	mov	r2, r0
 8003c5a:	b909      	cbnz	r1, 8003c60 <_sbrk+0xc>
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <_sbrk+0x18>)
 8003c5e:	6019      	str	r1, [r3, #0]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	4402      	add	r2, r0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	4770      	bx	lr
 8003c68:	20000210 	.word	0x20000210
 8003c6c:	200002d4 	.word	0x200002d4
 8003c70:	454c4449 	.word	0x454c4449
 8003c74:	00000000 	.word	0x00000000
 8003c78:	20726d54 	.word	0x20726d54
 8003c7c:	00637653 	.word	0x00637653
 8003c80:	51726d54 	.word	0x51726d54
 8003c84:	00000000 	.word	0x00000000
 8003c88:	65657267 	.word	0x65657267
 8003c8c:	67694c6e 	.word	0x67694c6e
 8003c90:	00007468 	.word	0x00007468
 8003c94:	08003c88 	.word	0x08003c88
 8003c98:	000003e8 	.word	0x000003e8
 8003c9c:	00000001 	.word	0x00000001
 8003ca0:	080030fd 	.word	0x080030fd
 8003ca4:	69707845 	.word	0x69707845
 8003ca8:	69746172 	.word	0x69746172
 8003cac:	54206e6f 	.word	0x54206e6f
 8003cb0:	72656d69 	.word	0x72656d69
 8003cb4:	00000000 	.word	0x00000000
 8003cb8:	6e69614d 	.word	0x6e69614d
 8003cbc:	75657551 	.word	0x75657551
 8003cc0:	00000065 	.word	0x00000065
 8003cc4:	65764578 	.word	0x65764578
 8003cc8:	6553746e 	.word	0x6553746e
 8003ccc:	6870616d 	.word	0x6870616d
 8003cd0:	0065726f 	.word	0x0065726f
 8003cd4:	735f6464 	.word	0x735f6464
 8003cd8:	64656863 	.word	0x64656863
 8003cdc:	72656c75 	.word	0x72656c75
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	006e6567 	.word	0x006e6567
 8003ce8:	00000079 	.word	0x00000079

08003cec <GPIO_PIN>:
 8003cec:	20001000 80004000                       ... .@..

08003cf4 <GPIO_CLK>:
 8003cf4:	00000008 00000008 00000008 00000008     ................

08003d04 <_init>:
 8003d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d06:	bf00      	nop
 8003d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d0a:	bc08      	pop	{r3}
 8003d0c:	469e      	mov	lr, r3
 8003d0e:	4770      	bx	lr

08003d10 <_fini>:
 8003d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d12:	bf00      	nop
 8003d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d16:	bc08      	pop	{r3}
 8003d18:	469e      	mov	lr, r3
 8003d1a:	4770      	bx	lr
