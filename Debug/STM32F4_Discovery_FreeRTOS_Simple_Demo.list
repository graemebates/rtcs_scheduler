
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08002e78  08002e78  00012e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08002e7c  08002e7c  00012e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  08002e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00000238  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002b4  200002b4  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000a485  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001a08  00000000  00000000  0002a52f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000008f0  00000000  00000000  0002bf38  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000808  00000000  00000000  0002c828  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000449b  00000000  00000000  0002d030  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038b6  00000000  00000000  000314cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00034d81  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000024c8  00000000  00000000  00034e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000372c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002e60 	.word	0x08002e60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08002e60 	.word	0x08002e60

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	200000a0 	.word	0x200000a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000098 	.word	0x20000098
 8000530:	2000009c 	.word	0x2000009c
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 f888 	bl	8001734 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	200000a0 	.word	0x200000a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f000 ffa4 	bl	80015bc <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000014 	.word	0x20000014
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000098 	.word	0x20000098
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	2000009c 	.word	0x2000009c

08000760 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8000768:	f000 fe6e 	bl	8001448 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f002 fa6b 	bl	8002c48 <malloc>
 8000772:	4603      	mov	r3, r0
 8000774:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000776:	f000 fe75 	bl	8001464 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <pvPortMalloc+0x24>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8000780:	f002 f928 	bl	80029d4 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8000784:	68fb      	ldr	r3, [r7, #12]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	if( pv )
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d006      	beq.n	80007aa <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800079c:	f000 fe54 	bl	8001448 <vTaskSuspendAll>
		{
			free( pv );
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f002 fa59 	bl	8002c58 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80007a6:	f000 fe5d 	bl	8001464 <xTaskResumeAll>
	}
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d109      	bne.n	80007dc <xQueueGenericReset+0x28>
 80007c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	e7fe      	b.n	80007da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80007dc:	f7ff feb0 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007e8:	68f9      	ldr	r1, [r7, #12]
 80007ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007ec:	fb01 f303 	mul.w	r3, r1, r3
 80007f0:	441a      	add	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2200      	movs	r2, #0
 80007fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800080c:	3b01      	subs	r3, #1
 800080e:	68f9      	ldr	r1, [r7, #12]
 8000810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	441a      	add	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	22ff      	movs	r2, #255	; 0xff
 8000820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	22ff      	movs	r2, #255	; 0xff
 8000828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d114      	bne.n	800085c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d01a      	beq.n	8000870 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3310      	adds	r3, #16
 800083e:	4618      	mov	r0, r3
 8000840:	f001 f846 	bl	80018d0 <xTaskRemoveFromEventList>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d012      	beq.n	8000870 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <xQueueGenericReset+0xcc>)
 800084c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	e009      	b.n	8000870 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3310      	adds	r3, #16
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fcb5 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3324      	adds	r3, #36	; 0x24
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fcb0 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000870:	f7ff fe94 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000874:	2301      	movs	r3, #1
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000ed04 	.word	0xe000ed04

08000884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af02      	add	r7, sp, #8
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	4613      	mov	r3, r2
 8000890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d109      	bne.n	80008ac <xQueueGenericCreate+0x28>
 8000898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	e7fe      	b.n	80008aa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	e004      	b.n	80008c2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
 80008c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3348      	adds	r3, #72	; 0x48
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff4a 	bl	8000760 <pvPortMalloc>
 80008cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00b      	beq.n	80008ec <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	3348      	adds	r3, #72	; 0x48
 80008d8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	4613      	mov	r3, r2
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f000 f805 	bl	80008f6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80008ec:	69bb      	ldr	r3, [r7, #24]
	}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d103      	bne.n	8000912 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	e002      	b.n	8000918 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000924:	2101      	movs	r1, #1
 8000926:	69b8      	ldr	r0, [r7, #24]
 8000928:	f7ff ff44 	bl	80007b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	; 0x38
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800094a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094c:	2b00      	cmp	r3, #0
 800094e:	d109      	bne.n	8000964 <xQueueGenericSend+0x30>
 8000950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000954:	f383 8811 	msr	BASEPRI, r3
 8000958:	f3bf 8f6f 	isb	sy
 800095c:	f3bf 8f4f 	dsb	sy
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
 8000962:	e7fe      	b.n	8000962 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d103      	bne.n	8000972 <xQueueGenericSend+0x3e>
 800096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <xQueueGenericSend+0x42>
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <xQueueGenericSend+0x44>
 8000976:	2300      	movs	r3, #0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d109      	bne.n	8000990 <xQueueGenericSend+0x5c>
 800097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000980:	f383 8811 	msr	BASEPRI, r3
 8000984:	f3bf 8f6f 	isb	sy
 8000988:	f3bf 8f4f 	dsb	sy
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
 800098e:	e7fe      	b.n	800098e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d103      	bne.n	800099e <xQueueGenericSend+0x6a>
 8000996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099a:	2b01      	cmp	r3, #1
 800099c:	d101      	bne.n	80009a2 <xQueueGenericSend+0x6e>
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <xQueueGenericSend+0x70>
 80009a2:	2300      	movs	r3, #0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <xQueueGenericSend+0x88>
 80009a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ac:	f383 8811 	msr	BASEPRI, r3
 80009b0:	f3bf 8f6f 	isb	sy
 80009b4:	f3bf 8f4f 	dsb	sy
 80009b8:	623b      	str	r3, [r7, #32]
 80009ba:	e7fe      	b.n	80009ba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80009bc:	f001 f944 	bl	8001c48 <xTaskGetSchedulerState>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <xQueueGenericSend+0x98>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d101      	bne.n	80009d0 <xQueueGenericSend+0x9c>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <xQueueGenericSend+0x9e>
 80009d0:	2300      	movs	r3, #0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d109      	bne.n	80009ea <xQueueGenericSend+0xb6>
 80009d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009da:	f383 8811 	msr	BASEPRI, r3
 80009de:	f3bf 8f6f 	isb	sy
 80009e2:	f3bf 8f4f 	dsb	sy
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	e7fe      	b.n	80009e8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80009ea:	f7ff fda9 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d302      	bcc.n	8000a00 <xQueueGenericSend+0xcc>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d129      	bne.n	8000a54 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	68b9      	ldr	r1, [r7, #8]
 8000a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a06:	f000 fa35 	bl	8000e74 <prvCopyDataToQueue>
 8000a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d010      	beq.n	8000a36 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a16:	3324      	adds	r3, #36	; 0x24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f000 ff59 	bl	80018d0 <xTaskRemoveFromEventList>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d013      	beq.n	8000a4c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000a24:	4b3f      	ldr	r3, [pc, #252]	; (8000b24 <xQueueGenericSend+0x1f0>)
 8000a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	f3bf 8f6f 	isb	sy
 8000a34:	e00a      	b.n	8000a4c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d007      	beq.n	8000a4c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000a3c:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <xQueueGenericSend+0x1f0>)
 8000a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	f3bf 8f4f 	dsb	sy
 8000a48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000a4c:	f7ff fda6 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e063      	b.n	8000b1c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000a5a:	f7ff fd9f 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e05c      	b.n	8000b1c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d106      	bne.n	8000a76 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 ff91 	bl	8001994 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000a76:	f7ff fd91 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000a7a:	f000 fce5 	bl	8001448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000a7e:	f7ff fd5f 	bl	8000540 <vPortEnterCritical>
 8000a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8e:	d103      	bne.n	8000a98 <xQueueGenericSend+0x164>
 8000a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d103      	bne.n	8000aae <xQueueGenericSend+0x17a>
 8000aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000aae:	f7ff fd75 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ab2:	1d3a      	adds	r2, r7, #4
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 ff8e 	bl	80019dc <xTaskCheckForTimeOut>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d124      	bne.n	8000b10 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ac8:	f000 facc 	bl	8001064 <prvIsQueueFull>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d018      	beq.n	8000b04 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad4:	3310      	adds	r3, #16
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 feaa 	bl	8001834 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ae2:	f000 fa57 	bl	8000f94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000ae6:	f000 fcbd 	bl	8001464 <xTaskResumeAll>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f47f af7c 	bne.w	80009ea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <xQueueGenericSend+0x1f0>)
 8000af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	f3bf 8f4f 	dsb	sy
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	e772      	b.n	80009ea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b06:	f000 fa45 	bl	8000f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b0a:	f000 fcab 	bl	8001464 <xTaskResumeAll>
 8000b0e:	e76c      	b.n	80009ea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b12:	f000 fa3f 	bl	8000f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000b16:	f000 fca5 	bl	8001464 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000b1a:	2300      	movs	r3, #0
		}
	}
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3738      	adds	r7, #56	; 0x38
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	e000ed04 	.word	0xe000ed04

08000b28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <xQueueGenericSendFromISR+0x2c>
 8000b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
 8000b52:	e7fe      	b.n	8000b52 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <xQueueGenericSendFromISR+0x3a>
 8000b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <xQueueGenericSendFromISR+0x3e>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <xQueueGenericSendFromISR+0x40>
 8000b66:	2300      	movs	r3, #0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d109      	bne.n	8000b80 <xQueueGenericSendFromISR+0x58>
 8000b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b70:	f383 8811 	msr	BASEPRI, r3
 8000b74:	f3bf 8f6f 	isb	sy
 8000b78:	f3bf 8f4f 	dsb	sy
 8000b7c:	623b      	str	r3, [r7, #32]
 8000b7e:	e7fe      	b.n	8000b7e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d103      	bne.n	8000b8e <xQueueGenericSendFromISR+0x66>
 8000b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d101      	bne.n	8000b92 <xQueueGenericSendFromISR+0x6a>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e000      	b.n	8000b94 <xQueueGenericSendFromISR+0x6c>
 8000b92:	2300      	movs	r3, #0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <xQueueGenericSendFromISR+0x84>
 8000b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b9c:	f383 8811 	msr	BASEPRI, r3
 8000ba0:	f3bf 8f6f 	isb	sy
 8000ba4:	f3bf 8f4f 	dsb	sy
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	e7fe      	b.n	8000baa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000bac:	f7ff fd9a 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000bb0:	f3ef 8211 	mrs	r2, BASEPRI
 8000bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb8:	f383 8811 	msr	BASEPRI, r3
 8000bbc:	f3bf 8f6f 	isb	sy
 8000bc0:	f3bf 8f4f 	dsb	sy
 8000bc4:	61ba      	str	r2, [r7, #24]
 8000bc6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000bc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d302      	bcc.n	8000bde <xQueueGenericSendFromISR+0xb6>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d12c      	bne.n	8000c38 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bee:	f000 f941 	bl	8000e74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000bf2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfa:	d112      	bne.n	8000c22 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d016      	beq.n	8000c32 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c06:	3324      	adds	r3, #36	; 0x24
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 fe61 	bl	80018d0 <xTaskRemoveFromEventList>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00e      	beq.n	8000c32 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e007      	b.n	8000c32 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000c32:	2301      	movs	r3, #1
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000c36:	e001      	b.n	8000c3c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3738      	adds	r7, #56	; 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d109      	bne.n	8000c80 <xQueueGenericReceive+0x30>
	__asm volatile
 8000c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c70:	f383 8811 	msr	BASEPRI, r3
 8000c74:	f3bf 8f6f 	isb	sy
 8000c78:	f3bf 8f4f 	dsb	sy
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000c7e:	e7fe      	b.n	8000c7e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d103      	bne.n	8000c8e <xQueueGenericReceive+0x3e>
 8000c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d101      	bne.n	8000c92 <xQueueGenericReceive+0x42>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e000      	b.n	8000c94 <xQueueGenericReceive+0x44>
 8000c92:	2300      	movs	r3, #0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d109      	bne.n	8000cac <xQueueGenericReceive+0x5c>
 8000c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c9c:	f383 8811 	msr	BASEPRI, r3
 8000ca0:	f3bf 8f6f 	isb	sy
 8000ca4:	f3bf 8f4f 	dsb	sy
 8000ca8:	623b      	str	r3, [r7, #32]
 8000caa:	e7fe      	b.n	8000caa <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000cac:	f000 ffcc 	bl	8001c48 <xTaskGetSchedulerState>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d102      	bne.n	8000cbc <xQueueGenericReceive+0x6c>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <xQueueGenericReceive+0x70>
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e000      	b.n	8000cc2 <xQueueGenericReceive+0x72>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d109      	bne.n	8000cda <xQueueGenericReceive+0x8a>
 8000cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cca:	f383 8811 	msr	BASEPRI, r3
 8000cce:	f3bf 8f6f 	isb	sy
 8000cd2:	f3bf 8f4f 	dsb	sy
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	e7fe      	b.n	8000cd8 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000cda:	f7ff fc31 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d046      	beq.n	8000d78 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cec:	68db      	ldr	r3, [r3, #12]
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cf4:	f000 f928 	bl	8000f48 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d121      	bne.n	8000d42 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8000cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d00:	1e5a      	subs	r2, r3, #1
 8000d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d04:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d104      	bne.n	8000d18 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000d0e:	f001 f8b3 	bl	8001e78 <pvTaskIncrementMutexHeldCount>
 8000d12:	4602      	mov	r2, r0
 8000d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d16:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d027      	beq.n	8000d70 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d22:	3310      	adds	r3, #16
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fdd3 	bl	80018d0 <xTaskRemoveFromEventList>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d01f      	beq.n	8000d70 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000d30:	4b4f      	ldr	r3, [pc, #316]	; (8000e70 <xQueueGenericReceive+0x220>)
 8000d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	f3bf 8f4f 	dsb	sy
 8000d3c:	f3bf 8f6f 	isb	sy
 8000d40:	e016      	b.n	8000d70 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d46:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d00f      	beq.n	8000d70 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d52:	3324      	adds	r3, #36	; 0x24
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fdbb 	bl	80018d0 <xTaskRemoveFromEventList>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d007      	beq.n	8000d70 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d60:	4b43      	ldr	r3, [pc, #268]	; (8000e70 <xQueueGenericReceive+0x220>)
 8000d62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	f3bf 8f4f 	dsb	sy
 8000d6c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000d70:	f7ff fc14 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e077      	b.n	8000e68 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d103      	bne.n	8000d86 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000d7e:	f7ff fc0d 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e070      	b.n	8000e68 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d106      	bne.n	8000d9a <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 fdff 	bl	8001994 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000d96:	2301      	movs	r3, #1
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000d9a:	f7ff fbff 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000d9e:	f000 fb53 	bl	8001448 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000da2:	f7ff fbcd 	bl	8000540 <vPortEnterCritical>
 8000da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db2:	d103      	bne.n	8000dbc <xQueueGenericReceive+0x16c>
 8000db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dc8:	d103      	bne.n	8000dd2 <xQueueGenericReceive+0x182>
 8000dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000dd2:	f7ff fbe3 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000dd6:	1d3a      	adds	r2, r7, #4
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 fdfc 	bl	80019dc <xTaskCheckForTimeOut>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d131      	bne.n	8000e4e <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000dec:	f000 f924 	bl	8001038 <prvIsQueueEmpty>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d025      	beq.n	8000e42 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d108      	bne.n	8000e10 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8000dfe:	f7ff fb9f 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 ff3c 	bl	8001c84 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000e0c:	f7ff fbc6 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	3324      	adds	r3, #36	; 0x24
 8000e14:	687a      	ldr	r2, [r7, #4]
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fd0b 	bl	8001834 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000e1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e20:	f000 f8b8 	bl	8000f94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000e24:	f000 fb1e 	bl	8001464 <xTaskResumeAll>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f47f af55 	bne.w	8000cda <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <xQueueGenericReceive+0x220>)
 8000e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	f3bf 8f4f 	dsb	sy
 8000e3c:	f3bf 8f6f 	isb	sy
 8000e40:	e74b      	b.n	8000cda <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e44:	f000 f8a6 	bl	8000f94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e48:	f000 fb0c 	bl	8001464 <xTaskResumeAll>
 8000e4c:	e745      	b.n	8000cda <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e50:	f000 f8a0 	bl	8000f94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e54:	f000 fb06 	bl	8001464 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e5a:	f000 f8ed 	bl	8001038 <prvIsQueueEmpty>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f43f af3a 	beq.w	8000cda <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000e66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3738      	adds	r7, #56	; 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	e000ed04 	.word	0xe000ed04

08000e74 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d10d      	bne.n	8000eae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d14d      	bne.n	8000f36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 ff66 	bl	8001d70 <xTaskPriorityDisinherit>
 8000ea4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	e043      	b.n	8000f36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d119      	bne.n	8000ee8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6898      	ldr	r0, [r3, #8]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68b9      	ldr	r1, [r7, #8]
 8000ec0:	f001 fed2 	bl	8002c68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ecc:	441a      	add	r2, r3
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d32b      	bcc.n	8000f36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	e026      	b.n	8000f36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	68d8      	ldr	r0, [r3, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	f001 feb8 	bl	8002c68 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	425b      	negs	r3, r3
 8000f02:	441a      	add	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	68da      	ldr	r2, [r3, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	425b      	negs	r3, r3
 8000f1e:	441a      	add	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d105      	bne.n	8000f36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d002      	beq.n	8000f36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8000f3e:	697b      	ldr	r3, [r7, #20]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d018      	beq.n	8000f8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	68da      	ldr	r2, [r3, #12]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f62:	441a      	add	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68da      	ldr	r2, [r3, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d303      	bcc.n	8000f7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68d9      	ldr	r1, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	461a      	mov	r2, r3
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f001 fe6e 	bl	8002c68 <memcpy>
	}
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8000f9c:	f7ff fad0 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000fa6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fa8:	e011      	b.n	8000fce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d012      	beq.n	8000fd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3324      	adds	r3, #36	; 0x24
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f000 fc8a 	bl	80018d0 <xTaskRemoveFromEventList>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8000fc2:	f000 fd69 	bl	8001a98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	dce9      	bgt.n	8000faa <prvUnlockQueue+0x16>
 8000fd6:	e000      	b.n	8000fda <prvUnlockQueue+0x46>
					break;
 8000fd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	22ff      	movs	r2, #255	; 0xff
 8000fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8000fe2:	f7ff fadb 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8000fe6:	f7ff faab 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ff0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8000ff2:	e011      	b.n	8001018 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	691b      	ldr	r3, [r3, #16]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d012      	beq.n	8001022 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3310      	adds	r3, #16
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fc65 	bl	80018d0 <xTaskRemoveFromEventList>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800100c:	f000 fd44 	bl	8001a98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	3b01      	subs	r3, #1
 8001014:	b2db      	uxtb	r3, r3
 8001016:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001018:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800101c:	2b00      	cmp	r3, #0
 800101e:	dce9      	bgt.n	8000ff4 <prvUnlockQueue+0x60>
 8001020:	e000      	b.n	8001024 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001022:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	22ff      	movs	r2, #255	; 0xff
 8001028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800102c:	f7ff fab6 	bl	800059c <vPortExitCritical>
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001040:	f7ff fa7e 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800104c:	2301      	movs	r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	e001      	b.n	8001056 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001056:	f7ff faa1 	bl	800059c <vPortExitCritical>

	return xReturn;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800106c:	f7ff fa68 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001078:	429a      	cmp	r2, r3
 800107a:	d102      	bne.n	8001082 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800107c:	2301      	movs	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e001      	b.n	8001086 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001086:	f7ff fa89 	bl	800059c <vPortExitCritical>

	return xReturn;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e014      	b.n	80010ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <vQueueAddToRegistry+0x4c>)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d10b      	bne.n	80010c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80010b0:	490b      	ldr	r1, [pc, #44]	; (80010e0 <vQueueAddToRegistry+0x4c>)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <vQueueAddToRegistry+0x4c>)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80010c6:	e005      	b.n	80010d4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	3301      	adds	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2b07      	cmp	r3, #7
 80010d2:	d9e7      	bls.n	80010a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	200001f4 	.word	0x200001f4

080010e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80010f4:	f7ff fa24 	bl	8000540 <vPortEnterCritical>
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001104:	d103      	bne.n	800110e <vQueueWaitForMessageRestricted+0x2a>
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001114:	b25b      	sxtb	r3, r3
 8001116:	f1b3 3fff 	cmp.w	r3, #4294967295
 800111a:	d103      	bne.n	8001124 <vQueueWaitForMessageRestricted+0x40>
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001124:	f7ff fa3a 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112c:	2b00      	cmp	r3, #0
 800112e:	d106      	bne.n	800113e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	3324      	adds	r3, #36	; 0x24
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	68b9      	ldr	r1, [r7, #8]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 fb9f 	bl	800187c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800113e:	6978      	ldr	r0, [r7, #20]
 8001140:	f7ff ff28 	bl	8000f94 <prvUnlockQueue>
	}
 8001144:	bf00      	nop
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08c      	sub	sp, #48	; 0x30
 8001150:	af04      	add	r7, sp, #16
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	4613      	mov	r3, r2
 800115a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fafd 	bl	8000760 <pvPortMalloc>
 8001166:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00e      	beq.n	800118c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800116e:	2050      	movs	r0, #80	; 0x50
 8001170:	f7ff faf6 	bl	8000760 <pvPortMalloc>
 8001174:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	631a      	str	r2, [r3, #48]	; 0x30
 8001182:	e005      	b.n	8001190 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001184:	6978      	ldr	r0, [r7, #20]
 8001186:	f7ff fb02 	bl	800078e <vPortFree>
 800118a:	e001      	b.n	8001190 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d013      	beq.n	80011be <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001196:	88fa      	ldrh	r2, [r7, #6]
 8001198:	2300      	movs	r3, #0
 800119a:	9303      	str	r3, [sp, #12]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f000 f80e 	bl	80011ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80011b2:	69f8      	ldr	r0, [r7, #28]
 80011b4:	f000 f892 	bl	80012dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	e002      	b.n	80011c4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80011c4:	69bb      	ldr	r3, [r7, #24]
	}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b088      	sub	sp, #32
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80011dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011de:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	461a      	mov	r2, r3
 80011e6:	21a5      	movs	r1, #165	; 0xa5
 80011e8:	f001 fd49 	bl	8002c7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80011ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011f6:	3b01      	subs	r3, #1
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	f023 0307 	bic.w	r3, r3, #7
 8001204:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f003 0307 	and.w	r3, r3, #7
 800120c:	2b00      	cmp	r3, #0
 800120e:	d009      	beq.n	8001224 <prvInitialiseNewTask+0x56>
 8001210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001214:	f383 8811 	msr	BASEPRI, r3
 8001218:	f3bf 8f6f 	isb	sy
 800121c:	f3bf 8f4f 	dsb	sy
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	e7fe      	b.n	8001222 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	e012      	b.n	8001250 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800122a:	68ba      	ldr	r2, [r7, #8]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	4413      	add	r3, r2
 8001230:	7819      	ldrb	r1, [r3, #0]
 8001232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	4413      	add	r3, r2
 8001238:	3334      	adds	r3, #52	; 0x34
 800123a:	460a      	mov	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	4413      	add	r3, r2
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d006      	beq.n	8001258 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3301      	adds	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	2b09      	cmp	r3, #9
 8001254:	d9e9      	bls.n	800122a <prvInitialiseNewTask+0x5c>
 8001256:	e000      	b.n	800125a <prvInitialiseNewTask+0x8c>
		{
			break;
 8001258:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800125a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001264:	2b04      	cmp	r3, #4
 8001266:	d901      	bls.n	800126c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001268:	2304      	movs	r3, #4
 800126a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001270:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800127e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001280:	3304      	adds	r3, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ffc4 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128a:	3318      	adds	r3, #24
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe ffbf 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001296:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129a:	f1c3 0205 	rsb	r2, r3, #5
 800129e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80012a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80012a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012aa:	2200      	movs	r2, #0
 80012ac:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80012ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	68f9      	ldr	r1, [r7, #12]
 80012ba:	69b8      	ldr	r0, [r7, #24]
 80012bc:	f7ff f83c 	bl	8000338 <pxPortInitialiseStack>
 80012c0:	4602      	mov	r2, r0
 80012c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80012c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d002      	beq.n	80012d2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80012cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80012d2:	bf00      	nop
 80012d4:	3720      	adds	r7, #32
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80012e4:	f7ff f92c 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80012e8:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <prvAddNewTaskToReadyList+0xb8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	4a29      	ldr	r2, [pc, #164]	; (8001394 <prvAddNewTaskToReadyList+0xb8>)
 80012f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <prvAddNewTaskToReadyList+0xbc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80012fa:	4a27      	ldr	r2, [pc, #156]	; (8001398 <prvAddNewTaskToReadyList+0xbc>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001300:	4b24      	ldr	r3, [pc, #144]	; (8001394 <prvAddNewTaskToReadyList+0xb8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d110      	bne.n	800132a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001308:	f000 fbec 	bl	8001ae4 <prvInitialiseTaskLists>
 800130c:	e00d      	b.n	800132a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <prvAddNewTaskToReadyList+0xc0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <prvAddNewTaskToReadyList+0xbc>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	429a      	cmp	r2, r3
 8001322:	d802      	bhi.n	800132a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001324:	4a1c      	ldr	r2, [pc, #112]	; (8001398 <prvAddNewTaskToReadyList+0xbc>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800132a:	4b1d      	ldr	r3, [pc, #116]	; (80013a0 <prvAddNewTaskToReadyList+0xc4>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a1b      	ldr	r2, [pc, #108]	; (80013a0 <prvAddNewTaskToReadyList+0xc4>)
 8001332:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	2201      	movs	r2, #1
 800133a:	409a      	lsls	r2, r3
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <prvAddNewTaskToReadyList+0xc8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4313      	orrs	r3, r2
 8001342:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <prvAddNewTaskToReadyList+0xc8>)
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <prvAddNewTaskToReadyList+0xcc>)
 8001354:	441a      	add	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3304      	adds	r3, #4
 800135a:	4619      	mov	r1, r3
 800135c:	4610      	mov	r0, r2
 800135e:	f7fe ff64 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001362:	f7ff f91b 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <prvAddNewTaskToReadyList+0xc0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00e      	beq.n	800138c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <prvAddNewTaskToReadyList+0xbc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	429a      	cmp	r2, r3
 800137a:	d207      	bcs.n	800138c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800137c:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <prvAddNewTaskToReadyList+0xd0>)
 800137e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	f3bf 8f4f 	dsb	sy
 8001388:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000178 	.word	0x20000178
 8001398:	200000a0 	.word	0x200000a0
 800139c:	20000184 	.word	0x20000184
 80013a0:	20000194 	.word	0x20000194
 80013a4:	20000180 	.word	0x20000180
 80013a8:	200000a4 	.word	0x200000a4
 80013ac:	e000ed04 	.word	0xe000ed04

080013b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80013b6:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <vTaskStartScheduler+0x80>)
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	2300      	movs	r3, #0
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	2282      	movs	r2, #130	; 0x82
 80013c2:	491c      	ldr	r1, [pc, #112]	; (8001434 <vTaskStartScheduler+0x84>)
 80013c4:	481c      	ldr	r0, [pc, #112]	; (8001438 <vTaskStartScheduler+0x88>)
 80013c6:	f7ff fec1 	bl	800114c <xTaskCreate>
 80013ca:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d102      	bne.n	80013d8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80013d2:	f000 fdcb 	bl	8001f6c <xTimerCreateTimerTask>
 80013d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d115      	bne.n	800140a <vTaskStartScheduler+0x5a>
 80013de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e2:	f383 8811 	msr	BASEPRI, r3
 80013e6:	f3bf 8f6f 	isb	sy
 80013ea:	f3bf 8f4f 	dsb	sy
 80013ee:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <vTaskStartScheduler+0x8c>)
 80013f2:	f04f 32ff 	mov.w	r2, #4294967295
 80013f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <vTaskStartScheduler+0x90>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <vTaskStartScheduler+0x94>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001404:	f7ff f810 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001408:	e00d      	b.n	8001426 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d109      	bne.n	8001426 <vTaskStartScheduler+0x76>
 8001412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001416:	f383 8811 	msr	BASEPRI, r3
 800141a:	f3bf 8f6f 	isb	sy
 800141e:	f3bf 8f4f 	dsb	sy
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	e7fe      	b.n	8001424 <vTaskStartScheduler+0x74>
}
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000019c 	.word	0x2000019c
 8001434:	08002e28 	.word	0x08002e28
 8001438:	08001ab1 	.word	0x08001ab1
 800143c:	20000198 	.word	0x20000198
 8001440:	20000184 	.word	0x20000184
 8001444:	2000017c 	.word	0x2000017c

08001448 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <vTaskSuspendAll+0x18>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	3301      	adds	r3, #1
 8001452:	4a03      	ldr	r2, [pc, #12]	; (8001460 <vTaskSuspendAll+0x18>)
 8001454:	6013      	str	r3, [r2, #0]
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	200001a0 	.word	0x200001a0

08001464 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001472:	4b41      	ldr	r3, [pc, #260]	; (8001578 <xTaskResumeAll+0x114>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <xTaskResumeAll+0x2a>
 800147a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800147e:	f383 8811 	msr	BASEPRI, r3
 8001482:	f3bf 8f6f 	isb	sy
 8001486:	f3bf 8f4f 	dsb	sy
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	e7fe      	b.n	800148c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800148e:	f7ff f857 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001492:	4b39      	ldr	r3, [pc, #228]	; (8001578 <xTaskResumeAll+0x114>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	3b01      	subs	r3, #1
 8001498:	4a37      	ldr	r2, [pc, #220]	; (8001578 <xTaskResumeAll+0x114>)
 800149a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800149c:	4b36      	ldr	r3, [pc, #216]	; (8001578 <xTaskResumeAll+0x114>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d161      	bne.n	8001568 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <xTaskResumeAll+0x118>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d05d      	beq.n	8001568 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80014ac:	e02e      	b.n	800150c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80014ae:	4b34      	ldr	r3, [pc, #208]	; (8001580 <xTaskResumeAll+0x11c>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3318      	adds	r3, #24
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe ff12 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	3304      	adds	r3, #4
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe ff0d 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	2201      	movs	r2, #1
 80014d0:	409a      	lsls	r2, r3
 80014d2:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <xTaskResumeAll+0x120>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <xTaskResumeAll+0x120>)
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4a27      	ldr	r2, [pc, #156]	; (8001588 <xTaskResumeAll+0x124>)
 80014ea:	441a      	add	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3304      	adds	r3, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4610      	mov	r0, r2
 80014f4:	f7fe fe99 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <xTaskResumeAll+0x128>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	429a      	cmp	r2, r3
 8001504:	d302      	bcc.n	800150c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <xTaskResumeAll+0x12c>)
 8001508:	2201      	movs	r2, #1
 800150a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <xTaskResumeAll+0x11c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1cc      	bne.n	80014ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800151a:	f000 fb6f 	bl	8001bfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800151e:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <xTaskResumeAll+0x130>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d010      	beq.n	800154c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800152a:	f000 f847 	bl	80015bc <xTaskIncrementTick>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001534:	4b16      	ldr	r3, [pc, #88]	; (8001590 <xTaskResumeAll+0x12c>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3b01      	subs	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f1      	bne.n	800152a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001546:	4b13      	ldr	r3, [pc, #76]	; (8001594 <xTaskResumeAll+0x130>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <xTaskResumeAll+0x12c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d009      	beq.n	8001568 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001554:	2301      	movs	r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <xTaskResumeAll+0x134>)
 800155a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f3bf 8f4f 	dsb	sy
 8001564:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001568:	f7ff f818 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 800156c:	68bb      	ldr	r3, [r7, #8]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	200001a0 	.word	0x200001a0
 800157c:	20000178 	.word	0x20000178
 8001580:	20000138 	.word	0x20000138
 8001584:	20000180 	.word	0x20000180
 8001588:	200000a4 	.word	0x200000a4
 800158c:	200000a0 	.word	0x200000a0
 8001590:	2000018c 	.word	0x2000018c
 8001594:	20000188 	.word	0x20000188
 8001598:	e000ed04 	.word	0xe000ed04

0800159c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80015a2:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <xTaskGetTickCount+0x1c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	2000017c 	.word	0x2000017c

080015bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80015c6:	4b50      	ldr	r3, [pc, #320]	; (8001708 <xTaskIncrementTick+0x14c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f040 808c 	bne.w	80016e8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80015d0:	4b4e      	ldr	r3, [pc, #312]	; (800170c <xTaskIncrementTick+0x150>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80015d8:	4a4c      	ldr	r2, [pc, #304]	; (800170c <xTaskIncrementTick+0x150>)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d11f      	bne.n	8001624 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80015e4:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <xTaskIncrementTick+0x154>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <xTaskIncrementTick+0x46>
 80015ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f2:	f383 8811 	msr	BASEPRI, r3
 80015f6:	f3bf 8f6f 	isb	sy
 80015fa:	f3bf 8f4f 	dsb	sy
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	e7fe      	b.n	8001600 <xTaskIncrementTick+0x44>
 8001602:	4b43      	ldr	r3, [pc, #268]	; (8001710 <xTaskIncrementTick+0x154>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	4b42      	ldr	r3, [pc, #264]	; (8001714 <xTaskIncrementTick+0x158>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a40      	ldr	r2, [pc, #256]	; (8001710 <xTaskIncrementTick+0x154>)
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	4a40      	ldr	r2, [pc, #256]	; (8001714 <xTaskIncrementTick+0x158>)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b40      	ldr	r3, [pc, #256]	; (8001718 <xTaskIncrementTick+0x15c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <xTaskIncrementTick+0x15c>)
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	f000 faec 	bl	8001bfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001624:	4b3d      	ldr	r3, [pc, #244]	; (800171c <xTaskIncrementTick+0x160>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	429a      	cmp	r2, r3
 800162c:	d34d      	bcc.n	80016ca <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <xTaskIncrementTick+0x154>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <xTaskIncrementTick+0x80>
 8001638:	2301      	movs	r3, #1
 800163a:	e000      	b.n	800163e <xTaskIncrementTick+0x82>
 800163c:	2300      	movs	r3, #0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d004      	beq.n	800164c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001642:	4b36      	ldr	r3, [pc, #216]	; (800171c <xTaskIncrementTick+0x160>)
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	601a      	str	r2, [r3, #0]
					break;
 800164a:	e03e      	b.n	80016ca <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800164c:	4b30      	ldr	r3, [pc, #192]	; (8001710 <xTaskIncrementTick+0x154>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	429a      	cmp	r2, r3
 8001662:	d203      	bcs.n	800166c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001664:	4a2d      	ldr	r2, [pc, #180]	; (800171c <xTaskIncrementTick+0x160>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
						break;
 800166a:	e02e      	b.n	80016ca <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	3304      	adds	r3, #4
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe fe37 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167a:	2b00      	cmp	r3, #0
 800167c:	d004      	beq.n	8001688 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	3318      	adds	r3, #24
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe fe2e 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	2201      	movs	r2, #1
 800168e:	409a      	lsls	r2, r3
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <xTaskIncrementTick+0x164>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4313      	orrs	r3, r2
 8001696:	4a22      	ldr	r2, [pc, #136]	; (8001720 <xTaskIncrementTick+0x164>)
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <xTaskIncrementTick+0x168>)
 80016a8:	441a      	add	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	3304      	adds	r3, #4
 80016ae:	4619      	mov	r1, r3
 80016b0:	4610      	mov	r0, r2
 80016b2:	f7fe fdba 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <xTaskIncrementTick+0x16c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3b4      	bcc.n	800162e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80016c4:	2301      	movs	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80016c8:	e7b1      	b.n	800162e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <xTaskIncrementTick+0x16c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d0:	4914      	ldr	r1, [pc, #80]	; (8001724 <xTaskIncrementTick+0x168>)
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d907      	bls.n	80016f2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80016e2:	2301      	movs	r3, #1
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e004      	b.n	80016f2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <xTaskIncrementTick+0x170>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	4a0f      	ldr	r2, [pc, #60]	; (800172c <xTaskIncrementTick+0x170>)
 80016f0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <xTaskIncrementTick+0x174>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80016fe:	697b      	ldr	r3, [r7, #20]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200001a0 	.word	0x200001a0
 800170c:	2000017c 	.word	0x2000017c
 8001710:	20000130 	.word	0x20000130
 8001714:	20000134 	.word	0x20000134
 8001718:	20000190 	.word	0x20000190
 800171c:	20000198 	.word	0x20000198
 8001720:	20000180 	.word	0x20000180
 8001724:	200000a4 	.word	0x200000a4
 8001728:	200000a0 	.word	0x200000a0
 800172c:	20000188 	.word	0x20000188
 8001730:	2000018c 	.word	0x2000018c

08001734 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <vTaskSwitchContext+0xec>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <vTaskSwitchContext+0xf0>)
 8001744:	2201      	movs	r2, #1
 8001746:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001748:	e065      	b.n	8001816 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800174a:	4b36      	ldr	r3, [pc, #216]	; (8001824 <vTaskSwitchContext+0xf0>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001750:	4b35      	ldr	r3, [pc, #212]	; (8001828 <vTaskSwitchContext+0xf4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	61fb      	str	r3, [r7, #28]
 8001758:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800175c:	61bb      	str	r3, [r7, #24]
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	429a      	cmp	r2, r3
 8001766:	d111      	bne.n	800178c <vTaskSwitchContext+0x58>
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3304      	adds	r3, #4
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	429a      	cmp	r2, r3
 8001772:	d10b      	bne.n	800178c <vTaskSwitchContext+0x58>
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	3308      	adds	r3, #8
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	429a      	cmp	r2, r3
 800177e:	d105      	bne.n	800178c <vTaskSwitchContext+0x58>
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	330c      	adds	r3, #12
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	429a      	cmp	r2, r3
 800178a:	d008      	beq.n	800179e <vTaskSwitchContext+0x6a>
 800178c:	4b26      	ldr	r3, [pc, #152]	; (8001828 <vTaskSwitchContext+0xf4>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b25      	ldr	r3, [pc, #148]	; (8001828 <vTaskSwitchContext+0xf4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3334      	adds	r3, #52	; 0x34
 8001796:	4619      	mov	r1, r3
 8001798:	4610      	mov	r0, r2
 800179a:	f001 f91e 	bl	80029da <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800179e:	4b23      	ldr	r3, [pc, #140]	; (800182c <vTaskSwitchContext+0xf8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	fab3 f383 	clz	r3, r3
 80017aa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80017ac:	7afb      	ldrb	r3, [r7, #11]
 80017ae:	f1c3 031f 	rsb	r3, r3, #31
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	491e      	ldr	r1, [pc, #120]	; (8001830 <vTaskSwitchContext+0xfc>)
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d109      	bne.n	80017dc <vTaskSwitchContext+0xa8>
	__asm volatile
 80017c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017cc:	f383 8811 	msr	BASEPRI, r3
 80017d0:	f3bf 8f6f 	isb	sy
 80017d4:	f3bf 8f4f 	dsb	sy
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	e7fe      	b.n	80017da <vTaskSwitchContext+0xa6>
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <vTaskSwitchContext+0xfc>)
 80017e8:	4413      	add	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	685a      	ldr	r2, [r3, #4]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	3308      	adds	r3, #8
 80017fe:	429a      	cmp	r2, r3
 8001800:	d104      	bne.n	800180c <vTaskSwitchContext+0xd8>
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <vTaskSwitchContext+0xf4>)
 8001814:	6013      	str	r3, [r2, #0]
}
 8001816:	bf00      	nop
 8001818:	3720      	adds	r7, #32
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200001a0 	.word	0x200001a0
 8001824:	2000018c 	.word	0x2000018c
 8001828:	200000a0 	.word	0x200000a0
 800182c:	20000180 	.word	0x20000180
 8001830:	200000a4 	.word	0x200000a4

08001834 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d109      	bne.n	8001858 <vTaskPlaceOnEventList+0x24>
 8001844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001848:	f383 8811 	msr	BASEPRI, r3
 800184c:	f3bf 8f6f 	isb	sy
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	e7fe      	b.n	8001856 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <vTaskPlaceOnEventList+0x44>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3318      	adds	r3, #24
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7fe fd06 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001866:	2101      	movs	r1, #1
 8001868:	6838      	ldr	r0, [r7, #0]
 800186a:	f000 fb19 	bl	8001ea0 <prvAddCurrentTaskToDelayedList>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200000a0 	.word	0x200000a0

0800187c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <vTaskPlaceOnEventListRestricted+0x26>
 800188e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001892:	f383 8811 	msr	BASEPRI, r3
 8001896:	f3bf 8f6f 	isb	sy
 800189a:	f3bf 8f4f 	dsb	sy
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e7fe      	b.n	80018a0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <vTaskPlaceOnEventListRestricted+0x50>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3318      	adds	r3, #24
 80018a8:	4619      	mov	r1, r3
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7fe fcbd 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	68b8      	ldr	r0, [r7, #8]
 80018c0:	f000 faee 	bl	8001ea0 <prvAddCurrentTaskToDelayedList>
	}
 80018c4:	bf00      	nop
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	200000a0 	.word	0x200000a0

080018d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d109      	bne.n	80018fa <xTaskRemoveFromEventList+0x2a>
 80018e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ea:	f383 8811 	msr	BASEPRI, r3
 80018ee:	f3bf 8f6f 	isb	sy
 80018f2:	f3bf 8f4f 	dsb	sy
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	e7fe      	b.n	80018f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	3318      	adds	r3, #24
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fcf0 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <xTaskRemoveFromEventList+0xac>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d11c      	bne.n	8001946 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	3304      	adds	r3, #4
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fce7 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	2201      	movs	r2, #1
 800191c:	409a      	lsls	r2, r3
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <xTaskRemoveFromEventList+0xb0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4313      	orrs	r3, r2
 8001924:	4a16      	ldr	r2, [pc, #88]	; (8001980 <xTaskRemoveFromEventList+0xb0>)
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4a13      	ldr	r2, [pc, #76]	; (8001984 <xTaskRemoveFromEventList+0xb4>)
 8001936:	441a      	add	r2, r3
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	3304      	adds	r3, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4610      	mov	r0, r2
 8001940:	f7fe fc73 	bl	800022a <vListInsertEnd>
 8001944:	e005      	b.n	8001952 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	3318      	adds	r3, #24
 800194a:	4619      	mov	r1, r3
 800194c:	480e      	ldr	r0, [pc, #56]	; (8001988 <xTaskRemoveFromEventList+0xb8>)
 800194e:	f7fe fc6c 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <xTaskRemoveFromEventList+0xbc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	429a      	cmp	r2, r3
 800195e:	d905      	bls.n	800196c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001960:	2301      	movs	r3, #1
 8001962:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <xTaskRemoveFromEventList+0xc0>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e001      	b.n	8001970 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001970:	697b      	ldr	r3, [r7, #20]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200001a0 	.word	0x200001a0
 8001980:	20000180 	.word	0x20000180
 8001984:	200000a4 	.word	0x200000a4
 8001988:	20000138 	.word	0x20000138
 800198c:	200000a0 	.word	0x200000a0
 8001990:	2000018c 	.word	0x2000018c

08001994 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <vTaskSetTimeOutState+0x22>
 80019a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a6:	f383 8811 	msr	BASEPRI, r3
 80019aa:	f3bf 8f6f 	isb	sy
 80019ae:	f3bf 8f4f 	dsb	sy
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e7fe      	b.n	80019b4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <vTaskSetTimeOutState+0x40>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <vTaskSetTimeOutState+0x44>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	605a      	str	r2, [r3, #4]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000190 	.word	0x20000190
 80019d8:	2000017c 	.word	0x2000017c

080019dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d109      	bne.n	8001a00 <xTaskCheckForTimeOut+0x24>
 80019ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019f0:	f383 8811 	msr	BASEPRI, r3
 80019f4:	f3bf 8f6f 	isb	sy
 80019f8:	f3bf 8f4f 	dsb	sy
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	e7fe      	b.n	80019fe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <xTaskCheckForTimeOut+0x3e>
 8001a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a0a:	f383 8811 	msr	BASEPRI, r3
 8001a0e:	f3bf 8f6f 	isb	sy
 8001a12:	f3bf 8f4f 	dsb	sy
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	e7fe      	b.n	8001a18 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001a1a:	f7fe fd91 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001a1e:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <xTaskCheckForTimeOut+0xb4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2c:	d102      	bne.n	8001a34 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e026      	b.n	8001a82 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <xTaskCheckForTimeOut+0xb8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d007      	beq.n	8001a50 <xTaskCheckForTimeOut+0x74>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d802      	bhi.n	8001a50 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e018      	b.n	8001a82 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	1ad2      	subs	r2, r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d20e      	bcs.n	8001a7e <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6859      	ldr	r1, [r3, #4]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1acb      	subs	r3, r1, r3
 8001a6c:	441a      	add	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff8e 	bl	8001994 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	e001      	b.n	8001a82 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001a82:	f7fe fd8b 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001a86:	697b      	ldr	r3, [r7, #20]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	2000017c 	.word	0x2000017c
 8001a94:	20000190 	.word	0x20000190

08001a98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <vTaskMissedYield+0x14>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	2000018c 	.word	0x2000018c

08001ab0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001ab8:	f000 f854 	bl	8001b64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <prvIdleTask+0x2c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d907      	bls.n	8001ad4 <prvIdleTask+0x24>
			{
				taskYIELD();
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <prvIdleTask+0x30>)
 8001ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	f3bf 8f4f 	dsb	sy
 8001ad0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8001ad4:	f000 ff87 	bl	80029e6 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8001ad8:	e7ee      	b.n	8001ab8 <prvIdleTask+0x8>
 8001ada:	bf00      	nop
 8001adc:	200000a4 	.word	0x200000a4
 8001ae0:	e000ed04 	.word	0xe000ed04

08001ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	e00c      	b.n	8001b0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <prvInitialiseTaskLists+0x60>)
 8001afc:	4413      	add	r3, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fb66 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3301      	adds	r3, #1
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d9ef      	bls.n	8001af0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001b10:	480d      	ldr	r0, [pc, #52]	; (8001b48 <prvInitialiseTaskLists+0x64>)
 8001b12:	f7fe fb5d 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <prvInitialiseTaskLists+0x68>)
 8001b18:	f7fe fb5a 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001b1c:	480c      	ldr	r0, [pc, #48]	; (8001b50 <prvInitialiseTaskLists+0x6c>)
 8001b1e:	f7fe fb57 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001b22:	480c      	ldr	r0, [pc, #48]	; (8001b54 <prvInitialiseTaskLists+0x70>)
 8001b24:	f7fe fb54 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <prvInitialiseTaskLists+0x74>)
 8001b2a:	f7fe fb51 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <prvInitialiseTaskLists+0x78>)
 8001b30:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <prvInitialiseTaskLists+0x64>)
 8001b32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <prvInitialiseTaskLists+0x7c>)
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <prvInitialiseTaskLists+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200000a4 	.word	0x200000a4
 8001b48:	20000108 	.word	0x20000108
 8001b4c:	2000011c 	.word	0x2000011c
 8001b50:	20000138 	.word	0x20000138
 8001b54:	2000014c 	.word	0x2000014c
 8001b58:	20000164 	.word	0x20000164
 8001b5c:	20000130 	.word	0x20000130
 8001b60:	20000134 	.word	0x20000134

08001b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001b6a:	e028      	b.n	8001bbe <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8001b6c:	f7ff fc6c 	bl	8001448 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <prvCheckTasksWaitingTermination+0x6c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf0c      	ite	eq
 8001b78:	2301      	moveq	r3, #1
 8001b7a:	2300      	movne	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8001b80:	f7ff fc70 	bl	8001464 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d119      	bne.n	8001bbe <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001b8a:	f7fe fcd9 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <prvCheckTasksWaitingTermination+0x6c>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fba2 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <prvCheckTasksWaitingTermination+0x70>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <prvCheckTasksWaitingTermination+0x70>)
 8001ba8:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <prvCheckTasksWaitingTermination+0x74>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <prvCheckTasksWaitingTermination+0x74>)
 8001bb2:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8001bb4:	f7fe fcf2 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8001bb8:	6838      	ldr	r0, [r7, #0]
 8001bba:	f000 f80f 	bl	8001bdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <prvCheckTasksWaitingTermination+0x74>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1d2      	bne.n	8001b6c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000014c 	.word	0x2000014c
 8001bd4:	20000178 	.word	0x20000178
 8001bd8:	20000160 	.word	0x20000160

08001bdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fdd0 	bl	800078e <vPortFree>
			vPortFree( pxTCB );
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7fe fdcd 	bl	800078e <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001bf4:	bf00      	nop
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <prvResetNextTaskUnblockTime+0x44>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <prvResetNextTaskUnblockTime+0x14>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <prvResetNextTaskUnblockTime+0x16>
 8001c10:	2300      	movs	r3, #0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <prvResetNextTaskUnblockTime+0x48>)
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001c1e:	e008      	b.n	8001c32 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <prvResetNextTaskUnblockTime+0x44>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <prvResetNextTaskUnblockTime+0x48>)
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000130 	.word	0x20000130
 8001c44:	20000198 	.word	0x20000198

08001c48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <xTaskGetSchedulerState+0x34>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001c56:	2301      	movs	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	e008      	b.n	8001c6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c5c:	4b08      	ldr	r3, [pc, #32]	; (8001c80 <xTaskGetSchedulerState+0x38>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001c64:	2302      	movs	r3, #2
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	e001      	b.n	8001c6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001c6e:	687b      	ldr	r3, [r7, #4]
	}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	20000184 	.word	0x20000184
 8001c80:	200001a0 	.word	0x200001a0

08001c84 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d062      	beq.n	8001d5c <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c9a:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <vTaskPriorityInherit+0xe0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d25b      	bcs.n	8001d5c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	db06      	blt.n	8001cba <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cac:	4b2d      	ldr	r3, [pc, #180]	; (8001d64 <vTaskPriorityInherit+0xe0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	f1c3 0205 	rsb	r2, r3, #5
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6959      	ldr	r1, [r3, #20]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4a27      	ldr	r2, [pc, #156]	; (8001d68 <vTaskPriorityInherit+0xe4>)
 8001ccc:	4413      	add	r3, r2
 8001cce:	4299      	cmp	r1, r3
 8001cd0:	d101      	bne.n	8001cd6 <vTaskPriorityInherit+0x52>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <vTaskPriorityInherit+0x54>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d03a      	beq.n	8001d52 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	3304      	adds	r3, #4
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe faff 	bl	80002e4 <uxListRemove>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d115      	bne.n	8001d18 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf0:	491d      	ldr	r1, [pc, #116]	; (8001d68 <vTaskPriorityInherit+0xe4>)
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10a      	bne.n	8001d18 <vTaskPriorityInherit+0x94>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	2201      	movs	r2, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <vTaskPriorityInherit+0xe8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4013      	ands	r3, r2
 8001d14:	4a15      	ldr	r2, [pc, #84]	; (8001d6c <vTaskPriorityInherit+0xe8>)
 8001d16:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <vTaskPriorityInherit+0xe0>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	2201      	movs	r2, #1
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <vTaskPriorityInherit+0xe8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <vTaskPriorityInherit+0xe8>)
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <vTaskPriorityInherit+0xe4>)
 8001d42:	441a      	add	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3304      	adds	r3, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	f7fe fa6d 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001d50:	e004      	b.n	8001d5c <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <vTaskPriorityInherit+0xe0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8001d5c:	bf00      	nop
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200000a0 	.word	0x200000a0
 8001d68:	200000a4 	.word	0x200000a4
 8001d6c:	20000180 	.word	0x20000180

08001d70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d06c      	beq.n	8001e60 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8001d86:	4b39      	ldr	r3, [pc, #228]	; (8001e6c <xTaskPriorityDisinherit+0xfc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d009      	beq.n	8001da4 <xTaskPriorityDisinherit+0x34>
 8001d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	e7fe      	b.n	8001da2 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <xTaskPriorityDisinherit+0x50>
 8001dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db0:	f383 8811 	msr	BASEPRI, r3
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	e7fe      	b.n	8001dbe <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	1e5a      	subs	r2, r3, #1
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d044      	beq.n	8001e60 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d140      	bne.n	8001e60 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	3304      	adds	r3, #4
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fa7e 	bl	80002e4 <uxListRemove>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d115      	bne.n	8001e1a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df2:	491f      	ldr	r1, [pc, #124]	; (8001e70 <xTaskPriorityDisinherit+0x100>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10a      	bne.n	8001e1a <xTaskPriorityDisinherit+0xaa>
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	2201      	movs	r2, #1
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43da      	mvns	r2, r3
 8001e10:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <xTaskPriorityDisinherit+0x104>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4013      	ands	r3, r2
 8001e16:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <xTaskPriorityDisinherit+0x104>)
 8001e18:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	f1c3 0205 	rsb	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e32:	2201      	movs	r2, #1
 8001e34:	409a      	lsls	r2, r3
 8001e36:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <xTaskPriorityDisinherit+0x104>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <xTaskPriorityDisinherit+0x104>)
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <xTaskPriorityDisinherit+0x100>)
 8001e4e:	441a      	add	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	3304      	adds	r3, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7fe f9e7 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001e60:	697b      	ldr	r3, [r7, #20]
	}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200000a0 	.word	0x200000a0
 8001e70:	200000a4 	.word	0x200000a4
 8001e74:	20000180 	.word	0x20000180

08001e78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <pvTaskIncrementMutexHeldCount+0x24>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <pvTaskIncrementMutexHeldCount+0x24>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e8a:	3201      	adds	r2, #1
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8001e8e:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <pvTaskIncrementMutexHeldCount+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
	}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	200000a0 	.word	0x200000a0

08001ea0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001eaa:	4b29      	ldr	r3, [pc, #164]	; (8001f50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	3304      	adds	r3, #4
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fa14 	bl	80002e4 <uxListRemove>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	2201      	movs	r2, #1
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43da      	mvns	r2, r3
 8001ed0:	4b21      	ldr	r3, [pc, #132]	; (8001f58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	4a20      	ldr	r2, [pc, #128]	; (8001f58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8001ed8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d10a      	bne.n	8001ef8 <prvAddCurrentTaskToDelayedList+0x58>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d007      	beq.n	8001ef8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ee8:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	3304      	adds	r3, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	481a      	ldr	r0, [pc, #104]	; (8001f5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8001ef2:	f7fe f99a 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001ef6:	e026      	b.n	8001f46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d209      	bcs.n	8001f24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	f7fe f9a8 	bl	8000272 <vListInsert>
}
 8001f22:	e010      	b.n	8001f46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4610      	mov	r0, r2
 8001f32:	f7fe f99e 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001f36:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d202      	bcs.n	8001f46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8001f40:	4a09      	ldr	r2, [pc, #36]	; (8001f68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	6013      	str	r3, [r2, #0]
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000017c 	.word	0x2000017c
 8001f54:	200000a0 	.word	0x200000a0
 8001f58:	20000180 	.word	0x20000180
 8001f5c:	20000164 	.word	0x20000164
 8001f60:	20000134 	.word	0x20000134
 8001f64:	20000130 	.word	0x20000130
 8001f68:	20000198 	.word	0x20000198

08001f6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8001f76:	f000 fa8f 	bl	8002498 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <xTimerCreateTimerTask+0x54>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <xTimerCreateTimerTask+0x58>)
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	2303      	movs	r3, #3
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001f90:	490d      	ldr	r1, [pc, #52]	; (8001fc8 <xTimerCreateTimerTask+0x5c>)
 8001f92:	480e      	ldr	r0, [pc, #56]	; (8001fcc <xTimerCreateTimerTask+0x60>)
 8001f94:	f7ff f8da 	bl	800114c <xTaskCreate>
 8001f98:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d109      	bne.n	8001fb4 <xTimerCreateTimerTask+0x48>
 8001fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa4:	f383 8811 	msr	BASEPRI, r3
 8001fa8:	f3bf 8f6f 	isb	sy
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	603b      	str	r3, [r7, #0]
 8001fb2:	e7fe      	b.n	8001fb2 <xTimerCreateTimerTask+0x46>
	return xReturn;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200001d4 	.word	0x200001d4
 8001fc4:	200001d8 	.word	0x200001d8
 8001fc8:	08002e30 	.word	0x08002e30
 8001fcc:	080020e9 	.word	0x080020e9

08001fd0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <xTimerGenericCommand+0x2c>
 8001fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fec:	f383 8811 	msr	BASEPRI, r3
 8001ff0:	f3bf 8f6f 	isb	sy
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	623b      	str	r3, [r7, #32]
 8001ffa:	e7fe      	b.n	8001ffa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <xTimerGenericCommand+0x94>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d02a      	beq.n	800205a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b05      	cmp	r3, #5
 8002014:	dc18      	bgt.n	8002048 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002016:	f7ff fe17 	bl	8001c48 <xTaskGetSchedulerState>
 800201a:	4603      	mov	r3, r0
 800201c:	2b02      	cmp	r3, #2
 800201e:	d109      	bne.n	8002034 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <xTimerGenericCommand+0x94>)
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	f107 0114 	add.w	r1, r7, #20
 8002028:	2300      	movs	r3, #0
 800202a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800202c:	f7fe fc82 	bl	8000934 <xQueueGenericSend>
 8002030:	6278      	str	r0, [r7, #36]	; 0x24
 8002032:	e012      	b.n	800205a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <xTimerGenericCommand+0x94>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	f107 0114 	add.w	r1, r7, #20
 800203c:	2300      	movs	r3, #0
 800203e:	2200      	movs	r2, #0
 8002040:	f7fe fc78 	bl	8000934 <xQueueGenericSend>
 8002044:	6278      	str	r0, [r7, #36]	; 0x24
 8002046:	e008      	b.n	800205a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <xTimerGenericCommand+0x94>)
 800204a:	6818      	ldr	r0, [r3, #0]
 800204c:	f107 0114 	add.w	r1, r7, #20
 8002050:	2300      	movs	r3, #0
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	f7fe fd68 	bl	8000b28 <xQueueGenericSendFromISR>
 8002058:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800205c:	4618      	mov	r0, r3
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200001d4 	.word	0x200001d4

08002068 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <prvProcessExpiredTimer+0x7c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3304      	adds	r3, #4
 8002080:	4618      	mov	r0, r3
 8002082:	f7fe f92f 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d121      	bne.n	80020d2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	699a      	ldr	r2, [r3, #24]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	18d1      	adds	r1, r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f000 f8c8 	bl	8002230 <prvInsertTimerInActiveList>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d015      	beq.n	80020d2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80020a6:	2300      	movs	r3, #0
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2300      	movs	r3, #0
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	2100      	movs	r1, #0
 80020b0:	6978      	ldr	r0, [r7, #20]
 80020b2:	f7ff ff8d 	bl	8001fd0 <xTimerGenericCommand>
 80020b6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <prvProcessExpiredTimer+0x6a>
 80020be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020c2:	f383 8811 	msr	BASEPRI, r3
 80020c6:	f3bf 8f6f 	isb	sy
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e7fe      	b.n	80020d0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	4798      	blx	r3
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200001cc 	.word	0x200001cc

080020e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80020f0:	f107 0308 	add.w	r3, r7, #8
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f857 	bl	80021a8 <prvGetNextExpireTime>
 80020fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4619      	mov	r1, r3
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f803 	bl	800210c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002106:	f000 f8d5 	bl	80022b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800210a:	e7f1      	b.n	80020f0 <prvTimerTask+0x8>

0800210c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002116:	f7ff f997 	bl	8001448 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	4618      	mov	r0, r3
 8002120:	f000 f866 	bl	80021f0 <prvSampleTimeNow>
 8002124:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d130      	bne.n	800218e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10a      	bne.n	8002148 <prvProcessTimerOrBlockTask+0x3c>
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	429a      	cmp	r2, r3
 8002138:	d806      	bhi.n	8002148 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800213a:	f7ff f993 	bl	8001464 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800213e:	68f9      	ldr	r1, [r7, #12]
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f7ff ff91 	bl	8002068 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002146:	e024      	b.n	8002192 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d008      	beq.n	8002160 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <prvProcessTimerOrBlockTask+0x90>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf0c      	ite	eq
 8002158:	2301      	moveq	r3, #1
 800215a:	2300      	movne	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <prvProcessTimerOrBlockTask+0x94>)
 8002162:	6818      	ldr	r0, [r3, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	f7fe ffb9 	bl	80010e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002172:	f7ff f977 	bl	8001464 <xTaskResumeAll>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10a      	bne.n	8002192 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <prvProcessTimerOrBlockTask+0x98>)
 800217e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	f3bf 8f6f 	isb	sy
}
 800218c:	e001      	b.n	8002192 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800218e:	f7ff f969 	bl	8001464 <xTaskResumeAll>
}
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200001d0 	.word	0x200001d0
 80021a0:	200001d4 	.word	0x200001d4
 80021a4:	e000ed04 	.word	0xe000ed04

080021a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <prvGetNextExpireTime+0x44>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	bf0c      	ite	eq
 80021ba:	2301      	moveq	r3, #1
 80021bc:	2300      	movne	r3, #0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	461a      	mov	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80021ce:	4b07      	ldr	r3, [pc, #28]	; (80021ec <prvGetNextExpireTime+0x44>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	e001      	b.n	80021de <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	200001cc 	.word	0x200001cc

080021f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80021f8:	f7ff f9d0 	bl	800159c <xTaskGetTickCount>
 80021fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <prvSampleTimeNow+0x3c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d205      	bcs.n	8002214 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002208:	f000 f8e6 	bl	80023d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e002      	b.n	800221a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800221a:	4a04      	ldr	r2, [pc, #16]	; (800222c <prvSampleTimeNow+0x3c>)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002220:	68fb      	ldr	r3, [r7, #12]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200001dc 	.word	0x200001dc

08002230 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
 800223c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	429a      	cmp	r2, r3
 8002254:	d812      	bhi.n	800227c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	1ad2      	subs	r2, r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	429a      	cmp	r2, r3
 8002262:	d302      	bcc.n	800226a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002264:	2301      	movs	r3, #1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	e01b      	b.n	80022a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800226a:	4b10      	ldr	r3, [pc, #64]	; (80022ac <prvInsertTimerInActiveList+0x7c>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3304      	adds	r3, #4
 8002272:	4619      	mov	r1, r3
 8002274:	4610      	mov	r0, r2
 8002276:	f7fd fffc 	bl	8000272 <vListInsert>
 800227a:	e012      	b.n	80022a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d206      	bcs.n	8002292 <prvInsertTimerInActiveList+0x62>
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d302      	bcc.n	8002292 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800228c:	2301      	movs	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	e007      	b.n	80022a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002292:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <prvInsertTimerInActiveList+0x80>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	3304      	adds	r3, #4
 800229a:	4619      	mov	r1, r3
 800229c:	4610      	mov	r0, r2
 800229e:	f7fd ffe8 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80022a2:	697b      	ldr	r3, [r7, #20]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	200001d0 	.word	0x200001d0
 80022b0:	200001cc 	.word	0x200001cc

080022b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	; 0x30
 80022b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80022ba:	e07a      	b.n	80023b2 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db77      	blt.n	80023b2 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d004      	beq.n	80022d8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	3304      	adds	r3, #4
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f806 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff88 	bl	80021f0 <prvSampleTimeNow>
 80022e0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b09      	cmp	r3, #9
 80022e6:	d863      	bhi.n	80023b0 <prvProcessReceivedCommands+0xfc>
 80022e8:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <prvProcessReceivedCommands+0x3c>)
 80022ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ee:	bf00      	nop
 80022f0:	08002319 	.word	0x08002319
 80022f4:	08002319 	.word	0x08002319
 80022f8:	08002319 	.word	0x08002319
 80022fc:	080023b3 	.word	0x080023b3
 8002300:	08002373 	.word	0x08002373
 8002304:	080023a9 	.word	0x080023a9
 8002308:	08002319 	.word	0x08002319
 800230c:	08002319 	.word	0x08002319
 8002310:	080023b3 	.word	0x080023b3
 8002314:	08002373 	.word	0x08002373
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	18d1      	adds	r1, r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a3a      	ldr	r2, [r7, #32]
 8002324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002326:	f7ff ff83 	bl	8002230 <prvInsertTimerInActiveList>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d040      	beq.n	80023b2 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002336:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d138      	bne.n	80023b2 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	441a      	add	r2, r3
 8002348:	2300      	movs	r3, #0
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	2300      	movs	r3, #0
 800234e:	2100      	movs	r1, #0
 8002350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002352:	f7ff fe3d 	bl	8001fd0 <xTimerGenericCommand>
 8002356:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d129      	bne.n	80023b2 <prvProcessReceivedCommands+0xfe>
 800235e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002362:	f383 8811 	msr	BASEPRI, r3
 8002366:	f3bf 8f6f 	isb	sy
 800236a:	f3bf 8f4f 	dsb	sy
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	e7fe      	b.n	8002370 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <prvProcessReceivedCommands+0xe0>
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	e7fe      	b.n	8002392 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	18d1      	adds	r1, r2, r3
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	6a3a      	ldr	r2, [r7, #32]
 80023a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023a2:	f7ff ff45 	bl	8002230 <prvInsertTimerInActiveList>
					break;
 80023a6:	e004      	b.n	80023b2 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80023a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023aa:	f7fe f9f0 	bl	800078e <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80023ae:	e000      	b.n	80023b2 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 80023b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <prvProcessReceivedCommands+0x120>)
 80023b4:	6818      	ldr	r0, [r3, #0]
 80023b6:	f107 0108 	add.w	r1, r7, #8
 80023ba:	2300      	movs	r3, #0
 80023bc:	2200      	movs	r2, #0
 80023be:	f7fe fc47 	bl	8000c50 <xQueueGenericReceive>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f47f af79 	bne.w	80022bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80023ca:	bf00      	nop
 80023cc:	3728      	adds	r7, #40	; 0x28
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	200001d4 	.word	0x200001d4

080023d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80023de:	e044      	b.n	800246a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <prvSwitchTimerLists+0xb8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80023ea:	4b29      	ldr	r3, [pc, #164]	; (8002490 <prvSwitchTimerLists+0xb8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	3304      	adds	r3, #4
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fd ff73 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	6938      	ldr	r0, [r7, #16]
 8002404:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d12d      	bne.n	800246a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	4413      	add	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002418:	68fa      	ldr	r2, [r7, #12]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	d90e      	bls.n	800243e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800242c:	4b18      	ldr	r3, [pc, #96]	; (8002490 <prvSwitchTimerLists+0xb8>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	3304      	adds	r3, #4
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f7fd ff1b 	bl	8000272 <vListInsert>
 800243c:	e015      	b.n	800246a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800243e:	2300      	movs	r3, #0
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2300      	movs	r3, #0
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	2100      	movs	r1, #0
 8002448:	6938      	ldr	r0, [r7, #16]
 800244a:	f7ff fdc1 	bl	8001fd0 <xTimerGenericCommand>
 800244e:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <prvSwitchTimerLists+0x92>
 8002456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800245a:	f383 8811 	msr	BASEPRI, r3
 800245e:	f3bf 8f6f 	isb	sy
 8002462:	f3bf 8f4f 	dsb	sy
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	e7fe      	b.n	8002468 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <prvSwitchTimerLists+0xb8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1b5      	bne.n	80023e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002474:	4b06      	ldr	r3, [pc, #24]	; (8002490 <prvSwitchTimerLists+0xb8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <prvSwitchTimerLists+0xbc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a04      	ldr	r2, [pc, #16]	; (8002490 <prvSwitchTimerLists+0xb8>)
 8002480:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002482:	4a04      	ldr	r2, [pc, #16]	; (8002494 <prvSwitchTimerLists+0xbc>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6013      	str	r3, [r2, #0]
}
 8002488:	bf00      	nop
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	200001cc 	.word	0x200001cc
 8002494:	200001d0 	.word	0x200001d0

08002498 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800249c:	f7fe f850 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <prvCheckForValidListAndQueue+0x54>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d11d      	bne.n	80024e4 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80024a8:	4811      	ldr	r0, [pc, #68]	; (80024f0 <prvCheckForValidListAndQueue+0x58>)
 80024aa:	f7fd fe91 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80024ae:	4811      	ldr	r0, [pc, #68]	; (80024f4 <prvCheckForValidListAndQueue+0x5c>)
 80024b0:	f7fd fe8e 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <prvCheckForValidListAndQueue+0x60>)
 80024b6:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <prvCheckForValidListAndQueue+0x58>)
 80024b8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <prvCheckForValidListAndQueue+0x64>)
 80024bc:	4a0d      	ldr	r2, [pc, #52]	; (80024f4 <prvCheckForValidListAndQueue+0x5c>)
 80024be:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80024c0:	2200      	movs	r2, #0
 80024c2:	210c      	movs	r1, #12
 80024c4:	2005      	movs	r0, #5
 80024c6:	f7fe f9dd 	bl	8000884 <xQueueGenericCreate>
 80024ca:	4602      	mov	r2, r0
 80024cc:	4b07      	ldr	r3, [pc, #28]	; (80024ec <prvCheckForValidListAndQueue+0x54>)
 80024ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80024d0:	4b06      	ldr	r3, [pc, #24]	; (80024ec <prvCheckForValidListAndQueue+0x54>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <prvCheckForValidListAndQueue+0x54>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4908      	ldr	r1, [pc, #32]	; (8002500 <prvCheckForValidListAndQueue+0x68>)
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fdd8 	bl	8001094 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80024e4:	f7fe f85a 	bl	800059c <vPortExitCritical>
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	200001d4 	.word	0x200001d4
 80024f0:	200001a4 	.word	0x200001a4
 80024f4:	200001b8 	.word	0x200001b8
 80024f8:	200001cc 	.word	0x200001cc
 80024fc:	200001d0 	.word	0x200001d0
 8002500:	08002e38 	.word	0x08002e38

08002504 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <DAC_SetChannel1Data+0x34>)
 8002516:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	3308      	adds	r3, #8
 8002520:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	461a      	mov	r2, r3
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	6013      	str	r3, [r2, #0]
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40007400 	.word	0x40007400

0800253c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <DMA_Init+0xac>)
 8002554:	4013      	ands	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002566:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002572:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800257e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002584:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800258a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002590:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0307 	bic.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	4313      	orrs	r3, r2
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	60da      	str	r2, [r3, #12]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	f01c803f 	.word	0xf01c803f

080025ec <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80025f8:	78fb      	ldrb	r3, [r7, #3]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f043 0201 	orr.w	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800260a:	e005      	b.n	8002618 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f023 0201 	bic.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	601a      	str	r2, [r3, #0]
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e001      	b.n	8002646 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a15      	ldr	r2, [pc, #84]	; (80026c0 <DMA_GetFlagStatus+0x6c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d802      	bhi.n	8002674 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <DMA_GetFlagStatus+0x70>)
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	e001      	b.n	8002678 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <DMA_GetFlagStatus+0x74>)
 8002676:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e002      	b.n	8002690 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002696:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800269a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	4013      	ands	r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80026a6:	2301      	movs	r3, #1
 80026a8:	75fb      	strb	r3, [r7, #23]
 80026aa:	e001      	b.n	80026b0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80026ac:	2300      	movs	r3, #0
 80026ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	4002640f 	.word	0x4002640f
 80026c4:	40026000 	.word	0x40026000
 80026c8:	40026400 	.word	0x40026400

080026cc <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a10      	ldr	r2, [pc, #64]	; (800271c <DMA_ClearFlag+0x50>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d802      	bhi.n	80026e4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80026de:	4b10      	ldr	r3, [pc, #64]	; (8002720 <DMA_ClearFlag+0x54>)
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e001      	b.n	80026e8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <DMA_ClearFlag+0x58>)
 80026e6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80026f8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002700:	e006      	b.n	8002710 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002708:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	6093      	str	r3, [r2, #8]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	4002640f 	.word	0x4002640f
 8002720:	40026000 	.word	0x40026000
 8002724:	40026400 	.word	0x40026400

08002728 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	819a      	strh	r2, [r3, #12]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	891b      	ldrh	r3, [r3, #8]
 800275a:	b29a      	uxth	r2, r3
 800275c:	887b      	ldrh	r3, [r7, #2]
 800275e:	4013      	ands	r3, r2
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d002      	beq.n	800276c <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
 800276a:	e001      	b.n	8002770 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800276c:	2300      	movs	r3, #0
 800276e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
}
 8002772:	4618      	mov	r0, r3
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002784:	4b38      	ldr	r3, [pc, #224]	; (8002868 <Audio_MAL_IRQHandler+0xe8>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b38      	ldr	r3, [pc, #224]	; (800286c <Audio_MAL_IRQHandler+0xec>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f7ff ff60 	bl	8002654 <DMA_GetFlagStatus>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d064      	beq.n	8002864 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 800279a:	4b35      	ldr	r3, [pc, #212]	; (8002870 <Audio_MAL_IRQHandler+0xf0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d04c      	beq.n	800283c <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80027a2:	bf00      	nop
 80027a4:	4b30      	ldr	r3, [pc, #192]	; (8002868 <Audio_MAL_IRQHandler+0xe8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff3b 	bl	8002624 <DMA_GetCmdStatus>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1f7      	bne.n	80027a4 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <Audio_MAL_IRQHandler+0xe8>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b2c      	ldr	r3, [pc, #176]	; (800286c <Audio_MAL_IRQHandler+0xec>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f7ff ff84 	bl	80026cc <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80027c4:	4b2b      	ldr	r3, [pc, #172]	; (8002874 <Audio_MAL_IRQHandler+0xf4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	461a      	mov	r2, r3
 80027ca:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <Audio_MAL_IRQHandler+0xf8>)
 80027cc:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <Audio_MAL_IRQHandler+0xf0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027d6:	4293      	cmp	r3, r2
 80027d8:	bf28      	it	cs
 80027da:	4613      	movcs	r3, r2
 80027dc:	4a26      	ldr	r2, [pc, #152]	; (8002878 <Audio_MAL_IRQHandler+0xf8>)
 80027de:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 80027e0:	4b21      	ldr	r3, [pc, #132]	; (8002868 <Audio_MAL_IRQHandler+0xe8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4924      	ldr	r1, [pc, #144]	; (8002878 <Audio_MAL_IRQHandler+0xf8>)
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fea8 	bl	800253c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 80027ec:	4b1e      	ldr	r3, [pc, #120]	; (8002868 <Audio_MAL_IRQHandler+0xe8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2101      	movs	r1, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fefa 	bl	80025ec <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 80027f8:	4b1e      	ldr	r3, [pc, #120]	; (8002874 <Audio_MAL_IRQHandler+0xf4>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b1c      	ldr	r3, [pc, #112]	; (8002870 <Audio_MAL_IRQHandler+0xf0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d203      	bcs.n	800280e <Audio_MAL_IRQHandler+0x8e>
 8002806:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <Audio_MAL_IRQHandler+0xf0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	e000      	b.n	8002810 <Audio_MAL_IRQHandler+0x90>
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <Audio_MAL_IRQHandler+0xfc>)
 8002810:	4413      	add	r3, r2
 8002812:	4a18      	ldr	r2, [pc, #96]	; (8002874 <Audio_MAL_IRQHandler+0xf4>)
 8002814:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <Audio_MAL_IRQHandler+0xf0>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b15      	ldr	r3, [pc, #84]	; (8002870 <Audio_MAL_IRQHandler+0xf0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002822:	428b      	cmp	r3, r1
 8002824:	bf28      	it	cs
 8002826:	460b      	movcs	r3, r1
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	4a11      	ldr	r2, [pc, #68]	; (8002870 <Audio_MAL_IRQHandler+0xf0>)
 800282c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <Audio_MAL_IRQHandler+0xe8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff fed9 	bl	80025ec <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800283a:	e013      	b.n	8002864 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <Audio_MAL_IRQHandler+0xe8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fed2 	bl	80025ec <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <Audio_MAL_IRQHandler+0xe8>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b07      	ldr	r3, [pc, #28]	; (800286c <Audio_MAL_IRQHandler+0xec>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f7ff ff3a 	bl	80026cc <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <Audio_MAL_IRQHandler+0xf4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f83c 	bl	80028dc <EVAL_AUDIO_TransferComplete_CallBack>
}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	2000000c 	.word	0x2000000c
 800286c:	20000010 	.word	0x20000010
 8002870:	20000004 	.word	0x20000004
 8002874:	20000234 	.word	0x20000234
 8002878:	20000274 	.word	0x20000274
 800287c:	0001fffe 	.word	0x0001fffe

08002880 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002884:	f7ff ff7c 	bl	8002780 <Audio_MAL_IRQHandler>
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002890:	f7ff ff76 	bl	8002780 <Audio_MAL_IRQHandler>
}
 8002894:	bf00      	nop
 8002896:	bd80      	pop	{r7, pc}

08002898 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 800289c:	2102      	movs	r1, #2
 800289e:	480d      	ldr	r0, [pc, #52]	; (80028d4 <SPI3_IRQHandler+0x3c>)
 80028a0:	f7ff ff51 	bl	8002746 <SPI_I2S_GetFlagStatus>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d011      	beq.n	80028ce <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <SPI3_IRQHandler+0x40>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d106      	bne.n	80028c0 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80028b2:	f000 f81e 	bl	80028f2 <EVAL_AUDIO_GetSampleCallBack>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4619      	mov	r1, r3
 80028ba:	2004      	movs	r0, #4
 80028bc:	f7ff fe22 	bl	8002504 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80028c0:	f000 f817 	bl	80028f2 <EVAL_AUDIO_GetSampleCallBack>
 80028c4:	4603      	mov	r3, r0
 80028c6:	4619      	mov	r1, r3
 80028c8:	4802      	ldr	r0, [pc, #8]	; (80028d4 <SPI3_IRQHandler+0x3c>)
 80028ca:	f7ff ff2d 	bl	8002728 <SPI_I2S_SendData>
  }
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40003c00 	.word	0x40003c00
 80028d8:	20000008 	.word	0x20000008

080028dc <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 80028e6:	bf00      	nop
}
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 80028f2:	b480      	push	{r7}
 80028f4:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <NVIC_SetPriorityGrouping+0x44>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002920:	4013      	ands	r3, r2
 8002922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 800292c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002936:	4a04      	ldr	r2, [pc, #16]	; (8002948 <NVIC_SetPriorityGrouping+0x44>)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	60d3      	str	r3, [r2, #12]
}
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <main>:
static xSemaphoreHandle xEventSemaphore = NULL;

/*-----------------------------------------------------------*/

int main(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af02      	add	r7, sp, #8
xTimerHandle xExampleSoftwareTimer = NULL;
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]

	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 8002956:	f000 f84f 	bl	80029f8 <prvSetupHardware>


	/* Create the queue used by the queue send and queue receive tasks.
	http://www.freertos.org/a00116.html */
	xQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 800295a:	2200      	movs	r2, #0
 800295c:	2104      	movs	r1, #4
 800295e:	2064      	movs	r0, #100	; 0x64
 8002960:	f7fd ff90 	bl	8000884 <xQueueGenericCreate>
 8002964:	4602      	mov	r2, r0
 8002966:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <main+0x78>)
 8002968:	601a      	str	r2, [r3, #0]
							sizeof( uint32_t ) );	/* The size of each item the queue holds. */
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xQueue, "MainQueue" );
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <main+0x78>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4916      	ldr	r1, [pc, #88]	; (80029c8 <main+0x7c>)
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe fb8f 	bl	8001094 <vQueueAddToRegistry>


	/* Create the semaphore used by the FreeRTOS tick hook function and the
	event semaphore task. */
	vSemaphoreCreateBinary( xEventSemaphore );
 8002976:	2203      	movs	r2, #3
 8002978:	2100      	movs	r1, #0
 800297a:	2001      	movs	r0, #1
 800297c:	f7fd ff82 	bl	8000884 <xQueueGenericCreate>
 8002980:	4602      	mov	r2, r0
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <main+0x80>)
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <main+0x80>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <main+0x50>
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <main+0x80>)
 8002990:	6818      	ldr	r0, [r3, #0]
 8002992:	2300      	movs	r3, #0
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	f7fd ffcc 	bl	8000934 <xQueueGenericSend>
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xEventSemaphore, "xEventSemaphore" );
 800299c:	4b0b      	ldr	r3, [pc, #44]	; (80029cc <main+0x80>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	490b      	ldr	r1, [pc, #44]	; (80029d0 <main+0x84>)
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fe fb76 	bl	8001094 <vQueueAddToRegistry>

	/* Start the created timer.  A block time of zero is used as the timer
	command queue cannot possibly be full here (this is the first timer to
	be created, and it is not yet running).
	http://www.freertos.org/FreeRTOS-timers-xTimerStart.html */
	xTimerStart( xExampleSoftwareTimer, 0 );
 80029a8:	f7fe fdf8 	bl	800159c <xTaskGetTickCount>
 80029ac:	4602      	mov	r2, r0
 80029ae:	2300      	movs	r3, #0
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2300      	movs	r3, #0
 80029b4:	2101      	movs	r1, #1
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff fb0a 	bl	8001fd0 <xTimerGenericCommand>

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 80029bc:	f7fe fcf8 	bl	80013b0 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 80029c0:	e7fe      	b.n	80029c0 <main+0x74>
 80029c2:	bf00      	nop
 80029c4:	200001e0 	.word	0x200001e0
 80029c8:	08002e40 	.word	0x08002e40
 80029cc:	200001e4 	.word	0x200001e4
 80029d0:	08002e4c 	.word	0x08002e4c

080029d4 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 80029d8:	e7fe      	b.n	80029d8 <vApplicationMallocFailedHook+0x4>

080029da <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 80029e4:	e7fe      	b.n	80029e4 <vApplicationStackOverflowHook+0xa>

080029e6 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
//	}
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7ff ff81 	bl	8002904 <NVIC_SetPriorityGrouping>

	xQueue = xQueueCreate(mainQUEUE_LENGTH, sizeof(queueMsg));
 8002a02:	2200      	movs	r2, #0
 8002a04:	211c      	movs	r1, #28
 8002a06:	2064      	movs	r0, #100	; 0x64
 8002a08:	f7fd ff3c 	bl	8000884 <xQueueGenericCreate>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b02      	ldr	r3, [pc, #8]	; (8002a18 <prvSetupHardware+0x20>)
 8002a10:	601a      	str	r2, [r3, #0]

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	200001e0 	.word	0x200001e0

08002a1c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a1e:	e003      	b.n	8002a28 <LoopCopyDataInit>

08002a20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002a22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a26:	3104      	adds	r1, #4

08002a28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a28:	480a      	ldr	r0, [pc, #40]	; (8002a54 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002a2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a30:	d3f6      	bcc.n	8002a20 <CopyDataInit>
  ldr  r2, =_sbss
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8002a34:	e002      	b.n	8002a3c <LoopFillZerobss>

08002a36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a38:	f842 3b04 	str.w	r3, [r2], #4

08002a3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002a3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a40:	d3f9      	bcc.n	8002a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a42:	f000 f82b 	bl	8002a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a46:	f000 f8db 	bl	8002c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a4a:	f7ff ff7f 	bl	800294c <main>
  bx  lr    
 8002a4e:	4770      	bx	lr
  ldr  r3, =_sidata
 8002a50:	08002e80 	.word	0x08002e80
  ldr  r0, =_sdata
 8002a54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a58:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002a5c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8002a60:	200002b4 	.word	0x200002b4

08002a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC_IRQHandler>

08002a66 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0
}
 8002a6a:	bf00      	nop
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002a78:	e7fe      	b.n	8002a78 <HardFault_Handler+0x4>

08002a7a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002a7e:	e7fe      	b.n	8002a7e <MemManage_Handler+0x4>

08002a80 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002a84:	e7fe      	b.n	8002a84 <BusFault_Handler+0x4>

08002a86 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002a8a:	e7fe      	b.n	8002a8a <UsageFault_Handler+0x4>

08002a8c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa0:	4a16      	ldr	r2, [pc, #88]	; (8002afc <SystemInit+0x60>)
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <SystemInit+0x60>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ab0:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <SystemInit+0x64>)
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <SystemInit+0x64>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002abc:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <SystemInit+0x64>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ac2:	4a0f      	ldr	r2, [pc, #60]	; (8002b00 <SystemInit+0x64>)
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <SystemInit+0x64>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <SystemInit+0x64>)
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	; (8002b04 <SystemInit+0x68>)
 8002ad6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ad8:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <SystemInit+0x64>)
 8002ada:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <SystemInit+0x64>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <SystemInit+0x64>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002aea:	f000 f80d 	bl	8002b08 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002aee:	4b03      	ldr	r3, [pc, #12]	; (8002afc <SystemInit+0x60>)
 8002af0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002af4:	609a      	str	r2, [r3, #8]
#endif
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	e000ed00 	.word	0xe000ed00
 8002b00:	40023800 	.word	0x40023800
 8002b04:	24003010 	.word	0x24003010

08002b08 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	2300      	movs	r3, #0
 8002b14:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002b16:	4a36      	ldr	r2, [pc, #216]	; (8002bf0 <SetSysClock+0xe8>)
 8002b18:	4b35      	ldr	r3, [pc, #212]	; (8002bf0 <SetSysClock+0xe8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b20:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <SetSysClock+0xe8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d103      	bne.n	8002b40 <SetSysClock+0x38>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002b3e:	d1f0      	bne.n	8002b22 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002b40:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <SetSysClock+0xe8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	e001      	b.n	8002b56 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002b52:	2300      	movs	r3, #0
 8002b54:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d142      	bne.n	8002be2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002b5c:	4a24      	ldr	r2, [pc, #144]	; (8002bf0 <SetSysClock+0xe8>)
 8002b5e:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <SetSysClock+0xe8>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b66:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8002b68:	4a22      	ldr	r2, [pc, #136]	; (8002bf4 <SetSysClock+0xec>)
 8002b6a:	4b22      	ldr	r3, [pc, #136]	; (8002bf4 <SetSysClock+0xec>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b72:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002b74:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <SetSysClock+0xe8>)
 8002b76:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <SetSysClock+0xe8>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <SetSysClock+0xe8>)
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <SetSysClock+0xe8>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b86:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <SetSysClock+0xe8>)
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <SetSysClock+0xe8>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002b92:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <SetSysClock+0xe8>)
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <SetSysClock+0xf0>)
 8002b98:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002b9a:	4a15      	ldr	r2, [pc, #84]	; (8002bf0 <SetSysClock+0xe8>)
 8002b9c:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <SetSysClock+0xe8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002ba6:	bf00      	nop
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <SetSysClock+0xe8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f9      	beq.n	8002ba8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002bb4:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <SetSysClock+0xf4>)
 8002bb6:	f240 6205 	movw	r2, #1541	; 0x605
 8002bba:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002bbc:	4a0c      	ldr	r2, [pc, #48]	; (8002bf0 <SetSysClock+0xe8>)
 8002bbe:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <SetSysClock+0xe8>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002bc8:	4a09      	ldr	r2, [pc, #36]	; (8002bf0 <SetSysClock+0xe8>)
 8002bca:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <SetSysClock+0xe8>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f043 0302 	orr.w	r3, r3, #2
 8002bd2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8002bd4:	bf00      	nop
 8002bd6:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <SetSysClock+0xe8>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d1f9      	bne.n	8002bd6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	07405408 	.word	0x07405408
 8002bfc:	40023c00 	.word	0x40023c00

08002c00 <__libc_init_array>:
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	4e0d      	ldr	r6, [pc, #52]	; (8002c38 <__libc_init_array+0x38>)
 8002c04:	4c0d      	ldr	r4, [pc, #52]	; (8002c3c <__libc_init_array+0x3c>)
 8002c06:	1ba4      	subs	r4, r4, r6
 8002c08:	10a4      	asrs	r4, r4, #2
 8002c0a:	2500      	movs	r5, #0
 8002c0c:	42a5      	cmp	r5, r4
 8002c0e:	d109      	bne.n	8002c24 <__libc_init_array+0x24>
 8002c10:	4e0b      	ldr	r6, [pc, #44]	; (8002c40 <__libc_init_array+0x40>)
 8002c12:	4c0c      	ldr	r4, [pc, #48]	; (8002c44 <__libc_init_array+0x44>)
 8002c14:	f000 f924 	bl	8002e60 <_init>
 8002c18:	1ba4      	subs	r4, r4, r6
 8002c1a:	10a4      	asrs	r4, r4, #2
 8002c1c:	2500      	movs	r5, #0
 8002c1e:	42a5      	cmp	r5, r4
 8002c20:	d105      	bne.n	8002c2e <__libc_init_array+0x2e>
 8002c22:	bd70      	pop	{r4, r5, r6, pc}
 8002c24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c28:	4798      	blx	r3
 8002c2a:	3501      	adds	r5, #1
 8002c2c:	e7ee      	b.n	8002c0c <__libc_init_array+0xc>
 8002c2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c32:	4798      	blx	r3
 8002c34:	3501      	adds	r5, #1
 8002c36:	e7f2      	b.n	8002c1e <__libc_init_array+0x1e>
 8002c38:	08002e78 	.word	0x08002e78
 8002c3c:	08002e78 	.word	0x08002e78
 8002c40:	08002e78 	.word	0x08002e78
 8002c44:	08002e7c 	.word	0x08002e7c

08002c48 <malloc>:
 8002c48:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <malloc+0xc>)
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	f000 b86d 	b.w	8002d2c <_malloc_r>
 8002c52:	bf00      	nop
 8002c54:	20000018 	.word	0x20000018

08002c58 <free>:
 8002c58:	4b02      	ldr	r3, [pc, #8]	; (8002c64 <free+0xc>)
 8002c5a:	4601      	mov	r1, r0
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	f000 b817 	b.w	8002c90 <_free_r>
 8002c62:	bf00      	nop
 8002c64:	20000018 	.word	0x20000018

08002c68 <memcpy>:
 8002c68:	b510      	push	{r4, lr}
 8002c6a:	1e43      	subs	r3, r0, #1
 8002c6c:	440a      	add	r2, r1
 8002c6e:	4291      	cmp	r1, r2
 8002c70:	d100      	bne.n	8002c74 <memcpy+0xc>
 8002c72:	bd10      	pop	{r4, pc}
 8002c74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c7c:	e7f7      	b.n	8002c6e <memcpy+0x6>

08002c7e <memset>:
 8002c7e:	4402      	add	r2, r0
 8002c80:	4603      	mov	r3, r0
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d100      	bne.n	8002c88 <memset+0xa>
 8002c86:	4770      	bx	lr
 8002c88:	f803 1b01 	strb.w	r1, [r3], #1
 8002c8c:	e7f9      	b.n	8002c82 <memset+0x4>
	...

08002c90 <_free_r>:
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4605      	mov	r5, r0
 8002c94:	2900      	cmp	r1, #0
 8002c96:	d045      	beq.n	8002d24 <_free_r+0x94>
 8002c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c9c:	1f0c      	subs	r4, r1, #4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	bfb8      	it	lt
 8002ca2:	18e4      	addlt	r4, r4, r3
 8002ca4:	f000 f8b0 	bl	8002e08 <__malloc_lock>
 8002ca8:	4a1f      	ldr	r2, [pc, #124]	; (8002d28 <_free_r+0x98>)
 8002caa:	6813      	ldr	r3, [r2, #0]
 8002cac:	4610      	mov	r0, r2
 8002cae:	b933      	cbnz	r3, 8002cbe <_free_r+0x2e>
 8002cb0:	6063      	str	r3, [r4, #4]
 8002cb2:	6014      	str	r4, [r2, #0]
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cba:	f000 b8a6 	b.w	8002e0a <__malloc_unlock>
 8002cbe:	42a3      	cmp	r3, r4
 8002cc0:	d90c      	bls.n	8002cdc <_free_r+0x4c>
 8002cc2:	6821      	ldr	r1, [r4, #0]
 8002cc4:	1862      	adds	r2, r4, r1
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	bf04      	itt	eq
 8002cca:	681a      	ldreq	r2, [r3, #0]
 8002ccc:	685b      	ldreq	r3, [r3, #4]
 8002cce:	6063      	str	r3, [r4, #4]
 8002cd0:	bf04      	itt	eq
 8002cd2:	1852      	addeq	r2, r2, r1
 8002cd4:	6022      	streq	r2, [r4, #0]
 8002cd6:	6004      	str	r4, [r0, #0]
 8002cd8:	e7ec      	b.n	8002cb4 <_free_r+0x24>
 8002cda:	4613      	mov	r3, r2
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	b10a      	cbz	r2, 8002ce4 <_free_r+0x54>
 8002ce0:	42a2      	cmp	r2, r4
 8002ce2:	d9fa      	bls.n	8002cda <_free_r+0x4a>
 8002ce4:	6819      	ldr	r1, [r3, #0]
 8002ce6:	1858      	adds	r0, r3, r1
 8002ce8:	42a0      	cmp	r0, r4
 8002cea:	d10b      	bne.n	8002d04 <_free_r+0x74>
 8002cec:	6820      	ldr	r0, [r4, #0]
 8002cee:	4401      	add	r1, r0
 8002cf0:	1858      	adds	r0, r3, r1
 8002cf2:	4282      	cmp	r2, r0
 8002cf4:	6019      	str	r1, [r3, #0]
 8002cf6:	d1dd      	bne.n	8002cb4 <_free_r+0x24>
 8002cf8:	6810      	ldr	r0, [r2, #0]
 8002cfa:	6852      	ldr	r2, [r2, #4]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	4401      	add	r1, r0
 8002d00:	6019      	str	r1, [r3, #0]
 8002d02:	e7d7      	b.n	8002cb4 <_free_r+0x24>
 8002d04:	d902      	bls.n	8002d0c <_free_r+0x7c>
 8002d06:	230c      	movs	r3, #12
 8002d08:	602b      	str	r3, [r5, #0]
 8002d0a:	e7d3      	b.n	8002cb4 <_free_r+0x24>
 8002d0c:	6820      	ldr	r0, [r4, #0]
 8002d0e:	1821      	adds	r1, r4, r0
 8002d10:	428a      	cmp	r2, r1
 8002d12:	bf04      	itt	eq
 8002d14:	6811      	ldreq	r1, [r2, #0]
 8002d16:	6852      	ldreq	r2, [r2, #4]
 8002d18:	6062      	str	r2, [r4, #4]
 8002d1a:	bf04      	itt	eq
 8002d1c:	1809      	addeq	r1, r1, r0
 8002d1e:	6021      	streq	r1, [r4, #0]
 8002d20:	605c      	str	r4, [r3, #4]
 8002d22:	e7c7      	b.n	8002cb4 <_free_r+0x24>
 8002d24:	bd38      	pop	{r3, r4, r5, pc}
 8002d26:	bf00      	nop
 8002d28:	200001e8 	.word	0x200001e8

08002d2c <_malloc_r>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	1ccd      	adds	r5, r1, #3
 8002d30:	f025 0503 	bic.w	r5, r5, #3
 8002d34:	3508      	adds	r5, #8
 8002d36:	2d0c      	cmp	r5, #12
 8002d38:	bf38      	it	cc
 8002d3a:	250c      	movcc	r5, #12
 8002d3c:	2d00      	cmp	r5, #0
 8002d3e:	4606      	mov	r6, r0
 8002d40:	db01      	blt.n	8002d46 <_malloc_r+0x1a>
 8002d42:	42a9      	cmp	r1, r5
 8002d44:	d903      	bls.n	8002d4e <_malloc_r+0x22>
 8002d46:	230c      	movs	r3, #12
 8002d48:	6033      	str	r3, [r6, #0]
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	bd70      	pop	{r4, r5, r6, pc}
 8002d4e:	f000 f85b 	bl	8002e08 <__malloc_lock>
 8002d52:	4a23      	ldr	r2, [pc, #140]	; (8002de0 <_malloc_r+0xb4>)
 8002d54:	6814      	ldr	r4, [r2, #0]
 8002d56:	4621      	mov	r1, r4
 8002d58:	b991      	cbnz	r1, 8002d80 <_malloc_r+0x54>
 8002d5a:	4c22      	ldr	r4, [pc, #136]	; (8002de4 <_malloc_r+0xb8>)
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	b91b      	cbnz	r3, 8002d68 <_malloc_r+0x3c>
 8002d60:	4630      	mov	r0, r6
 8002d62:	f000 f841 	bl	8002de8 <_sbrk_r>
 8002d66:	6020      	str	r0, [r4, #0]
 8002d68:	4629      	mov	r1, r5
 8002d6a:	4630      	mov	r0, r6
 8002d6c:	f000 f83c 	bl	8002de8 <_sbrk_r>
 8002d70:	1c43      	adds	r3, r0, #1
 8002d72:	d126      	bne.n	8002dc2 <_malloc_r+0x96>
 8002d74:	230c      	movs	r3, #12
 8002d76:	6033      	str	r3, [r6, #0]
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f000 f846 	bl	8002e0a <__malloc_unlock>
 8002d7e:	e7e4      	b.n	8002d4a <_malloc_r+0x1e>
 8002d80:	680b      	ldr	r3, [r1, #0]
 8002d82:	1b5b      	subs	r3, r3, r5
 8002d84:	d41a      	bmi.n	8002dbc <_malloc_r+0x90>
 8002d86:	2b0b      	cmp	r3, #11
 8002d88:	d90f      	bls.n	8002daa <_malloc_r+0x7e>
 8002d8a:	600b      	str	r3, [r1, #0]
 8002d8c:	50cd      	str	r5, [r1, r3]
 8002d8e:	18cc      	adds	r4, r1, r3
 8002d90:	4630      	mov	r0, r6
 8002d92:	f000 f83a 	bl	8002e0a <__malloc_unlock>
 8002d96:	f104 000b 	add.w	r0, r4, #11
 8002d9a:	1d23      	adds	r3, r4, #4
 8002d9c:	f020 0007 	bic.w	r0, r0, #7
 8002da0:	1ac3      	subs	r3, r0, r3
 8002da2:	d01b      	beq.n	8002ddc <_malloc_r+0xb0>
 8002da4:	425a      	negs	r2, r3
 8002da6:	50e2      	str	r2, [r4, r3]
 8002da8:	bd70      	pop	{r4, r5, r6, pc}
 8002daa:	428c      	cmp	r4, r1
 8002dac:	bf0d      	iteet	eq
 8002dae:	6863      	ldreq	r3, [r4, #4]
 8002db0:	684b      	ldrne	r3, [r1, #4]
 8002db2:	6063      	strne	r3, [r4, #4]
 8002db4:	6013      	streq	r3, [r2, #0]
 8002db6:	bf18      	it	ne
 8002db8:	460c      	movne	r4, r1
 8002dba:	e7e9      	b.n	8002d90 <_malloc_r+0x64>
 8002dbc:	460c      	mov	r4, r1
 8002dbe:	6849      	ldr	r1, [r1, #4]
 8002dc0:	e7ca      	b.n	8002d58 <_malloc_r+0x2c>
 8002dc2:	1cc4      	adds	r4, r0, #3
 8002dc4:	f024 0403 	bic.w	r4, r4, #3
 8002dc8:	42a0      	cmp	r0, r4
 8002dca:	d005      	beq.n	8002dd8 <_malloc_r+0xac>
 8002dcc:	1a21      	subs	r1, r4, r0
 8002dce:	4630      	mov	r0, r6
 8002dd0:	f000 f80a 	bl	8002de8 <_sbrk_r>
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	d0cd      	beq.n	8002d74 <_malloc_r+0x48>
 8002dd8:	6025      	str	r5, [r4, #0]
 8002dda:	e7d9      	b.n	8002d90 <_malloc_r+0x64>
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}
 8002dde:	bf00      	nop
 8002de0:	200001e8 	.word	0x200001e8
 8002de4:	200001ec 	.word	0x200001ec

08002de8 <_sbrk_r>:
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	4c06      	ldr	r4, [pc, #24]	; (8002e04 <_sbrk_r+0x1c>)
 8002dec:	2300      	movs	r3, #0
 8002dee:	4605      	mov	r5, r0
 8002df0:	4608      	mov	r0, r1
 8002df2:	6023      	str	r3, [r4, #0]
 8002df4:	f000 f80a 	bl	8002e0c <_sbrk>
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	d102      	bne.n	8002e02 <_sbrk_r+0x1a>
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	b103      	cbz	r3, 8002e02 <_sbrk_r+0x1a>
 8002e00:	602b      	str	r3, [r5, #0]
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	200002b0 	.word	0x200002b0

08002e08 <__malloc_lock>:
 8002e08:	4770      	bx	lr

08002e0a <__malloc_unlock>:
 8002e0a:	4770      	bx	lr

08002e0c <_sbrk>:
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <_sbrk+0x14>)
 8002e0e:	6819      	ldr	r1, [r3, #0]
 8002e10:	4602      	mov	r2, r0
 8002e12:	b909      	cbnz	r1, 8002e18 <_sbrk+0xc>
 8002e14:	4903      	ldr	r1, [pc, #12]	; (8002e24 <_sbrk+0x18>)
 8002e16:	6019      	str	r1, [r3, #0]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	4402      	add	r2, r0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	4770      	bx	lr
 8002e20:	200001f0 	.word	0x200001f0
 8002e24:	200002b4 	.word	0x200002b4
 8002e28:	454c4449 	.word	0x454c4449
 8002e2c:	00000000 	.word	0x00000000
 8002e30:	20726d54 	.word	0x20726d54
 8002e34:	00637653 	.word	0x00637653
 8002e38:	51726d54 	.word	0x51726d54
 8002e3c:	00000000 	.word	0x00000000
 8002e40:	6e69614d 	.word	0x6e69614d
 8002e44:	75657551 	.word	0x75657551
 8002e48:	00000065 	.word	0x00000065
 8002e4c:	65764578 	.word	0x65764578
 8002e50:	6553746e 	.word	0x6553746e
 8002e54:	6870616d 	.word	0x6870616d
 8002e58:	0065726f 	.word	0x0065726f
 8002e5c:	00000079 	.word	0x00000079

08002e60 <_init>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	bf00      	nop
 8002e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e66:	bc08      	pop	{r3}
 8002e68:	469e      	mov	lr, r3
 8002e6a:	4770      	bx	lr

08002e6c <_fini>:
 8002e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e6e:	bf00      	nop
 8002e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e72:	bc08      	pop	{r3}
 8002e74:	469e      	mov	lr, r3
 8002e76:	4770      	bx	lr
