
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  20000000  08004e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  6 .bss          0000025c  2000008c  2000008c  0002008c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200002e8  200002e8  0002008c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ea10  00000000  00000000  000200ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024c0  00000000  00000000  0002eaca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ca8  00000000  00000000  00030f90  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ba0  00000000  00000000  00031c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005a01  00000000  00000000  000327d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000046e4  00000000  00000000  000381d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c8bd  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000039e4  00000000  00000000  0003c93c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e48 	.word	0x08004e48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000090 	.word	0x20000090
 80001cc:	08004e48 	.word	0x08004e48

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	200000b0 	.word	0x200000b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	200000a8 	.word	0x200000a8
 8000530:	200000ac 	.word	0x200000ac
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 fb3c 	bl	8001c9c <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	200000b0 	.word	0x200000b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 fa50 	bl	8001b14 <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000024 	.word	0x20000024
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	200000a8 	.word	0x200000a8
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	200000ac 	.word	0x200000ac

08000760 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8000768:	f001 f908 	bl	800197c <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f003 fdf5 	bl	800435c <malloc>
 8000772:	4603      	mov	r3, r0
 8000774:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000776:	f001 f90f 	bl	8001998 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <pvPortMalloc+0x24>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8000780:	f003 fa2e 	bl	8003be0 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 8000784:	68fb      	ldr	r3, [r7, #12]
}
 8000786:	4618      	mov	r0, r3
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	if( pv )
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d006      	beq.n	80007aa <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800079c:	f001 f8ee 	bl	800197c <vTaskSuspendAll>
		{
			free( pv );
 80007a0:	6878      	ldr	r0, [r7, #4]
 80007a2:	f003 fde3 	bl	800436c <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 80007a6:	f001 f8f7 	bl	8001998 <xTaskResumeAll>
	}
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d109      	bne.n	80007dc <xQueueGenericReset+0x28>
 80007c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007cc:	f383 8811 	msr	BASEPRI, r3
 80007d0:	f3bf 8f6f 	isb	sy
 80007d4:	f3bf 8f4f 	dsb	sy
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	e7fe      	b.n	80007da <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80007dc:	f7ff feb0 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007e8:	68f9      	ldr	r1, [r7, #12]
 80007ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80007ec:	fb01 f303 	mul.w	r3, r1, r3
 80007f0:	441a      	add	r2, r3
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2200      	movs	r2, #0
 80007fa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800080c:	3b01      	subs	r3, #1
 800080e:	68f9      	ldr	r1, [r7, #12]
 8000810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000812:	fb01 f303 	mul.w	r3, r1, r3
 8000816:	441a      	add	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	22ff      	movs	r2, #255	; 0xff
 8000820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	22ff      	movs	r2, #255	; 0xff
 8000828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d114      	bne.n	800085c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	691b      	ldr	r3, [r3, #16]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d01a      	beq.n	8000870 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	3310      	adds	r3, #16
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fafa 	bl	8001e38 <xTaskRemoveFromEventList>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d012      	beq.n	8000870 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <xQueueGenericReset+0xcc>)
 800084c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	f3bf 8f4f 	dsb	sy
 8000856:	f3bf 8f6f 	isb	sy
 800085a:	e009      	b.n	8000870 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	3310      	adds	r3, #16
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fcb5 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3324      	adds	r3, #36	; 0x24
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fcb0 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000870:	f7ff fe94 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000874:	2301      	movs	r3, #1
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000ed04 	.word	0xe000ed04

08000884 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af02      	add	r7, sp, #8
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	4613      	mov	r3, r2
 8000890:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d109      	bne.n	80008ac <xQueueGenericCreate+0x28>
 8000898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	e7fe      	b.n	80008aa <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d102      	bne.n	80008b8 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61fb      	str	r3, [r7, #28]
 80008b6:	e004      	b.n	80008c2 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	fb02 f303 	mul.w	r3, r2, r3
 80008c0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3348      	adds	r3, #72	; 0x48
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ff4a 	bl	8000760 <pvPortMalloc>
 80008cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d00b      	beq.n	80008ec <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	3348      	adds	r3, #72	; 0x48
 80008d8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	4613      	mov	r3, r2
 80008e2:	697a      	ldr	r2, [r7, #20]
 80008e4:	68b9      	ldr	r1, [r7, #8]
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f000 f805 	bl	80008f6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80008ec:	69bb      	ldr	r3, [r7, #24]
	}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3720      	adds	r7, #32
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b084      	sub	sp, #16
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d103      	bne.n	8000912 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	e002      	b.n	8000918 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	68ba      	ldr	r2, [r7, #8]
 8000922:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000924:	2101      	movs	r1, #1
 8000926:	69b8      	ldr	r0, [r7, #24]
 8000928:	f7ff ff44 	bl	80007b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08e      	sub	sp, #56	; 0x38
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800094a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800094c:	2b00      	cmp	r3, #0
 800094e:	d109      	bne.n	8000964 <xQueueGenericSend+0x30>
 8000950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000954:	f383 8811 	msr	BASEPRI, r3
 8000958:	f3bf 8f6f 	isb	sy
 800095c:	f3bf 8f4f 	dsb	sy
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
 8000962:	e7fe      	b.n	8000962 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d103      	bne.n	8000972 <xQueueGenericSend+0x3e>
 800096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <xQueueGenericSend+0x42>
 8000972:	2301      	movs	r3, #1
 8000974:	e000      	b.n	8000978 <xQueueGenericSend+0x44>
 8000976:	2300      	movs	r3, #0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d109      	bne.n	8000990 <xQueueGenericSend+0x5c>
 800097c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000980:	f383 8811 	msr	BASEPRI, r3
 8000984:	f3bf 8f6f 	isb	sy
 8000988:	f3bf 8f4f 	dsb	sy
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
 800098e:	e7fe      	b.n	800098e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d103      	bne.n	800099e <xQueueGenericSend+0x6a>
 8000996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099a:	2b01      	cmp	r3, #1
 800099c:	d101      	bne.n	80009a2 <xQueueGenericSend+0x6e>
 800099e:	2301      	movs	r3, #1
 80009a0:	e000      	b.n	80009a4 <xQueueGenericSend+0x70>
 80009a2:	2300      	movs	r3, #0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d109      	bne.n	80009bc <xQueueGenericSend+0x88>
 80009a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009ac:	f383 8811 	msr	BASEPRI, r3
 80009b0:	f3bf 8f6f 	isb	sy
 80009b4:	f3bf 8f4f 	dsb	sy
 80009b8:	623b      	str	r3, [r7, #32]
 80009ba:	e7fe      	b.n	80009ba <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80009bc:	f001 fc08 	bl	80021d0 <xTaskGetSchedulerState>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d102      	bne.n	80009cc <xQueueGenericSend+0x98>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d101      	bne.n	80009d0 <xQueueGenericSend+0x9c>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <xQueueGenericSend+0x9e>
 80009d0:	2300      	movs	r3, #0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d109      	bne.n	80009ea <xQueueGenericSend+0xb6>
 80009d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009da:	f383 8811 	msr	BASEPRI, r3
 80009de:	f3bf 8f6f 	isb	sy
 80009e2:	f3bf 8f4f 	dsb	sy
 80009e6:	61fb      	str	r3, [r7, #28]
 80009e8:	e7fe      	b.n	80009e8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80009ea:	f7ff fda9 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80009ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d302      	bcc.n	8000a00 <xQueueGenericSend+0xcc>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d129      	bne.n	8000a54 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000a00:	683a      	ldr	r2, [r7, #0]
 8000a02:	68b9      	ldr	r1, [r7, #8]
 8000a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a06:	f000 fadc 	bl	8000fc2 <prvCopyDataToQueue>
 8000a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d010      	beq.n	8000a36 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a16:	3324      	adds	r3, #36	; 0x24
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f001 fa0d 	bl	8001e38 <xTaskRemoveFromEventList>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d013      	beq.n	8000a4c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000a24:	4b3f      	ldr	r3, [pc, #252]	; (8000b24 <xQueueGenericSend+0x1f0>)
 8000a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	f3bf 8f4f 	dsb	sy
 8000a30:	f3bf 8f6f 	isb	sy
 8000a34:	e00a      	b.n	8000a4c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d007      	beq.n	8000a4c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000a3c:	4b39      	ldr	r3, [pc, #228]	; (8000b24 <xQueueGenericSend+0x1f0>)
 8000a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	f3bf 8f4f 	dsb	sy
 8000a48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000a4c:	f7ff fda6 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e063      	b.n	8000b1c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000a5a:	f7ff fd9f 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e05c      	b.n	8000b1c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d106      	bne.n	8000a76 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f001 fa45 	bl	8001efc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000a72:	2301      	movs	r3, #1
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000a76:	f7ff fd91 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000a7a:	f000 ff7f 	bl	800197c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000a7e:	f7ff fd5f 	bl	8000540 <vPortEnterCritical>
 8000a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a88:	b25b      	sxtb	r3, r3
 8000a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a8e:	d103      	bne.n	8000a98 <xQueueGenericSend+0x164>
 8000a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a9e:	b25b      	sxtb	r3, r3
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d103      	bne.n	8000aae <xQueueGenericSend+0x17a>
 8000aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000aae:	f7ff fd75 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000ab2:	1d3a      	adds	r2, r7, #4
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4618      	mov	r0, r3
 8000abc:	f001 fa42 	bl	8001f44 <xTaskCheckForTimeOut>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d124      	bne.n	8000b10 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000ac6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ac8:	f000 fb73 	bl	80011b2 <prvIsQueueFull>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d018      	beq.n	8000b04 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad4:	3310      	adds	r3, #16
 8000ad6:	687a      	ldr	r2, [r7, #4]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 f95e 	bl	8001d9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000ae2:	f000 fafe 	bl	80010e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000ae6:	f000 ff57 	bl	8001998 <xTaskResumeAll>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f47f af7c 	bne.w	80009ea <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <xQueueGenericSend+0x1f0>)
 8000af4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	f3bf 8f4f 	dsb	sy
 8000afe:	f3bf 8f6f 	isb	sy
 8000b02:	e772      	b.n	80009ea <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b06:	f000 faec 	bl	80010e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000b0a:	f000 ff45 	bl	8001998 <xTaskResumeAll>
 8000b0e:	e76c      	b.n	80009ea <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000b12:	f000 fae6 	bl	80010e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000b16:	f000 ff3f 	bl	8001998 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000b1a:	2300      	movs	r3, #0
		}
	}
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3738      	adds	r7, #56	; 0x38
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	e000ed04 	.word	0xe000ed04

08000b28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
 8000b34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <xQueueGenericSendFromISR+0x2c>
 8000b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
 8000b52:	e7fe      	b.n	8000b52 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <xQueueGenericSendFromISR+0x3a>
 8000b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <xQueueGenericSendFromISR+0x3e>
 8000b62:	2301      	movs	r3, #1
 8000b64:	e000      	b.n	8000b68 <xQueueGenericSendFromISR+0x40>
 8000b66:	2300      	movs	r3, #0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d109      	bne.n	8000b80 <xQueueGenericSendFromISR+0x58>
 8000b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b70:	f383 8811 	msr	BASEPRI, r3
 8000b74:	f3bf 8f6f 	isb	sy
 8000b78:	f3bf 8f4f 	dsb	sy
 8000b7c:	623b      	str	r3, [r7, #32]
 8000b7e:	e7fe      	b.n	8000b7e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d103      	bne.n	8000b8e <xQueueGenericSendFromISR+0x66>
 8000b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d101      	bne.n	8000b92 <xQueueGenericSendFromISR+0x6a>
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e000      	b.n	8000b94 <xQueueGenericSendFromISR+0x6c>
 8000b92:	2300      	movs	r3, #0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d109      	bne.n	8000bac <xQueueGenericSendFromISR+0x84>
 8000b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b9c:	f383 8811 	msr	BASEPRI, r3
 8000ba0:	f3bf 8f6f 	isb	sy
 8000ba4:	f3bf 8f4f 	dsb	sy
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	e7fe      	b.n	8000baa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000bac:	f7ff fd9a 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000bb0:	f3ef 8211 	mrs	r2, BASEPRI
 8000bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bb8:	f383 8811 	msr	BASEPRI, r3
 8000bbc:	f3bf 8f6f 	isb	sy
 8000bc0:	f3bf 8f4f 	dsb	sy
 8000bc4:	61ba      	str	r2, [r7, #24]
 8000bc6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000bc8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d302      	bcc.n	8000bde <xQueueGenericSendFromISR+0xb6>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2b02      	cmp	r3, #2
 8000bdc:	d12c      	bne.n	8000c38 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000bee:	f000 f9e8 	bl	8000fc2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000bf2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfa:	d112      	bne.n	8000c22 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d016      	beq.n	8000c32 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c06:	3324      	adds	r3, #36	; 0x24
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 f915 	bl	8001e38 <xTaskRemoveFromEventList>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00e      	beq.n	8000c32 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d00b      	beq.n	8000c32 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e007      	b.n	8000c32 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000c32:	2301      	movs	r3, #1
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000c36:	e001      	b.n	8000c3c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8000c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c3e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3738      	adds	r7, #56	; 0x38
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8000c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d109      	bne.n	8000c78 <xQueueGiveFromISR+0x28>
	__asm volatile
 8000c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c68:	f383 8811 	msr	BASEPRI, r3
 8000c6c:	f3bf 8f6f 	isb	sy
 8000c70:	f3bf 8f4f 	dsb	sy
 8000c74:	623b      	str	r3, [r7, #32]
 8000c76:	e7fe      	b.n	8000c76 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d009      	beq.n	8000c94 <xQueueGiveFromISR+0x44>
 8000c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c84:	f383 8811 	msr	BASEPRI, r3
 8000c88:	f3bf 8f6f 	isb	sy
 8000c8c:	f3bf 8f4f 	dsb	sy
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	e7fe      	b.n	8000c92 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8000c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d103      	bne.n	8000ca4 <xQueueGiveFromISR+0x54>
 8000c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d101      	bne.n	8000ca8 <xQueueGiveFromISR+0x58>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e000      	b.n	8000caa <xQueueGiveFromISR+0x5a>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d109      	bne.n	8000cc2 <xQueueGiveFromISR+0x72>
 8000cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb2:	f383 8811 	msr	BASEPRI, r3
 8000cb6:	f3bf 8f6f 	isb	sy
 8000cba:	f3bf 8f4f 	dsb	sy
 8000cbe:	61bb      	str	r3, [r7, #24]
 8000cc0:	e7fe      	b.n	8000cc0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000cc2:	f7ff fd0f 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000cc6:	f3ef 8211 	mrs	r2, BASEPRI
 8000cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cce:	f383 8811 	msr	BASEPRI, r3
 8000cd2:	f3bf 8f6f 	isb	sy
 8000cd6:	f3bf 8f4f 	dsb	sy
 8000cda:	617a      	str	r2, [r7, #20]
 8000cdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8000cde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8000ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	d92b      	bls.n	8000d4a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d112      	bne.n	8000d34 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d016      	beq.n	8000d44 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d18:	3324      	adds	r3, #36	; 0x24
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f001 f88c 	bl	8001e38 <xTaskRemoveFromEventList>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00e      	beq.n	8000d44 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	e007      	b.n	8000d44 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	b25a      	sxtb	r2, r3
 8000d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000d44:	2301      	movs	r3, #1
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
 8000d48:	e001      	b.n	8000d4e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3738      	adds	r7, #56	; 0x38
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d109      	bne.n	8000d94 <xQueueGenericReceive+0x30>
	__asm volatile
 8000d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d84:	f383 8811 	msr	BASEPRI, r3
 8000d88:	f3bf 8f6f 	isb	sy
 8000d8c:	f3bf 8f4f 	dsb	sy
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
 8000d92:	e7fe      	b.n	8000d92 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <xQueueGenericReceive+0x3e>
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <xQueueGenericReceive+0x42>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <xQueueGenericReceive+0x44>
 8000da6:	2300      	movs	r3, #0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d109      	bne.n	8000dc0 <xQueueGenericReceive+0x5c>
 8000dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000db0:	f383 8811 	msr	BASEPRI, r3
 8000db4:	f3bf 8f6f 	isb	sy
 8000db8:	f3bf 8f4f 	dsb	sy
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	e7fe      	b.n	8000dbe <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000dc0:	f001 fa06 	bl	80021d0 <xTaskGetSchedulerState>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d102      	bne.n	8000dd0 <xQueueGenericReceive+0x6c>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d101      	bne.n	8000dd4 <xQueueGenericReceive+0x70>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <xQueueGenericReceive+0x72>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d109      	bne.n	8000dee <xQueueGenericReceive+0x8a>
 8000dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dde:	f383 8811 	msr	BASEPRI, r3
 8000de2:	f3bf 8f6f 	isb	sy
 8000de6:	f3bf 8f4f 	dsb	sy
 8000dea:	61fb      	str	r3, [r7, #28]
 8000dec:	e7fe      	b.n	8000dec <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8000dee:	f7ff fba7 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d046      	beq.n	8000e8c <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8000dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e08:	f000 f945 	bl	8001096 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d121      	bne.n	8000e56 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8000e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d104      	bne.n	8000e2c <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8000e22:	f001 faed 	bl	8002400 <pvTaskIncrementMutexHeldCount>
 8000e26:	4602      	mov	r2, r0
 8000e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d027      	beq.n	8000e84 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e36:	3310      	adds	r3, #16
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fffd 	bl	8001e38 <xTaskRemoveFromEventList>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d01f      	beq.n	8000e84 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8000e44:	4b4f      	ldr	r3, [pc, #316]	; (8000f84 <xQueueGenericReceive+0x220>)
 8000e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	f3bf 8f4f 	dsb	sy
 8000e50:	f3bf 8f6f 	isb	sy
 8000e54:	e016      	b.n	8000e84 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8000e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e5a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00f      	beq.n	8000e84 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e66:	3324      	adds	r3, #36	; 0x24
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 ffe5 	bl	8001e38 <xTaskRemoveFromEventList>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d007      	beq.n	8000e84 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8000e74:	4b43      	ldr	r3, [pc, #268]	; (8000f84 <xQueueGenericReceive+0x220>)
 8000e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	f3bf 8f4f 	dsb	sy
 8000e80:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8000e84:	f7ff fb8a 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e077      	b.n	8000f7c <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d103      	bne.n	8000e9a <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000e92:	f7ff fb83 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e070      	b.n	8000f7c <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d106      	bne.n	8000eae <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 f829 	bl	8001efc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000eae:	f7ff fb75 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000eb2:	f000 fd63 	bl	800197c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000eb6:	f7ff fb43 	bl	8000540 <vPortEnterCritical>
 8000eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec6:	d103      	bne.n	8000ed0 <xQueueGenericReceive+0x16c>
 8000ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d103      	bne.n	8000ee6 <xQueueGenericReceive+0x182>
 8000ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ee6:	f7ff fb59 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000eea:	1d3a      	adds	r2, r7, #4
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 f826 	bl	8001f44 <xTaskCheckForTimeOut>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d131      	bne.n	8000f62 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f00:	f000 f941 	bl	8001186 <prvIsQueueEmpty>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d025      	beq.n	8000f56 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d108      	bne.n	8000f24 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8000f12:	f7ff fb15 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8000f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 f976 	bl	800220c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8000f20:	f7ff fb3c 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f26:	3324      	adds	r3, #36	; 0x24
 8000f28:	687a      	ldr	r2, [r7, #4]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 ff35 	bl	8001d9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8000f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f34:	f000 f8d5 	bl	80010e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8000f38:	f000 fd2e 	bl	8001998 <xTaskResumeAll>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f47f af55 	bne.w	8000dee <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <xQueueGenericReceive+0x220>)
 8000f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	f3bf 8f4f 	dsb	sy
 8000f50:	f3bf 8f6f 	isb	sy
 8000f54:	e74b      	b.n	8000dee <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000f56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f58:	f000 f8c3 	bl	80010e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000f5c:	f000 fd1c 	bl	8001998 <xTaskResumeAll>
 8000f60:	e745      	b.n	8000dee <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8000f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f64:	f000 f8bd 	bl	80010e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000f68:	f000 fd16 	bl	8001998 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f6e:	f000 f90a 	bl	8001186 <prvIsQueueEmpty>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f43f af3a 	beq.w	8000dee <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8000f7a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3738      	adds	r7, #56	; 0x38
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	e000ed04 	.word	0xe000ed04

08000f88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d109      	bne.n	8000fae <vQueueDelete+0x26>
 8000f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f9e:	f383 8811 	msr	BASEPRI, r3
 8000fa2:	f3bf 8f6f 	isb	sy
 8000fa6:	f3bf 8f4f 	dsb	sy
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	e7fe      	b.n	8000fac <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 f940 	bl	8001234 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f7ff fbea 	bl	800078e <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10d      	bne.n	8000ffc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d14d      	bne.n	8001084 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 f983 	bl	80022f8 <xTaskPriorityDisinherit>
 8000ff2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	e043      	b.n	8001084 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d119      	bne.n	8001036 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6898      	ldr	r0, [r3, #8]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	461a      	mov	r2, r3
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	f003 f9b5 	bl	800437c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	441a      	add	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	429a      	cmp	r2, r3
 800102a:	d32b      	bcc.n	8001084 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	e026      	b.n	8001084 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	68d8      	ldr	r0, [r3, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	461a      	mov	r2, r3
 8001040:	68b9      	ldr	r1, [r7, #8]
 8001042:	f003 f99b 	bl	800437c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	425b      	negs	r3, r3
 8001050:	441a      	add	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d207      	bcs.n	8001072 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	425b      	negs	r3, r3
 800106c:	441a      	add	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d105      	bne.n	8001084 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	3b01      	subs	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800108c:	697b      	ldr	r3, [r7, #20]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d018      	beq.n	80010da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68da      	ldr	r2, [r3, #12]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	441a      	add	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d303      	bcc.n	80010ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68d9      	ldr	r1, [r3, #12]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	461a      	mov	r2, r3
 80010d4:	6838      	ldr	r0, [r7, #0]
 80010d6:	f003 f951 	bl	800437c <memcpy>
	}
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80010ea:	f7ff fa29 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80010f6:	e011      	b.n	800111c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d012      	beq.n	8001126 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3324      	adds	r3, #36	; 0x24
 8001104:	4618      	mov	r0, r3
 8001106:	f000 fe97 	bl	8001e38 <xTaskRemoveFromEventList>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8001110:	f000 ff76 	bl	8002000 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	3b01      	subs	r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	dce9      	bgt.n	80010f8 <prvUnlockQueue+0x16>
 8001124:	e000      	b.n	8001128 <prvUnlockQueue+0x46>
					break;
 8001126:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	22ff      	movs	r2, #255	; 0xff
 800112c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001130:	f7ff fa34 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001134:	f7ff fa04 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800113e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001140:	e011      	b.n	8001166 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	691b      	ldr	r3, [r3, #16]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d012      	beq.n	8001170 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3310      	adds	r3, #16
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fe72 	bl	8001e38 <xTaskRemoveFromEventList>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800115a:	f000 ff51 	bl	8002000 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	3b01      	subs	r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001166:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800116a:	2b00      	cmp	r3, #0
 800116c:	dce9      	bgt.n	8001142 <prvUnlockQueue+0x60>
 800116e:	e000      	b.n	8001172 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001170:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	22ff      	movs	r2, #255	; 0xff
 8001176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800117a:	f7ff fa0f 	bl	800059c <vPortExitCritical>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800118e:	f7ff f9d7 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800119a:	2301      	movs	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	e001      	b.n	80011a4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80011a4:	f7ff f9fa 	bl	800059c <vPortExitCritical>

	return xReturn;
 80011a8:	68fb      	ldr	r3, [r7, #12]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80011ba:	f7ff f9c1 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d102      	bne.n	80011d0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80011ca:	2301      	movs	r3, #1
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	e001      	b.n	80011d4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80011d4:	f7ff f9e2 	bl	800059c <vPortExitCritical>

	return xReturn;
 80011d8:	68fb      	ldr	r3, [r7, #12]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	e014      	b.n	800121e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80011f4:	4a0e      	ldr	r2, [pc, #56]	; (8001230 <vQueueAddToRegistry+0x4c>)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d10b      	bne.n	8001218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001200:	490b      	ldr	r1, [pc, #44]	; (8001230 <vQueueAddToRegistry+0x4c>)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800120a:	4a09      	ldr	r2, [pc, #36]	; (8001230 <vQueueAddToRegistry+0x4c>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8001216:	e005      	b.n	8001224 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3301      	adds	r3, #1
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b07      	cmp	r3, #7
 8001222:	d9e7      	bls.n	80011f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001224:	bf00      	nop
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	20000228 	.word	0x20000228

08001234 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e016      	b.n	8001270 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8001242:	4a10      	ldr	r2, [pc, #64]	; (8001284 <vQueueUnregisterQueue+0x50>)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4413      	add	r3, r2
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d10b      	bne.n	800126a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8001252:	4a0c      	ldr	r2, [pc, #48]	; (8001284 <vQueueUnregisterQueue+0x50>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2100      	movs	r1, #0
 8001258:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800125c:	4a09      	ldr	r2, [pc, #36]	; (8001284 <vQueueUnregisterQueue+0x50>)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	00db      	lsls	r3, r3, #3
 8001262:	4413      	add	r3, r2
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
				break;
 8001268:	e005      	b.n	8001276 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	3301      	adds	r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b07      	cmp	r3, #7
 8001274:	d9e5      	bls.n	8001242 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000228 	.word	0x20000228

08001288 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001298:	f7ff f952 	bl	8000540 <vPortEnterCritical>
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d103      	bne.n	80012b2 <vQueueWaitForMessageRestricted+0x2a>
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012be:	d103      	bne.n	80012c8 <vQueueWaitForMessageRestricted+0x40>
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80012c8:	f7ff f968 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d106      	bne.n	80012e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3324      	adds	r3, #36	; 0x24
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	68b9      	ldr	r1, [r7, #8]
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fd81 	bl	8001de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff fefd 	bl	80010e2 <prvUnlockQueue>
	}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	; 0x30
 80012f4:	af04      	add	r7, sp, #16
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	4613      	mov	r3, r2
 80012fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fa2b 	bl	8000760 <pvPortMalloc>
 800130a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00e      	beq.n	8001330 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001312:	2050      	movs	r0, #80	; 0x50
 8001314:	f7ff fa24 	bl	8000760 <pvPortMalloc>
 8001318:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	631a      	str	r2, [r3, #48]	; 0x30
 8001326:	e005      	b.n	8001334 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001328:	6978      	ldr	r0, [r7, #20]
 800132a:	f7ff fa30 	bl	800078e <vPortFree>
 800132e:	e001      	b.n	8001334 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d013      	beq.n	8001362 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800133a:	88fa      	ldrh	r2, [r7, #6]
 800133c:	2300      	movs	r3, #0
 800133e:	9303      	str	r3, [sp, #12]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f000 f80e 	bl	8001372 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001356:	69f8      	ldr	r0, [r7, #28]
 8001358:	f000 f892 	bl	8001480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800135c:	2301      	movs	r3, #1
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	e002      	b.n	8001368 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
 8001366:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001368:	69bb      	ldr	r3, [r7, #24]
	}
 800136a:	4618      	mov	r0, r3
 800136c:	3720      	adds	r7, #32
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b088      	sub	sp, #32
 8001376:	af00      	add	r7, sp, #0
 8001378:	60f8      	str	r0, [r7, #12]
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001382:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	461a      	mov	r2, r3
 800138a:	21a5      	movs	r1, #165	; 0xa5
 800138c:	f003 f801 	bl	8004392 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800139a:	3b01      	subs	r3, #1
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	f023 0307 	bic.w	r3, r3, #7
 80013a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <prvInitialiseNewTask+0x56>
 80013b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013b8:	f383 8811 	msr	BASEPRI, r3
 80013bc:	f3bf 8f6f 	isb	sy
 80013c0:	f3bf 8f4f 	dsb	sy
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e7fe      	b.n	80013c6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
 80013cc:	e012      	b.n	80013f4 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	4413      	add	r3, r2
 80013d4:	7819      	ldrb	r1, [r3, #0]
 80013d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	4413      	add	r3, r2
 80013dc:	3334      	adds	r3, #52	; 0x34
 80013de:	460a      	mov	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	3301      	adds	r3, #1
 80013f2:	61fb      	str	r3, [r7, #28]
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	2b09      	cmp	r3, #9
 80013f8:	d9e9      	bls.n	80013ce <prvInitialiseNewTask+0x5c>
 80013fa:	e000      	b.n	80013fe <prvInitialiseNewTask+0x8c>
		{
			break;
 80013fc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80013fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001400:	2200      	movs	r2, #0
 8001402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	2b04      	cmp	r3, #4
 800140a:	d901      	bls.n	8001410 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800140c:	2304      	movs	r3, #4
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001414:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800141a:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 800141c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141e:	2200      	movs	r2, #0
 8001420:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001424:	3304      	adds	r3, #4
 8001426:	4618      	mov	r0, r3
 8001428:	f7fe fef2 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800142c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142e:	3318      	adds	r3, #24
 8001430:	4618      	mov	r0, r3
 8001432:	f7fe feed 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800143a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143e:	f1c3 0205 	rsb	r2, r3, #5
 8001442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001444:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800144c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800144e:	2200      	movs	r2, #0
 8001450:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001454:	2200      	movs	r2, #0
 8001456:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	68f9      	ldr	r1, [r7, #12]
 800145e:	69b8      	ldr	r0, [r7, #24]
 8001460:	f7fe ff6a 	bl	8000338 <pxPortInitialiseStack>
 8001464:	4602      	mov	r2, r0
 8001466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001468:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800146a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001476:	bf00      	nop
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001488:	f7ff f85a 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <prvAddNewTaskToReadyList+0xb8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a29      	ldr	r2, [pc, #164]	; (8001538 <prvAddNewTaskToReadyList+0xb8>)
 8001494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <prvAddNewTaskToReadyList+0xbc>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800149e:	4a27      	ldr	r2, [pc, #156]	; (800153c <prvAddNewTaskToReadyList+0xbc>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <prvAddNewTaskToReadyList+0xb8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d110      	bne.n	80014ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80014ac:	f000 fdce 	bl	800204c <prvInitialiseTaskLists>
 80014b0:	e00d      	b.n	80014ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <prvAddNewTaskToReadyList+0xc0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80014ba:	4b20      	ldr	r3, [pc, #128]	; (800153c <prvAddNewTaskToReadyList+0xbc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d802      	bhi.n	80014ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80014c8:	4a1c      	ldr	r2, [pc, #112]	; (800153c <prvAddNewTaskToReadyList+0xbc>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <prvAddNewTaskToReadyList+0xc4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <prvAddNewTaskToReadyList+0xc4>)
 80014d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014dc:	2201      	movs	r2, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	4b19      	ldr	r3, [pc, #100]	; (8001548 <prvAddNewTaskToReadyList+0xc8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <prvAddNewTaskToReadyList+0xc8>)
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4a15      	ldr	r2, [pc, #84]	; (800154c <prvAddNewTaskToReadyList+0xcc>)
 80014f8:	441a      	add	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3304      	adds	r3, #4
 80014fe:	4619      	mov	r1, r3
 8001500:	4610      	mov	r0, r2
 8001502:	f7fe fe92 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001506:	f7ff f849 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <prvAddNewTaskToReadyList+0xc0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00e      	beq.n	8001530 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <prvAddNewTaskToReadyList+0xbc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <prvAddNewTaskToReadyList+0xd0>)
 8001522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000188 	.word	0x20000188
 800153c:	200000b0 	.word	0x200000b0
 8001540:	20000194 	.word	0x20000194
 8001544:	200001a4 	.word	0x200001a4
 8001548:	20000190 	.word	0x20000190
 800154c:	200000b4 	.word	0x200000b4
 8001550:	e000ed04 	.word	0xe000ed04

08001554 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800155c:	f7fe fff0 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d102      	bne.n	800156c <vTaskDelete+0x18>
 8001566:	4b38      	ldr	r3, [pc, #224]	; (8001648 <vTaskDelete+0xf4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	e000      	b.n	800156e <vTaskDelete+0x1a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3304      	adds	r3, #4
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe feb5 	bl	80002e4 <uxListRemove>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d115      	bne.n	80015ac <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001584:	4931      	ldr	r1, [pc, #196]	; (800164c <vTaskDelete+0xf8>)
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	440b      	add	r3, r1
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10a      	bne.n	80015ac <vTaskDelete+0x58>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159a:	2201      	movs	r2, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43da      	mvns	r2, r3
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <vTaskDelete+0xfc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4013      	ands	r3, r2
 80015a8:	4a29      	ldr	r2, [pc, #164]	; (8001650 <vTaskDelete+0xfc>)
 80015aa:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d004      	beq.n	80015be <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	3318      	adds	r3, #24
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe fe93 	bl	80002e4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80015be:	4b25      	ldr	r3, [pc, #148]	; (8001654 <vTaskDelete+0x100>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a23      	ldr	r2, [pc, #140]	; (8001654 <vTaskDelete+0x100>)
 80015c6:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80015c8:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <vTaskDelete+0xf4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d10b      	bne.n	80015ea <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	3304      	adds	r3, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	481f      	ldr	r0, [pc, #124]	; (8001658 <vTaskDelete+0x104>)
 80015da:	f7fe fe26 	bl	800022a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <vTaskDelete+0x108>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <vTaskDelete+0x108>)
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	e009      	b.n	80015fe <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <vTaskDelete+0x10c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <vTaskDelete+0x10c>)
 80015f2:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f000 fda5 	bl	8002144 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80015fa:	f000 fdb3 	bl	8002164 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 80015fe:	f7fe ffcd 	bl	800059c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <vTaskDelete+0x110>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d01a      	beq.n	8001640 <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <vTaskDelete+0xf4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	429a      	cmp	r2, r3
 8001612:	d115      	bne.n	8001640 <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <vTaskDelete+0x114>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d009      	beq.n	8001630 <vTaskDelete+0xdc>
 800161c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001620:	f383 8811 	msr	BASEPRI, r3
 8001624:	f3bf 8f6f 	isb	sy
 8001628:	f3bf 8f4f 	dsb	sy
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	e7fe      	b.n	800162e <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <vTaskDelete+0x118>)
 8001632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f3bf 8f4f 	dsb	sy
 800163c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8001640:	bf00      	nop
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	200000b0 	.word	0x200000b0
 800164c:	200000b4 	.word	0x200000b4
 8001650:	20000190 	.word	0x20000190
 8001654:	200001a4 	.word	0x200001a4
 8001658:	2000015c 	.word	0x2000015c
 800165c:	20000170 	.word	0x20000170
 8001660:	20000188 	.word	0x20000188
 8001664:	20000194 	.word	0x20000194
 8001668:	200001b0 	.word	0x200001b0
 800166c:	e000ed04 	.word	0xe000ed04

08001670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d016      	beq.n	80016b0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <vTaskDelay+0x60>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d009      	beq.n	800169e <vTaskDelay+0x2e>
 800168a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800168e:	f383 8811 	msr	BASEPRI, r3
 8001692:	f3bf 8f6f 	isb	sy
 8001696:	f3bf 8f4f 	dsb	sy
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	e7fe      	b.n	800169c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800169e:	f000 f96d 	bl	800197c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 febf 	bl	8002428 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80016aa:	f000 f975 	bl	8001998 <xTaskResumeAll>
 80016ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d107      	bne.n	80016c6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <vTaskDelay+0x64>)
 80016b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	f3bf 8f4f 	dsb	sy
 80016c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80016c6:	bf00      	nop
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200001b0 	.word	0x200001b0
 80016d4:	e000ed04 	.word	0xe000ed04

080016d8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t *pxStateList;
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxTCB );
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <eTaskGetState+0x26>
 80016ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ee:	f383 8811 	msr	BASEPRI, r3
 80016f2:	f3bf 8f6f 	isb	sy
 80016f6:	f3bf 8f4f 	dsb	sy
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	e7fe      	b.n	80016fc <eTaskGetState+0x24>

		if( pxTCB == pxCurrentTCB )
 80016fe:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <eTaskGetState+0x9c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d102      	bne.n	800170e <eTaskGetState+0x36>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8001708:	2300      	movs	r3, #0
 800170a:	75fb      	strb	r3, [r7, #23]
 800170c:	e02d      	b.n	800176a <eTaskGetState+0x92>
		}
		else
		{
			taskENTER_CRITICAL();
 800170e:	f7fe ff17 	bl	8000540 <vPortEnterCritical>
			{
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8001718:	f7fe ff40 	bl	800059c <vPortExitCritical>

			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <eTaskGetState+0xa0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	429a      	cmp	r2, r3
 8001724:	d004      	beq.n	8001730 <eTaskGetState+0x58>
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <eTaskGetState+0xa4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	429a      	cmp	r2, r3
 800172e:	d102      	bne.n	8001736 <eTaskGetState+0x5e>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8001730:	2302      	movs	r3, #2
 8001732:	75fb      	strb	r3, [r7, #23]
 8001734:	e019      	b.n	800176a <eTaskGetState+0x92>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4a11      	ldr	r2, [pc, #68]	; (8001780 <eTaskGetState+0xa8>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d109      	bne.n	8001752 <eTaskGetState+0x7a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it block
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <eTaskGetState+0x74>
					{
						eReturn = eSuspended;
 8001746:	2303      	movs	r3, #3
 8001748:	75fb      	strb	r3, [r7, #23]
 800174a:	e00e      	b.n	800176a <eTaskGetState+0x92>
					}
					else
					{
						eReturn = eBlocked;
 800174c:	2302      	movs	r3, #2
 800174e:	75fb      	strb	r3, [r7, #23]
 8001750:	e00b      	b.n	800176a <eTaskGetState+0x92>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <eTaskGetState+0xac>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d002      	beq.n	8001760 <eTaskGetState+0x88>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d102      	bne.n	8001766 <eTaskGetState+0x8e>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8001760:	2304      	movs	r3, #4
 8001762:	75fb      	strb	r3, [r7, #23]
 8001764:	e001      	b.n	800176a <eTaskGetState+0x92>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8001766:	2301      	movs	r3, #1
 8001768:	75fb      	strb	r3, [r7, #23]
			}
		}

		return eReturn;
 800176a:	7dfb      	ldrb	r3, [r7, #23]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200000b0 	.word	0x200000b0
 8001778:	20000140 	.word	0x20000140
 800177c:	20000144 	.word	0x20000144
 8001780:	20000174 	.word	0x20000174
 8001784:	2000015c 	.word	0x2000015c

08001788 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b04      	cmp	r3, #4
 800179a:	d909      	bls.n	80017b0 <vTaskPrioritySet+0x28>
 800179c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017a0:	f383 8811 	msr	BASEPRI, r3
 80017a4:	f3bf 8f6f 	isb	sy
 80017a8:	f3bf 8f4f 	dsb	sy
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e7fe      	b.n	80017ae <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d901      	bls.n	80017ba <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80017b6:	2304      	movs	r3, #4
 80017b8:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80017ba:	f7fe fec1 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d102      	bne.n	80017ca <vTaskPrioritySet+0x42>
 80017c4:	4b43      	ldr	r3, [pc, #268]	; (80018d4 <vTaskPrioritySet+0x14c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	e000      	b.n	80017cc <vTaskPrioritySet+0x44>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d074      	beq.n	80018c6 <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d90d      	bls.n	8001800 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 80017e4:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <vTaskPrioritySet+0x14c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d00f      	beq.n	800180e <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 80017ee:	4b39      	ldr	r3, [pc, #228]	; (80018d4 <vTaskPrioritySet+0x14c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d809      	bhi.n	800180e <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
 80017fe:	e006      	b.n	800180e <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <vTaskPrioritySet+0x14c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	429a      	cmp	r2, r3
 8001808:	d101      	bne.n	800180e <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800180a:	2301      	movs	r3, #1
 800180c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001812:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	429a      	cmp	r2, r3
 800181e:	d102      	bne.n	8001826 <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	683a      	ldr	r2, [r7, #0]
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	641a      	str	r2, [r3, #64]	; 0x40
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	2b00      	cmp	r3, #0
 8001832:	db04      	blt.n	800183e <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f1c3 0205 	rsb	r2, r3, #5
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	6959      	ldr	r1, [r3, #20]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4a22      	ldr	r2, [pc, #136]	; (80018d8 <vTaskPrioritySet+0x150>)
 800184e:	4413      	add	r3, r2
 8001850:	4299      	cmp	r1, r3
 8001852:	d101      	bne.n	8001858 <vTaskPrioritySet+0xd0>
 8001854:	2301      	movs	r3, #1
 8001856:	e000      	b.n	800185a <vTaskPrioritySet+0xd2>
 8001858:	2300      	movs	r3, #0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d028      	beq.n	80018b0 <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	3304      	adds	r3, #4
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fd3e 	bl	80002e4 <uxListRemove>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800186e:	2201      	movs	r2, #1
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	4b18      	ldr	r3, [pc, #96]	; (80018dc <vTaskPrioritySet+0x154>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4013      	ands	r3, r2
 800187e:	4a17      	ldr	r2, [pc, #92]	; (80018dc <vTaskPrioritySet+0x154>)
 8001880:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001886:	2201      	movs	r2, #1
 8001888:	409a      	lsls	r2, r3
 800188a:	4b14      	ldr	r3, [pc, #80]	; (80018dc <vTaskPrioritySet+0x154>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4313      	orrs	r3, r2
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <vTaskPrioritySet+0x154>)
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001898:	4613      	mov	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <vTaskPrioritySet+0x150>)
 80018a2:	441a      	add	r2, r3
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	3304      	adds	r3, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f7fe fcbd 	bl	800022a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <vTaskPrioritySet+0x158>)
 80018b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	f3bf 8f4f 	dsb	sy
 80018c2:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80018c6:	f7fe fe69 	bl	800059c <vPortExitCritical>
	}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200000b0 	.word	0x200000b0
 80018d8:	200000b4 	.word	0x200000b4
 80018dc:	20000190 	.word	0x20000190
 80018e0:	e000ed04 	.word	0xe000ed04

080018e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <vTaskStartScheduler+0x80>)
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	2300      	movs	r3, #0
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	2300      	movs	r3, #0
 80018f4:	2282      	movs	r2, #130	; 0x82
 80018f6:	491c      	ldr	r1, [pc, #112]	; (8001968 <vTaskStartScheduler+0x84>)
 80018f8:	481c      	ldr	r0, [pc, #112]	; (800196c <vTaskStartScheduler+0x88>)
 80018fa:	f7ff fcf9 	bl	80012f0 <xTaskCreate>
 80018fe:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d102      	bne.n	800190c <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001906:	f000 fdf5 	bl	80024f4 <xTimerCreateTimerTask>
 800190a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d115      	bne.n	800193e <vTaskStartScheduler+0x5a>
 8001912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001916:	f383 8811 	msr	BASEPRI, r3
 800191a:	f3bf 8f6f 	isb	sy
 800191e:	f3bf 8f4f 	dsb	sy
 8001922:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <vTaskStartScheduler+0x8c>)
 8001926:	f04f 32ff 	mov.w	r2, #4294967295
 800192a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <vTaskStartScheduler+0x90>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <vTaskStartScheduler+0x94>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001938:	f7fe fd76 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800193c:	e00d      	b.n	800195a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d109      	bne.n	800195a <vTaskStartScheduler+0x76>
 8001946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800194a:	f383 8811 	msr	BASEPRI, r3
 800194e:	f3bf 8f6f 	isb	sy
 8001952:	f3bf 8f4f 	dsb	sy
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	e7fe      	b.n	8001958 <vTaskStartScheduler+0x74>
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200001ac 	.word	0x200001ac
 8001968:	08004c4c 	.word	0x08004c4c
 800196c:	08002019 	.word	0x08002019
 8001970:	200001a8 	.word	0x200001a8
 8001974:	20000194 	.word	0x20000194
 8001978:	2000018c 	.word	0x2000018c

0800197c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001980:	4b04      	ldr	r3, [pc, #16]	; (8001994 <vTaskSuspendAll+0x18>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3301      	adds	r3, #1
 8001986:	4a03      	ldr	r2, [pc, #12]	; (8001994 <vTaskSuspendAll+0x18>)
 8001988:	6013      	str	r3, [r2, #0]
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	200001b0 	.word	0x200001b0

08001998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <xTaskResumeAll+0x114>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <xTaskResumeAll+0x2a>
 80019ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b2:	f383 8811 	msr	BASEPRI, r3
 80019b6:	f3bf 8f6f 	isb	sy
 80019ba:	f3bf 8f4f 	dsb	sy
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	e7fe      	b.n	80019c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80019c2:	f7fe fdbd 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80019c6:	4b39      	ldr	r3, [pc, #228]	; (8001aac <xTaskResumeAll+0x114>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	4a37      	ldr	r2, [pc, #220]	; (8001aac <xTaskResumeAll+0x114>)
 80019ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019d0:	4b36      	ldr	r3, [pc, #216]	; (8001aac <xTaskResumeAll+0x114>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d161      	bne.n	8001a9c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <xTaskResumeAll+0x118>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d05d      	beq.n	8001a9c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019e0:	e02e      	b.n	8001a40 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80019e2:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <xTaskResumeAll+0x11c>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3318      	adds	r3, #24
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fc78 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	3304      	adds	r3, #4
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe fc73 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	2201      	movs	r2, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <xTaskResumeAll+0x120>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	4a2a      	ldr	r2, [pc, #168]	; (8001ab8 <xTaskResumeAll+0x120>)
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4a27      	ldr	r2, [pc, #156]	; (8001abc <xTaskResumeAll+0x124>)
 8001a1e:	441a      	add	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3304      	adds	r3, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f7fe fbff 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a30:	4b23      	ldr	r3, [pc, #140]	; (8001ac0 <xTaskResumeAll+0x128>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d302      	bcc.n	8001a40 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001a3a:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <xTaskResumeAll+0x12c>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <xTaskResumeAll+0x11c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1cc      	bne.n	80019e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001a4e:	f000 fb89 	bl	8002164 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <xTaskResumeAll+0x130>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d010      	beq.n	8001a80 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001a5e:	f000 f859 	bl	8001b14 <xTaskIncrementTick>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d002      	beq.n	8001a6e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <xTaskResumeAll+0x12c>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3b01      	subs	r3, #1
 8001a72:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f1      	bne.n	8001a5e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <xTaskResumeAll+0x130>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <xTaskResumeAll+0x12c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a8c:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <xTaskResumeAll+0x134>)
 8001a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	f3bf 8f4f 	dsb	sy
 8001a98:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001a9c:	f7fe fd7e 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001aa0:	68bb      	ldr	r3, [r7, #8]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200001b0 	.word	0x200001b0
 8001ab0:	20000188 	.word	0x20000188
 8001ab4:	20000148 	.word	0x20000148
 8001ab8:	20000190 	.word	0x20000190
 8001abc:	200000b4 	.word	0x200000b4
 8001ac0:	200000b0 	.word	0x200000b0
 8001ac4:	2000019c 	.word	0x2000019c
 8001ac8:	20000198 	.word	0x20000198
 8001acc:	e000ed04 	.word	0xe000ed04

08001ad0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001ad6:	4b05      	ldr	r3, [pc, #20]	; (8001aec <xTaskGetTickCount+0x1c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	2000018c 	.word	0x2000018c

08001af0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001af6:	f7fe fdf5 	bl	80006e4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <xTaskGetTickCountFromISR+0x20>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001b04:	683b      	ldr	r3, [r7, #0]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000018c 	.word	0x2000018c

08001b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b1e:	4b54      	ldr	r3, [pc, #336]	; (8001c70 <xTaskIncrementTick+0x15c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 8092 	bne.w	8001c4c <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001b28:	4b52      	ldr	r3, [pc, #328]	; (8001c74 <xTaskIncrementTick+0x160>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001b30:	4a50      	ldr	r2, [pc, #320]	; (8001c74 <xTaskIncrementTick+0x160>)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d11f      	bne.n	8001b7c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001b3c:	4b4e      	ldr	r3, [pc, #312]	; (8001c78 <xTaskIncrementTick+0x164>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d009      	beq.n	8001b5a <xTaskIncrementTick+0x46>
 8001b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b4a:	f383 8811 	msr	BASEPRI, r3
 8001b4e:	f3bf 8f6f 	isb	sy
 8001b52:	f3bf 8f4f 	dsb	sy
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	e7fe      	b.n	8001b58 <xTaskIncrementTick+0x44>
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <xTaskIncrementTick+0x164>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	4b46      	ldr	r3, [pc, #280]	; (8001c7c <xTaskIncrementTick+0x168>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a44      	ldr	r2, [pc, #272]	; (8001c78 <xTaskIncrementTick+0x164>)
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4a44      	ldr	r2, [pc, #272]	; (8001c7c <xTaskIncrementTick+0x168>)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <xTaskIncrementTick+0x16c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	4a42      	ldr	r2, [pc, #264]	; (8001c80 <xTaskIncrementTick+0x16c>)
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	f000 faf4 	bl	8002164 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b7c:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <xTaskIncrementTick+0x170>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d34d      	bcc.n	8001c22 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b86:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <xTaskIncrementTick+0x164>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <xTaskIncrementTick+0x80>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <xTaskIncrementTick+0x82>
 8001b94:	2300      	movs	r3, #0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	; (8001c84 <xTaskIncrementTick+0x170>)
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	601a      	str	r2, [r3, #0]
					break;
 8001ba2:	e03e      	b.n	8001c22 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001ba4:	4b34      	ldr	r3, [pc, #208]	; (8001c78 <xTaskIncrementTick+0x164>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d203      	bcs.n	8001bc4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001bbc:	4a31      	ldr	r2, [pc, #196]	; (8001c84 <xTaskIncrementTick+0x170>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
						break;
 8001bc2:	e02e      	b.n	8001c22 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fb8b 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d004      	beq.n	8001be0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	3318      	adds	r3, #24
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fb82 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	2201      	movs	r2, #1
 8001be6:	409a      	lsls	r2, r3
 8001be8:	4b27      	ldr	r3, [pc, #156]	; (8001c88 <xTaskIncrementTick+0x174>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	4a26      	ldr	r2, [pc, #152]	; (8001c88 <xTaskIncrementTick+0x174>)
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <xTaskIncrementTick+0x178>)
 8001c00:	441a      	add	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3304      	adds	r3, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f7fe fb0e 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c12:	4b1f      	ldr	r3, [pc, #124]	; (8001c90 <xTaskIncrementTick+0x17c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d3b4      	bcc.n	8001b86 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c20:	e7b1      	b.n	8001b86 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c22:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <xTaskIncrementTick+0x17c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c28:	4918      	ldr	r1, [pc, #96]	; (8001c8c <xTaskIncrementTick+0x178>)
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	440b      	add	r3, r1
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d901      	bls.n	8001c3e <xTaskIncrementTick+0x12a>
			{
				xSwitchRequired = pdTRUE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( uxPendedTicks == ( UBaseType_t ) 0U )
 8001c3e:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <xTaskIncrementTick+0x180>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d109      	bne.n	8001c5a <xTaskIncrementTick+0x146>
			{
				vApplicationTickHook();
 8001c46:	f001 ffa9 	bl	8003b9c <vApplicationTickHook>
 8001c4a:	e006      	b.n	8001c5a <xTaskIncrementTick+0x146>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <xTaskIncrementTick+0x180>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <xTaskIncrementTick+0x180>)
 8001c54:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8001c56:	f001 ffa1 	bl	8003b9c <vApplicationTickHook>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <xTaskIncrementTick+0x184>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <xTaskIncrementTick+0x152>
		{
			xSwitchRequired = pdTRUE;
 8001c62:	2301      	movs	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001c66:	697b      	ldr	r3, [r7, #20]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200001b0 	.word	0x200001b0
 8001c74:	2000018c 	.word	0x2000018c
 8001c78:	20000140 	.word	0x20000140
 8001c7c:	20000144 	.word	0x20000144
 8001c80:	200001a0 	.word	0x200001a0
 8001c84:	200001a8 	.word	0x200001a8
 8001c88:	20000190 	.word	0x20000190
 8001c8c:	200000b4 	.word	0x200000b4
 8001c90:	200000b0 	.word	0x200000b0
 8001c94:	20000198 	.word	0x20000198
 8001c98:	2000019c 	.word	0x2000019c

08001c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <vTaskSwitchContext+0xec>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <vTaskSwitchContext+0xf0>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001cb0:	e065      	b.n	8001d7e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <vTaskSwitchContext+0xf0>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001cb8:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <vTaskSwitchContext+0xf4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d111      	bne.n	8001cf4 <vTaskSwitchContext+0x58>
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d10b      	bne.n	8001cf4 <vTaskSwitchContext+0x58>
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	3308      	adds	r3, #8
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d105      	bne.n	8001cf4 <vTaskSwitchContext+0x58>
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	330c      	adds	r3, #12
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d008      	beq.n	8001d06 <vTaskSwitchContext+0x6a>
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <vTaskSwitchContext+0xf4>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <vTaskSwitchContext+0xf4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3334      	adds	r3, #52	; 0x34
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f001 ff70 	bl	8003be6 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001d06:	4b23      	ldr	r3, [pc, #140]	; (8001d94 <vTaskSwitchContext+0xf8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	fab3 f383 	clz	r3, r3
 8001d12:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	f1c3 031f 	rsb	r3, r3, #31
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	491e      	ldr	r1, [pc, #120]	; (8001d98 <vTaskSwitchContext+0xfc>)
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4613      	mov	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <vTaskSwitchContext+0xa8>
	__asm volatile
 8001d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	f3bf 8f6f 	isb	sy
 8001d3c:	f3bf 8f4f 	dsb	sy
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	e7fe      	b.n	8001d42 <vTaskSwitchContext+0xa6>
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4613      	mov	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <vTaskSwitchContext+0xfc>)
 8001d50:	4413      	add	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	3308      	adds	r3, #8
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d104      	bne.n	8001d74 <vTaskSwitchContext+0xd8>
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <vTaskSwitchContext+0xf4>)
 8001d7c:	6013      	str	r3, [r2, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200001b0 	.word	0x200001b0
 8001d8c:	2000019c 	.word	0x2000019c
 8001d90:	200000b0 	.word	0x200000b0
 8001d94:	20000190 	.word	0x20000190
 8001d98:	200000b4 	.word	0x200000b4

08001d9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d109      	bne.n	8001dc0 <vTaskPlaceOnEventList+0x24>
 8001dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db0:	f383 8811 	msr	BASEPRI, r3
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	e7fe      	b.n	8001dbe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <vTaskPlaceOnEventList+0x44>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3318      	adds	r3, #24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7fe fa52 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001dce:	2101      	movs	r1, #1
 8001dd0:	6838      	ldr	r0, [r7, #0]
 8001dd2:	f000 fb29 	bl	8002428 <prvAddCurrentTaskToDelayedList>
}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200000b0 	.word	0x200000b0

08001de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <vTaskPlaceOnEventListRestricted+0x26>
 8001df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dfa:	f383 8811 	msr	BASEPRI, r3
 8001dfe:	f3bf 8f6f 	isb	sy
 8001e02:	f3bf 8f4f 	dsb	sy
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e7fe      	b.n	8001e08 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <vTaskPlaceOnEventListRestricted+0x50>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3318      	adds	r3, #24
 8001e10:	4619      	mov	r1, r3
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7fe fa09 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	68b8      	ldr	r0, [r7, #8]
 8001e28:	f000 fafe 	bl	8002428 <prvAddCurrentTaskToDelayedList>
	}
 8001e2c:	bf00      	nop
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	200000b0 	.word	0x200000b0

08001e38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <xTaskRemoveFromEventList+0x2a>
 8001e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e52:	f383 8811 	msr	BASEPRI, r3
 8001e56:	f3bf 8f6f 	isb	sy
 8001e5a:	f3bf 8f4f 	dsb	sy
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e7fe      	b.n	8001e60 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	3318      	adds	r3, #24
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fa3c 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <xTaskRemoveFromEventList+0xac>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d11c      	bne.n	8001eae <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	3304      	adds	r3, #4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fa33 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <xTaskRemoveFromEventList+0xb0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	4a16      	ldr	r2, [pc, #88]	; (8001ee8 <xTaskRemoveFromEventList+0xb0>)
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4a13      	ldr	r2, [pc, #76]	; (8001eec <xTaskRemoveFromEventList+0xb4>)
 8001e9e:	441a      	add	r2, r3
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f7fe f9bf 	bl	800022a <vListInsertEnd>
 8001eac:	e005      	b.n	8001eba <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	3318      	adds	r3, #24
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480e      	ldr	r0, [pc, #56]	; (8001ef0 <xTaskRemoveFromEventList+0xb8>)
 8001eb6:	f7fe f9b8 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <xTaskRemoveFromEventList+0xbc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d905      	bls.n	8001ed4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <xTaskRemoveFromEventList+0xc0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e001      	b.n	8001ed8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8001ed8:	697b      	ldr	r3, [r7, #20]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200001b0 	.word	0x200001b0
 8001ee8:	20000190 	.word	0x20000190
 8001eec:	200000b4 	.word	0x200000b4
 8001ef0:	20000148 	.word	0x20000148
 8001ef4:	200000b0 	.word	0x200000b0
 8001ef8:	2000019c 	.word	0x2000019c

08001efc <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <vTaskSetTimeOutState+0x22>
 8001f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f0e:	f383 8811 	msr	BASEPRI, r3
 8001f12:	f3bf 8f6f 	isb	sy
 8001f16:	f3bf 8f4f 	dsb	sy
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	e7fe      	b.n	8001f1c <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <vTaskSetTimeOutState+0x40>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <vTaskSetTimeOutState+0x44>)
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	605a      	str	r2, [r3, #4]
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	200001a0 	.word	0x200001a0
 8001f40:	2000018c 	.word	0x2000018c

08001f44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <xTaskCheckForTimeOut+0x24>
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e7fe      	b.n	8001f66 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <xTaskCheckForTimeOut+0x3e>
 8001f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f72:	f383 8811 	msr	BASEPRI, r3
 8001f76:	f3bf 8f6f 	isb	sy
 8001f7a:	f3bf 8f4f 	dsb	sy
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	e7fe      	b.n	8001f80 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001f82:	f7fe fadd 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001f86:	4b1c      	ldr	r3, [pc, #112]	; (8001ff8 <xTaskCheckForTimeOut+0xb4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d102      	bne.n	8001f9c <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e026      	b.n	8001fea <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <xTaskCheckForTimeOut+0xb8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d007      	beq.n	8001fb8 <xTaskCheckForTimeOut+0x74>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d802      	bhi.n	8001fb8 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e018      	b.n	8001fea <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d20e      	bcs.n	8001fe6 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1acb      	subs	r3, r1, r3
 8001fd4:	441a      	add	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff8e 	bl	8001efc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	e001      	b.n	8001fea <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8001fea:	f7fe fad7 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001fee:	697b      	ldr	r3, [r7, #20]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000018c 	.word	0x2000018c
 8001ffc:	200001a0 	.word	0x200001a0

08002000 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002004:	4b03      	ldr	r3, [pc, #12]	; (8002014 <vTaskMissedYield+0x14>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	2000019c 	.word	0x2000019c

08002018 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002020:	f000 f854 	bl	80020cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <prvIdleTask+0x2c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d907      	bls.n	800203c <prvIdleTask+0x24>
			{
				taskYIELD();
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <prvIdleTask+0x30>)
 800202e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f3bf 8f4f 	dsb	sy
 8002038:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800203c:	f001 fdda 	bl	8003bf4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002040:	e7ee      	b.n	8002020 <prvIdleTask+0x8>
 8002042:	bf00      	nop
 8002044:	200000b4 	.word	0x200000b4
 8002048:	e000ed04 	.word	0xe000ed04

0800204c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002052:	2300      	movs	r3, #0
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	e00c      	b.n	8002072 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <prvInitialiseTaskLists+0x60>)
 8002064:	4413      	add	r3, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f8b2 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b04      	cmp	r3, #4
 8002076:	d9ef      	bls.n	8002058 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <prvInitialiseTaskLists+0x64>)
 800207a:	f7fe f8a9 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800207e:	480d      	ldr	r0, [pc, #52]	; (80020b4 <prvInitialiseTaskLists+0x68>)
 8002080:	f7fe f8a6 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002084:	480c      	ldr	r0, [pc, #48]	; (80020b8 <prvInitialiseTaskLists+0x6c>)
 8002086:	f7fe f8a3 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800208a:	480c      	ldr	r0, [pc, #48]	; (80020bc <prvInitialiseTaskLists+0x70>)
 800208c:	f7fe f8a0 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002090:	480b      	ldr	r0, [pc, #44]	; (80020c0 <prvInitialiseTaskLists+0x74>)
 8002092:	f7fe f89d 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <prvInitialiseTaskLists+0x78>)
 8002098:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <prvInitialiseTaskLists+0x64>)
 800209a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800209c:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <prvInitialiseTaskLists+0x7c>)
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <prvInitialiseTaskLists+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200000b4 	.word	0x200000b4
 80020b0:	20000118 	.word	0x20000118
 80020b4:	2000012c 	.word	0x2000012c
 80020b8:	20000148 	.word	0x20000148
 80020bc:	2000015c 	.word	0x2000015c
 80020c0:	20000174 	.word	0x20000174
 80020c4:	20000140 	.word	0x20000140
 80020c8:	20000144 	.word	0x20000144

080020cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020d2:	e028      	b.n	8002126 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80020d4:	f7ff fc52 	bl	800197c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <prvCheckTasksWaitingTermination+0x6c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 80020e8:	f7ff fc56 	bl	8001998 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d119      	bne.n	8002126 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 80020f2:	f7fe fa25 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <prvCheckTasksWaitingTermination+0x6c>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	3304      	adds	r3, #4
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe f8ee 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <prvCheckTasksWaitingTermination+0x70>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3b01      	subs	r3, #1
 800210e:	4a0b      	ldr	r2, [pc, #44]	; (800213c <prvCheckTasksWaitingTermination+0x70>)
 8002110:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <prvCheckTasksWaitingTermination+0x74>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	3b01      	subs	r3, #1
 8002118:	4a09      	ldr	r2, [pc, #36]	; (8002140 <prvCheckTasksWaitingTermination+0x74>)
 800211a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800211c:	f7fe fa3e 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002120:	6838      	ldr	r0, [r7, #0]
 8002122:	f000 f80f 	bl	8002144 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <prvCheckTasksWaitingTermination+0x74>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1d2      	bne.n	80020d4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000015c 	.word	0x2000015c
 800213c:	20000188 	.word	0x20000188
 8002140:	20000170 	.word	0x20000170

08002144 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fb1c 	bl	800078e <vPortFree>
			vPortFree( pxTCB );
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7fe fb19 	bl	800078e <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800215c:	bf00      	nop
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <prvResetNextTaskUnblockTime+0x44>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <prvResetNextTaskUnblockTime+0x14>
 8002174:	2301      	movs	r3, #1
 8002176:	e000      	b.n	800217a <prvResetNextTaskUnblockTime+0x16>
 8002178:	2300      	movs	r3, #0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <prvResetNextTaskUnblockTime+0x48>)
 8002180:	f04f 32ff 	mov.w	r2, #4294967295
 8002184:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002186:	e008      	b.n	800219a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002188:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <prvResetNextTaskUnblockTime+0x44>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <prvResetNextTaskUnblockTime+0x48>)
 8002198:	6013      	str	r3, [r2, #0]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000140 	.word	0x20000140
 80021ac:	200001a8 	.word	0x200001a8

080021b0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <xTaskGetCurrentTaskHandle+0x1c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	607b      	str	r3, [r7, #4]

		return xReturn;
 80021bc:	687b      	ldr	r3, [r7, #4]
	}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	200000b0 	.word	0x200000b0

080021d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <xTaskGetSchedulerState+0x34>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d102      	bne.n	80021e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80021de:	2301      	movs	r3, #1
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	e008      	b.n	80021f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <xTaskGetSchedulerState+0x38>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d102      	bne.n	80021f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80021ec:	2302      	movs	r3, #2
 80021ee:	607b      	str	r3, [r7, #4]
 80021f0:	e001      	b.n	80021f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80021f6:	687b      	ldr	r3, [r7, #4]
	}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	20000194 	.word	0x20000194
 8002208:	200001b0 	.word	0x200001b0

0800220c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d062      	beq.n	80022e4 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002222:	4b32      	ldr	r3, [pc, #200]	; (80022ec <vTaskPriorityInherit+0xe0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	429a      	cmp	r2, r3
 800222a:	d25b      	bcs.n	80022e4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db06      	blt.n	8002242 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002234:	4b2d      	ldr	r3, [pc, #180]	; (80022ec <vTaskPriorityInherit+0xe0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	f1c3 0205 	rsb	r2, r3, #5
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6959      	ldr	r1, [r3, #20]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4a27      	ldr	r2, [pc, #156]	; (80022f0 <vTaskPriorityInherit+0xe4>)
 8002254:	4413      	add	r3, r2
 8002256:	4299      	cmp	r1, r3
 8002258:	d101      	bne.n	800225e <vTaskPriorityInherit+0x52>
 800225a:	2301      	movs	r3, #1
 800225c:	e000      	b.n	8002260 <vTaskPriorityInherit+0x54>
 800225e:	2300      	movs	r3, #0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d03a      	beq.n	80022da <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3304      	adds	r3, #4
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f83b 	bl	80002e4 <uxListRemove>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d115      	bne.n	80022a0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002278:	491d      	ldr	r1, [pc, #116]	; (80022f0 <vTaskPriorityInherit+0xe4>)
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <vTaskPriorityInherit+0x94>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228e:	2201      	movs	r2, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43da      	mvns	r2, r3
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <vTaskPriorityInherit+0xe8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4013      	ands	r3, r2
 800229c:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <vTaskPriorityInherit+0xe8>)
 800229e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80022a0:	4b12      	ldr	r3, [pc, #72]	; (80022ec <vTaskPriorityInherit+0xe0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ae:	2201      	movs	r2, #1
 80022b0:	409a      	lsls	r2, r3
 80022b2:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <vTaskPriorityInherit+0xe8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <vTaskPriorityInherit+0xe8>)
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4a09      	ldr	r2, [pc, #36]	; (80022f0 <vTaskPriorityInherit+0xe4>)
 80022ca:	441a      	add	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3304      	adds	r3, #4
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f7fd ffa9 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80022d8:	e004      	b.n	80022e4 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80022da:	4b04      	ldr	r3, [pc, #16]	; (80022ec <vTaskPriorityInherit+0xe0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	200000b0 	.word	0x200000b0
 80022f0:	200000b4 	.word	0x200000b4
 80022f4:	20000190 	.word	0x20000190

080022f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d06c      	beq.n	80023e8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <xTaskPriorityDisinherit+0xfc>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	429a      	cmp	r2, r3
 8002316:	d009      	beq.n	800232c <xTaskPriorityDisinherit+0x34>
 8002318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231c:	f383 8811 	msr	BASEPRI, r3
 8002320:	f3bf 8f6f 	isb	sy
 8002324:	f3bf 8f4f 	dsb	sy
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	e7fe      	b.n	800232a <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	2b00      	cmp	r3, #0
 8002332:	d109      	bne.n	8002348 <xTaskPriorityDisinherit+0x50>
 8002334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	e7fe      	b.n	8002346 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	1e5a      	subs	r2, r3, #1
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	429a      	cmp	r2, r3
 800235c:	d044      	beq.n	80023e8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	2b00      	cmp	r3, #0
 8002364:	d140      	bne.n	80023e8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	3304      	adds	r3, #4
 800236a:	4618      	mov	r0, r3
 800236c:	f7fd ffba 	bl	80002e4 <uxListRemove>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d115      	bne.n	80023a2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237a:	491f      	ldr	r1, [pc, #124]	; (80023f8 <xTaskPriorityDisinherit+0x100>)
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10a      	bne.n	80023a2 <xTaskPriorityDisinherit+0xaa>
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	2201      	movs	r2, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	4b18      	ldr	r3, [pc, #96]	; (80023fc <xTaskPriorityDisinherit+0x104>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4013      	ands	r3, r2
 800239e:	4a17      	ldr	r2, [pc, #92]	; (80023fc <xTaskPriorityDisinherit+0x104>)
 80023a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	f1c3 0205 	rsb	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	2201      	movs	r2, #1
 80023bc:	409a      	lsls	r2, r3
 80023be:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <xTaskPriorityDisinherit+0x104>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <xTaskPriorityDisinherit+0x104>)
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4a08      	ldr	r2, [pc, #32]	; (80023f8 <xTaskPriorityDisinherit+0x100>)
 80023d6:	441a      	add	r2, r3
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	3304      	adds	r3, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7fd ff23 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80023e8:	697b      	ldr	r3, [r7, #20]
	}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200000b0 	.word	0x200000b0
 80023f8:	200000b4 	.word	0x200000b4
 80023fc:	20000190 	.word	0x20000190

08002400 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002404:	4b07      	ldr	r3, [pc, #28]	; (8002424 <pvTaskIncrementMutexHeldCount+0x24>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <pvTaskIncrementMutexHeldCount+0x24>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002412:	3201      	adds	r2, #1
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8002416:	4b03      	ldr	r3, [pc, #12]	; (8002424 <pvTaskIncrementMutexHeldCount+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
	}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	200000b0 	.word	0x200000b0

08002428 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002432:	4b29      	ldr	r3, [pc, #164]	; (80024d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3304      	adds	r3, #4
 800243e:	4618      	mov	r0, r3
 8002440:	f7fd ff50 	bl	80002e4 <uxListRemove>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10b      	bne.n	8002462 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	2201      	movs	r2, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43da      	mvns	r2, r3
 8002458:	4b21      	ldr	r3, [pc, #132]	; (80024e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4013      	ands	r3, r2
 800245e:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002460:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002468:	d10a      	bne.n	8002480 <prvAddCurrentTaskToDelayedList+0x58>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d007      	beq.n	8002480 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	3304      	adds	r3, #4
 8002476:	4619      	mov	r1, r3
 8002478:	481a      	ldr	r0, [pc, #104]	; (80024e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800247a:	f7fd fed6 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800247e:	e026      	b.n	80024ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002490:	68ba      	ldr	r2, [r7, #8]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	429a      	cmp	r2, r3
 8002496:	d209      	bcs.n	80024ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002498:	4b13      	ldr	r3, [pc, #76]	; (80024e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	3304      	adds	r3, #4
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f7fd fee4 	bl	8000272 <vListInsert>
}
 80024aa:	e010      	b.n	80024ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	3304      	adds	r3, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f7fd feda 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d202      	bcs.n	80024ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80024c8:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6013      	str	r3, [r2, #0]
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000018c 	.word	0x2000018c
 80024dc:	200000b0 	.word	0x200000b0
 80024e0:	20000190 	.word	0x20000190
 80024e4:	20000174 	.word	0x20000174
 80024e8:	20000144 	.word	0x20000144
 80024ec:	20000140 	.word	0x20000140
 80024f0:	200001a8 	.word	0x200001a8

080024f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80024fe:	f000 fadd 	bl	8002abc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <xTimerCreateTimerTask+0x54>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00b      	beq.n	8002522 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800250a:	4b10      	ldr	r3, [pc, #64]	; (800254c <xTimerCreateTimerTask+0x58>)
 800250c:	9301      	str	r3, [sp, #4]
 800250e:	2303      	movs	r3, #3
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	2300      	movs	r3, #0
 8002514:	f44f 7202 	mov.w	r2, #520	; 0x208
 8002518:	490d      	ldr	r1, [pc, #52]	; (8002550 <xTimerCreateTimerTask+0x5c>)
 800251a:	480e      	ldr	r0, [pc, #56]	; (8002554 <xTimerCreateTimerTask+0x60>)
 800251c:	f7fe fee8 	bl	80012f0 <xTaskCreate>
 8002520:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <xTimerCreateTimerTask+0x48>
 8002528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800252c:	f383 8811 	msr	BASEPRI, r3
 8002530:	f3bf 8f6f 	isb	sy
 8002534:	f3bf 8f4f 	dsb	sy
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	e7fe      	b.n	800253a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800253c:	687b      	ldr	r3, [r7, #4]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200001e4 	.word	0x200001e4
 800254c:	200001e8 	.word	0x200001e8
 8002550:	08004c54 	.word	0x08004c54
 8002554:	0800270d 	.word	0x0800270d

08002558 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af02      	add	r7, sp, #8
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
 8002564:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002566:	2028      	movs	r0, #40	; 0x28
 8002568:	f7fe f8fa 	bl	8000760 <pvPortMalloc>
 800256c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	68b9      	ldr	r1, [r7, #8]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f805 	bl	8002592 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8002588:	697b      	ldr	r3, [r7, #20]
	}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	60f8      	str	r0, [r7, #12]
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <prvInitialiseNewTimer+0x28>
 80025a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025aa:	f383 8811 	msr	BASEPRI, r3
 80025ae:	f3bf 8f6f 	isb	sy
 80025b2:	f3bf 8f4f 	dsb	sy
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	e7fe      	b.n	80025b8 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80025c0:	f000 fa7c 	bl	8002abc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	6a3a      	ldr	r2, [r7, #32]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	3304      	adds	r3, #4
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd fe12 	bl	8000210 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80025ec:	bf00      	nop
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d109      	bne.n	8002620 <xTimerGenericCommand+0x2c>
 800260c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002610:	f383 8811 	msr	BASEPRI, r3
 8002614:	f3bf 8f6f 	isb	sy
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	623b      	str	r3, [r7, #32]
 800261e:	e7fe      	b.n	800261e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <xTimerGenericCommand+0x94>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02a      	beq.n	800267e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b05      	cmp	r3, #5
 8002638:	dc18      	bgt.n	800266c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800263a:	f7ff fdc9 	bl	80021d0 <xTaskGetSchedulerState>
 800263e:	4603      	mov	r3, r0
 8002640:	2b02      	cmp	r3, #2
 8002642:	d109      	bne.n	8002658 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <xTimerGenericCommand+0x94>)
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	f107 0114 	add.w	r1, r7, #20
 800264c:	2300      	movs	r3, #0
 800264e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002650:	f7fe f970 	bl	8000934 <xQueueGenericSend>
 8002654:	6278      	str	r0, [r7, #36]	; 0x24
 8002656:	e012      	b.n	800267e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <xTimerGenericCommand+0x94>)
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	f107 0114 	add.w	r1, r7, #20
 8002660:	2300      	movs	r3, #0
 8002662:	2200      	movs	r2, #0
 8002664:	f7fe f966 	bl	8000934 <xQueueGenericSend>
 8002668:	6278      	str	r0, [r7, #36]	; 0x24
 800266a:	e008      	b.n	800267e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <xTimerGenericCommand+0x94>)
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	f107 0114 	add.w	r1, r7, #20
 8002674:	2300      	movs	r3, #0
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	f7fe fa56 	bl	8000b28 <xQueueGenericSendFromISR>
 800267c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002680:	4618      	mov	r0, r3
 8002682:	3728      	adds	r7, #40	; 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	200001e4 	.word	0x200001e4

0800268c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af02      	add	r7, sp, #8
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <prvProcessExpiredTimer+0x7c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	3304      	adds	r3, #4
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd fe1d 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d121      	bne.n	80026f6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	18d1      	adds	r1, r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f000 f8c8 	bl	8002854 <prvInsertTimerInActiveList>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d015      	beq.n	80026f6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80026ca:	2300      	movs	r3, #0
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2300      	movs	r3, #0
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	2100      	movs	r1, #0
 80026d4:	6978      	ldr	r0, [r7, #20]
 80026d6:	f7ff ff8d 	bl	80025f4 <xTimerGenericCommand>
 80026da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d109      	bne.n	80026f6 <prvProcessExpiredTimer+0x6a>
 80026e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e6:	f383 8811 	msr	BASEPRI, r3
 80026ea:	f3bf 8f6f 	isb	sy
 80026ee:	f3bf 8f4f 	dsb	sy
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e7fe      	b.n	80026f4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	4798      	blx	r3
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200001dc 	.word	0x200001dc

0800270c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	4618      	mov	r0, r3
 800271a:	f000 f857 	bl	80027cc <prvGetNextExpireTime>
 800271e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4619      	mov	r1, r3
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f803 	bl	8002730 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800272a:	f000 f8d5 	bl	80028d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800272e:	e7f1      	b.n	8002714 <prvTimerTask+0x8>

08002730 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800273a:	f7ff f91f 	bl	800197c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800273e:	f107 0308 	add.w	r3, r7, #8
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f866 	bl	8002814 <prvSampleTimeNow>
 8002748:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d130      	bne.n	80027b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10a      	bne.n	800276c <prvProcessTimerOrBlockTask+0x3c>
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	429a      	cmp	r2, r3
 800275c:	d806      	bhi.n	800276c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800275e:	f7ff f91b 	bl	8001998 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002762:	68f9      	ldr	r1, [r7, #12]
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f7ff ff91 	bl	800268c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800276a:	e024      	b.n	80027b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <prvProcessTimerOrBlockTask+0x90>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <prvProcessTimerOrBlockTask+0x94>)
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	f7fe fd79 	bl	8001288 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002796:	f7ff f8ff 	bl	8001998 <xTaskResumeAll>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10a      	bne.n	80027b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <prvProcessTimerOrBlockTask+0x98>)
 80027a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	f3bf 8f4f 	dsb	sy
 80027ac:	f3bf 8f6f 	isb	sy
}
 80027b0:	e001      	b.n	80027b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80027b2:	f7ff f8f1 	bl	8001998 <xTaskResumeAll>
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200001e0 	.word	0x200001e0
 80027c4:	200001e4 	.word	0x200001e4
 80027c8:	e000ed04 	.word	0xe000ed04

080027cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <prvGetNextExpireTime+0x44>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	bf0c      	ite	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	2300      	movne	r3, #0
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <prvGetNextExpireTime+0x44>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	e001      	b.n	8002802 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	200001dc 	.word	0x200001dc

08002814 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800281c:	f7ff f958 	bl	8001ad0 <xTaskGetTickCount>
 8002820:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <prvSampleTimeNow+0x3c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	429a      	cmp	r2, r3
 800282a:	d205      	bcs.n	8002838 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800282c:	f000 f8e6 	bl	80029fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	e002      	b.n	800283e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <prvSampleTimeNow+0x3c>)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002844:	68fb      	ldr	r3, [r7, #12]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200001ec 	.word	0x200001ec

08002854 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
 8002860:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d812      	bhi.n	80028a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	1ad2      	subs	r2, r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	429a      	cmp	r2, r3
 8002886:	d302      	bcc.n	800288e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002888:	2301      	movs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e01b      	b.n	80028c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <prvInsertTimerInActiveList+0x7c>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	3304      	adds	r3, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f7fd fcea 	bl	8000272 <vListInsert>
 800289e:	e012      	b.n	80028c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d206      	bcs.n	80028b6 <prvInsertTimerInActiveList+0x62>
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d302      	bcc.n	80028b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80028b0:	2301      	movs	r3, #1
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	e007      	b.n	80028c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <prvInsertTimerInActiveList+0x80>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3304      	adds	r3, #4
 80028be:	4619      	mov	r1, r3
 80028c0:	4610      	mov	r0, r2
 80028c2:	f7fd fcd6 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80028c6:	697b      	ldr	r3, [r7, #20]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	200001e0 	.word	0x200001e0
 80028d4:	200001dc 	.word	0x200001dc

080028d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b08c      	sub	sp, #48	; 0x30
 80028dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80028de:	e07a      	b.n	80029d6 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	db77      	blt.n	80029d6 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	695b      	ldr	r3, [r3, #20]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3304      	adds	r3, #4
 80028f6:	4618      	mov	r0, r3
 80028f8:	f7fd fcf4 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff88 	bl	8002814 <prvSampleTimeNow>
 8002904:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b09      	cmp	r3, #9
 800290a:	d863      	bhi.n	80029d4 <prvProcessReceivedCommands+0xfc>
 800290c:	a201      	add	r2, pc, #4	; (adr r2, 8002914 <prvProcessReceivedCommands+0x3c>)
 800290e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002912:	bf00      	nop
 8002914:	0800293d 	.word	0x0800293d
 8002918:	0800293d 	.word	0x0800293d
 800291c:	0800293d 	.word	0x0800293d
 8002920:	080029d7 	.word	0x080029d7
 8002924:	08002997 	.word	0x08002997
 8002928:	080029cd 	.word	0x080029cd
 800292c:	0800293d 	.word	0x0800293d
 8002930:	0800293d 	.word	0x0800293d
 8002934:	080029d7 	.word	0x080029d7
 8002938:	08002997 	.word	0x08002997
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	18d1      	adds	r1, r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a3a      	ldr	r2, [r7, #32]
 8002948:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800294a:	f7ff ff83 	bl	8002854 <prvInsertTimerInActiveList>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d040      	beq.n	80029d6 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800295a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d138      	bne.n	80029d6 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	441a      	add	r2, r3
 800296c:	2300      	movs	r3, #0
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2300      	movs	r3, #0
 8002972:	2100      	movs	r1, #0
 8002974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002976:	f7ff fe3d 	bl	80025f4 <xTimerGenericCommand>
 800297a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d129      	bne.n	80029d6 <prvProcessReceivedCommands+0xfe>
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	61bb      	str	r3, [r7, #24]
 8002994:	e7fe      	b.n	8002994 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <prvProcessReceivedCommands+0xe0>
 80029a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	e7fe      	b.n	80029b6 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	18d1      	adds	r1, r2, r3
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	6a3a      	ldr	r2, [r7, #32]
 80029c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029c6:	f7ff ff45 	bl	8002854 <prvInsertTimerInActiveList>
					break;
 80029ca:	e004      	b.n	80029d6 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 80029cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ce:	f7fd fede 	bl	800078e <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80029d2:	e000      	b.n	80029d6 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 80029d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <prvProcessReceivedCommands+0x120>)
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	f107 0108 	add.w	r1, r7, #8
 80029de:	2300      	movs	r3, #0
 80029e0:	2200      	movs	r2, #0
 80029e2:	f7fe f9bf 	bl	8000d64 <xQueueGenericReceive>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f47f af79 	bne.w	80028e0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80029ee:	bf00      	nop
 80029f0:	3728      	adds	r7, #40	; 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	200001e4 	.word	0x200001e4

080029fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a02:	e044      	b.n	8002a8e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <prvSwitchTimerLists+0xb8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a0e:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <prvSwitchTimerLists+0xb8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fc61 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	6938      	ldr	r0, [r7, #16]
 8002a28:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d12d      	bne.n	8002a8e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	699a      	ldr	r2, [r3, #24]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	4413      	add	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d90e      	bls.n	8002a62 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <prvSwitchTimerLists+0xb8>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	3304      	adds	r3, #4
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7fd fc09 	bl	8000272 <vListInsert>
 8002a60:	e015      	b.n	8002a8e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002a62:	2300      	movs	r3, #0
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2300      	movs	r3, #0
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	6938      	ldr	r0, [r7, #16]
 8002a6e:	f7ff fdc1 	bl	80025f4 <xTimerGenericCommand>
 8002a72:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d109      	bne.n	8002a8e <prvSwitchTimerLists+0x92>
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	e7fe      	b.n	8002a8c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <prvSwitchTimerLists+0xb8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1b5      	bne.n	8002a04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <prvSwitchTimerLists+0xb8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <prvSwitchTimerLists+0xbc>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <prvSwitchTimerLists+0xb8>)
 8002aa4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002aa6:	4a04      	ldr	r2, [pc, #16]	; (8002ab8 <prvSwitchTimerLists+0xbc>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6013      	str	r3, [r2, #0]
}
 8002aac:	bf00      	nop
 8002aae:	3718      	adds	r7, #24
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	200001dc 	.word	0x200001dc
 8002ab8:	200001e0 	.word	0x200001e0

08002abc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002ac0:	f7fd fd3e 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <prvCheckForValidListAndQueue+0x54>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d11d      	bne.n	8002b08 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002acc:	4811      	ldr	r0, [pc, #68]	; (8002b14 <prvCheckForValidListAndQueue+0x58>)
 8002ace:	f7fd fb7f 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002ad2:	4811      	ldr	r0, [pc, #68]	; (8002b18 <prvCheckForValidListAndQueue+0x5c>)
 8002ad4:	f7fd fb7c 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <prvCheckForValidListAndQueue+0x60>)
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <prvCheckForValidListAndQueue+0x58>)
 8002adc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002ade:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <prvCheckForValidListAndQueue+0x64>)
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <prvCheckForValidListAndQueue+0x5c>)
 8002ae2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	210c      	movs	r1, #12
 8002ae8:	2005      	movs	r0, #5
 8002aea:	f7fd fecb 	bl	8000884 <xQueueGenericCreate>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b07      	ldr	r3, [pc, #28]	; (8002b10 <prvCheckForValidListAndQueue+0x54>)
 8002af2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002af4:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <prvCheckForValidListAndQueue+0x54>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002afc:	4b04      	ldr	r3, [pc, #16]	; (8002b10 <prvCheckForValidListAndQueue+0x54>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4908      	ldr	r1, [pc, #32]	; (8002b24 <prvCheckForValidListAndQueue+0x68>)
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fb6e 	bl	80011e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002b08:	f7fd fd48 	bl	800059c <vPortExitCritical>
}
 8002b0c:	bf00      	nop
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200001e4 	.word	0x200001e4
 8002b14:	200001b4 	.word	0x200001b4
 8002b18:	200001c8 	.word	0x200001c8
 8002b1c:	200001dc 	.word	0x200001dc
 8002b20:	200001e0 	.word	0x200001e0
 8002b24:	08004c5c 	.word	0x08004c5c

08002b28 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002b38:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <DAC_SetChannel1Data+0x34>)
 8002b3a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4413      	add	r3, r2
 8002b42:	3308      	adds	r3, #8
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	887b      	ldrh	r3, [r7, #2]
 8002b4c:	6013      	str	r3, [r2, #0]
}
 8002b4e:	bf00      	nop
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40007400 	.word	0x40007400

08002b60 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <DMA_Init+0xac>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002b8a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002b96:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002ba2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002bae:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0307 	bic.w	r3, r3, #7
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60da      	str	r2, [r3, #12]
}
 8002bfe:	bf00      	nop
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	f01c803f 	.word	0xf01c803f

08002c10 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002c1c:	78fb      	ldrb	r3, [r7, #3]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f043 0201 	orr.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002c2e:	e005      	b.n	8002c3c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 0201 	bic.w	r2, r3, #1
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	601a      	str	r2, [r3, #0]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e001      	b.n	8002c6a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002c82:	2300      	movs	r3, #0
 8002c84:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a15      	ldr	r2, [pc, #84]	; (8002ce4 <DMA_GetFlagStatus+0x6c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d802      	bhi.n	8002c98 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002c92:	4b15      	ldr	r3, [pc, #84]	; (8002ce8 <DMA_GetFlagStatus+0x70>)
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	e001      	b.n	8002c9c <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <DMA_GetFlagStatus+0x74>)
 8002c9a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d003      	beq.n	8002cae <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e002      	b.n	8002cb4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002cba:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d002      	beq.n	8002cd0 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
 8002cce:	e001      	b.n	8002cd4 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	371c      	adds	r7, #28
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	4002640f 	.word	0x4002640f
 8002ce8:	40026000 	.word	0x40026000
 8002cec:	40026400 	.word	0x40026400

08002cf0 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <DMA_ClearFlag+0x50>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d802      	bhi.n	8002d08 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <DMA_ClearFlag+0x54>)
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	e001      	b.n	8002d0c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <DMA_ClearFlag+0x58>)
 8002d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002d1c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002d24:	e006      	b.n	8002d34 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002d2c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	6093      	str	r3, [r2, #8]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	4002640f 	.word	0x4002640f
 8002d44:	40026000 	.word	0x40026000
 8002d48:	40026400 	.word	0x40026400

08002d4c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b087      	sub	sp, #28
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	e076      	b.n	8002e56 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d165      	bne.n	8002e50 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	2103      	movs	r1, #3
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	401a      	ands	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	791b      	ldrb	r3, [r3, #4]
 8002da2:	4619      	mov	r1, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dac:	431a      	orrs	r2, r3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	791b      	ldrb	r3, [r3, #4]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d003      	beq.n	8002dc2 <GPIO_Init+0x76>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	791b      	ldrb	r3, [r3, #4]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d12e      	bne.n	8002e20 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2103      	movs	r1, #3
 8002dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	795b      	ldrb	r3, [r3, #5]
 8002de0:	4619      	mov	r1, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4619      	mov	r1, r3
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	408b      	lsls	r3, r1
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	401a      	ands	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	7992      	ldrb	r2, [r2, #6]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	b292      	uxth	r2, r2
 8002e14:	fa01 f202 	lsl.w	r2, r1, r2
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	401a      	ands	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	79db      	ldrb	r3, [r3, #7]
 8002e40:	4619      	mov	r1, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	3301      	adds	r3, #1
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b0f      	cmp	r3, #15
 8002e5a:	d985      	bls.n	8002d68 <GPIO_Init+0x1c>
    }
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	371c      	adds	r7, #28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d006      	beq.n	8002e88 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002e7a:	490a      	ldr	r1, [pc, #40]	; (8002ea4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002e7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8002e86:	e006      	b.n	8002e96 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002e88:	4906      	ldr	r1, [pc, #24]	; (8002ea4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	4013      	ands	r3, r2
 8002e94:	630b      	str	r3, [r1, #48]	; 0x30
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40023800 	.word	0x40023800

08002ea8 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	819a      	strh	r2, [r3, #12]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b085      	sub	sp, #20
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	891b      	ldrh	r3, [r3, #8]
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	887b      	ldrh	r3, [r7, #2]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	73fb      	strb	r3, [r7, #15]
 8002eea:	e001      	b.n	8002ef0 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002eec:	2300      	movs	r3, #0
 8002eee:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	4603      	mov	r3, r0
 8002f08:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	4a10      	ldr	r2, [pc, #64]	; (8002f50 <STM_EVAL_LEDInit+0x50>)
 8002f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f12:	2101      	movs	r1, #1
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ffa7 	bl	8002e68 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <STM_EVAL_LEDInit+0x54>)
 8002f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f22:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002f24:	2301      	movs	r3, #1
 8002f26:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002f30:	2302      	movs	r3, #2
 8002f32:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <STM_EVAL_LEDInit+0x58>)
 8002f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3c:	f107 0208 	add.w	r2, r7, #8
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff ff02 	bl	8002d4c <GPIO_Init>
}
 8002f48:	bf00      	nop
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	08004dd4 	.word	0x08004dd4
 8002f54:	08004dcc 	.word	0x08004dcc
 8002f58:	20000004 	.word	0x20000004

08002f5c <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	4a06      	ldr	r2, [pc, #24]	; (8002f84 <STM_EVAL_LEDOn+0x28>)
 8002f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6e:	79fa      	ldrb	r2, [r7, #7]
 8002f70:	4905      	ldr	r1, [pc, #20]	; (8002f88 <STM_EVAL_LEDOn+0x2c>)
 8002f72:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002f76:	831a      	strh	r2, [r3, #24]
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	20000004 	.word	0x20000004
 8002f88:	08004dcc 	.word	0x08004dcc

08002f8c <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	4a06      	ldr	r2, [pc, #24]	; (8002fb4 <STM_EVAL_LEDOff+0x28>)
 8002f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9e:	79fa      	ldrb	r2, [r7, #7]
 8002fa0:	4905      	ldr	r1, [pc, #20]	; (8002fb8 <STM_EVAL_LEDOff+0x2c>)
 8002fa2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002fa6:	835a      	strh	r2, [r3, #26]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	20000004 	.word	0x20000004
 8002fb8:	08004dcc 	.word	0x08004dcc

08002fbc <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002fc0:	4b38      	ldr	r3, [pc, #224]	; (80030a4 <Audio_MAL_IRQHandler+0xe8>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <Audio_MAL_IRQHandler+0xec>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f7ff fe54 	bl	8002c78 <DMA_GetFlagStatus>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d064      	beq.n	80030a0 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002fd6:	4b35      	ldr	r3, [pc, #212]	; (80030ac <Audio_MAL_IRQHandler+0xf0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d04c      	beq.n	8003078 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002fde:	bf00      	nop
 8002fe0:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <Audio_MAL_IRQHandler+0xe8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fe2f 	bl	8002c48 <DMA_GetCmdStatus>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f7      	bne.n	8002fe0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002ff0:	4b2c      	ldr	r3, [pc, #176]	; (80030a4 <Audio_MAL_IRQHandler+0xe8>)
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <Audio_MAL_IRQHandler+0xec>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f7ff fe78 	bl	8002cf0 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <Audio_MAL_IRQHandler+0xf4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <Audio_MAL_IRQHandler+0xf8>)
 8003008:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800300a:	4b28      	ldr	r3, [pc, #160]	; (80030ac <Audio_MAL_IRQHandler+0xf0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003012:	4293      	cmp	r3, r2
 8003014:	bf28      	it	cs
 8003016:	4613      	movcs	r3, r2
 8003018:	4a26      	ldr	r2, [pc, #152]	; (80030b4 <Audio_MAL_IRQHandler+0xf8>)
 800301a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800301c:	4b21      	ldr	r3, [pc, #132]	; (80030a4 <Audio_MAL_IRQHandler+0xe8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4924      	ldr	r1, [pc, #144]	; (80030b4 <Audio_MAL_IRQHandler+0xf8>)
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fd9c 	bl	8002b60 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <Audio_MAL_IRQHandler+0xe8>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fdee 	bl	8002c10 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8003034:	4b1e      	ldr	r3, [pc, #120]	; (80030b0 <Audio_MAL_IRQHandler+0xf4>)
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <Audio_MAL_IRQHandler+0xf0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d203      	bcs.n	800304a <Audio_MAL_IRQHandler+0x8e>
 8003042:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <Audio_MAL_IRQHandler+0xf0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	e000      	b.n	800304c <Audio_MAL_IRQHandler+0x90>
 800304a:	4b1b      	ldr	r3, [pc, #108]	; (80030b8 <Audio_MAL_IRQHandler+0xfc>)
 800304c:	4413      	add	r3, r2
 800304e:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <Audio_MAL_IRQHandler+0xf4>)
 8003050:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <Audio_MAL_IRQHandler+0xf0>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <Audio_MAL_IRQHandler+0xf0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800305e:	428b      	cmp	r3, r1
 8003060:	bf28      	it	cs
 8003062:	460b      	movcs	r3, r1
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	4a11      	ldr	r2, [pc, #68]	; (80030ac <Audio_MAL_IRQHandler+0xf0>)
 8003068:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800306a:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <Audio_MAL_IRQHandler+0xe8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2101      	movs	r1, #1
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fdcd 	bl	8002c10 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8003076:	e013      	b.n	80030a0 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003078:	4b0a      	ldr	r3, [pc, #40]	; (80030a4 <Audio_MAL_IRQHandler+0xe8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fdc6 	bl	8002c10 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8003084:	4b07      	ldr	r3, [pc, #28]	; (80030a4 <Audio_MAL_IRQHandler+0xe8>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b07      	ldr	r3, [pc, #28]	; (80030a8 <Audio_MAL_IRQHandler+0xec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7ff fe2e 	bl	8002cf0 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <Audio_MAL_IRQHandler+0xf4>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f83c 	bl	8003118 <EVAL_AUDIO_TransferComplete_CallBack>
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000001c 	.word	0x2000001c
 80030a8:	20000020 	.word	0x20000020
 80030ac:	20000014 	.word	0x20000014
 80030b0:	20000268 	.word	0x20000268
 80030b4:	200002a8 	.word	0x200002a8
 80030b8:	0001fffe 	.word	0x0001fffe

080030bc <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80030c0:	f7ff ff7c 	bl	8002fbc <Audio_MAL_IRQHandler>
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80030cc:	f7ff ff76 	bl	8002fbc <Audio_MAL_IRQHandler>
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80030d8:	2102      	movs	r1, #2
 80030da:	480d      	ldr	r0, [pc, #52]	; (8003110 <SPI3_IRQHandler+0x3c>)
 80030dc:	f7ff fef3 	bl	8002ec6 <SPI_I2S_GetFlagStatus>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d011      	beq.n	800310a <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <SPI3_IRQHandler+0x40>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d106      	bne.n	80030fc <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80030ee:	f000 f81e 	bl	800312e <EVAL_AUDIO_GetSampleCallBack>
 80030f2:	4603      	mov	r3, r0
 80030f4:	4619      	mov	r1, r3
 80030f6:	2004      	movs	r0, #4
 80030f8:	f7ff fd16 	bl	8002b28 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80030fc:	f000 f817 	bl	800312e <EVAL_AUDIO_GetSampleCallBack>
 8003100:	4603      	mov	r3, r0
 8003102:	4619      	mov	r1, r3
 8003104:	4802      	ldr	r0, [pc, #8]	; (8003110 <SPI3_IRQHandler+0x3c>)
 8003106:	f7ff fecf 	bl	8002ea8 <SPI_I2S_SendData>
  }
}
 800310a:	bf00      	nop
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40003c00 	.word	0x40003c00
 8003114:	20000018 	.word	0x20000018

08003118 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003122:	bf00      	nop
}
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr

0800312e <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <NVIC_SetPriorityGrouping+0x44>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800315c:	4013      	ands	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8003168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800316c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003172:	4a04      	ldr	r2, [pc, #16]	; (8003184 <NVIC_SetPriorityGrouping+0x44>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <task1>:
int xIdleCount = 0;

/* -------------------------------------- */
/* ---------- Test Bench Tasks ---------- */
/* -------------------------------------- */
void task1() {
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0

	STM_EVAL_LEDOn(red_led);
 800318e:	2002      	movs	r0, #2
 8003190:	f7ff fee4 	bl	8002f5c <STM_EVAL_LEDOn>

	uint32_t start_time = xTaskGetTickCount();
 8003194:	f7fe fc9c 	bl	8001ad0 <xTaskGetTickCount>
 8003198:	6078      	str	r0, [r7, #4]
	while ( xTaskGetTickCount() < start_time+TASK1_EXEC ) {
 800319a:	e004      	b.n	80031a6 <task1+0x1e>
		xTask1Count += 1;
 800319c:	4b0c      	ldr	r3, [pc, #48]	; (80031d0 <task1+0x48>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	3301      	adds	r3, #1
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <task1+0x48>)
 80031a4:	6013      	str	r3, [r2, #0]
	while ( xTaskGetTickCount() < start_time+TASK1_EXEC ) {
 80031a6:	f7fe fc93 	bl	8001ad0 <xTaskGetTickCount>
 80031aa:	4602      	mov	r2, r0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	33c3      	adds	r3, #195	; 0xc3
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3f3      	bcc.n	800319c <task1+0x14>
	}

	STM_EVAL_LEDOff(red_led);
 80031b4:	2002      	movs	r0, #2
 80031b6:	f7ff fee9 	bl	8002f8c <STM_EVAL_LEDOff>

	TaskHandle_t currentTaskHandle = xTaskGetCurrentTaskHandle();
 80031ba:	f7fe fff9 	bl	80021b0 <xTaskGetCurrentTaskHandle>
 80031be:	6038      	str	r0, [r7, #0]

	dd_delete(currentTaskHandle);
 80031c0:	6838      	ldr	r0, [r7, #0]
 80031c2:	f000 fc21 	bl	8003a08 <dd_delete>

}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000208 	.word	0x20000208

080031d4 <task2>:

void task2() {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
	STM_EVAL_LEDOn(green_led);
 80031da:	2000      	movs	r0, #0
 80031dc:	f7ff febe 	bl	8002f5c <STM_EVAL_LEDOn>

	uint32_t start_time = xTaskGetTickCount();
 80031e0:	f7fe fc76 	bl	8001ad0 <xTaskGetTickCount>
 80031e4:	6078      	str	r0, [r7, #4]
	while ( xTaskGetTickCount() < start_time+TASK2_EXEC ) {
 80031e6:	e004      	b.n	80031f2 <task2+0x1e>
		xTask2Count += 1;
 80031e8:	4b0c      	ldr	r3, [pc, #48]	; (800321c <task2+0x48>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	4a0b      	ldr	r2, [pc, #44]	; (800321c <task2+0x48>)
 80031f0:	6013      	str	r3, [r2, #0]
	while ( xTaskGetTickCount() < start_time+TASK2_EXEC ) {
 80031f2:	f7fe fc6d 	bl	8001ad0 <xTaskGetTickCount>
 80031f6:	4602      	mov	r2, r0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3396      	adds	r3, #150	; 0x96
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d3f3      	bcc.n	80031e8 <task2+0x14>
	}

	STM_EVAL_LEDOff(green_led);
 8003200:	2000      	movs	r0, #0
 8003202:	f7ff fec3 	bl	8002f8c <STM_EVAL_LEDOff>

	TaskHandle_t currentTaskHandle = xTaskGetCurrentTaskHandle();
 8003206:	f7fe ffd3 	bl	80021b0 <xTaskGetCurrentTaskHandle>
 800320a:	6038      	str	r0, [r7, #0]



	dd_delete(currentTaskHandle);
 800320c:	6838      	ldr	r0, [r7, #0]
 800320e:	f000 fbfb 	bl	8003a08 <dd_delete>

}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	2000020c 	.word	0x2000020c

08003220 <task3>:

void task3() {
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
	STM_EVAL_LEDOn(blue_led);
 8003226:	2003      	movs	r0, #3
 8003228:	f7ff fe98 	bl	8002f5c <STM_EVAL_LEDOn>

	uint32_t start_time = xTaskGetTickCount();
 800322c:	f7fe fc50 	bl	8001ad0 <xTaskGetTickCount>
 8003230:	6078      	str	r0, [r7, #4]
	while ( xTaskGetTickCount() < start_time+TASK3_EXEC ) {
 8003232:	e004      	b.n	800323e <task3+0x1e>
		xTask3Count += 1;
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <task3+0x48>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	3301      	adds	r3, #1
 800323a:	4a0b      	ldr	r2, [pc, #44]	; (8003268 <task3+0x48>)
 800323c:	6013      	str	r3, [r2, #0]
	while ( xTaskGetTickCount() < start_time+TASK3_EXEC ) {
 800323e:	f7fe fc47 	bl	8001ad0 <xTaskGetTickCount>
 8003242:	4602      	mov	r2, r0
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f503 73af 	add.w	r3, r3, #350	; 0x15e
 800324a:	429a      	cmp	r2, r3
 800324c:	d3f2      	bcc.n	8003234 <task3+0x14>

	}

	STM_EVAL_LEDOff(blue_led);
 800324e:	2003      	movs	r0, #3
 8003250:	f7ff fe9c 	bl	8002f8c <STM_EVAL_LEDOff>

	TaskHandle_t currentTaskHandle = xTaskGetCurrentTaskHandle();
 8003254:	f7fe ffac 	bl	80021b0 <xTaskGetCurrentTaskHandle>
 8003258:	6038      	str	r0, [r7, #0]

	dd_delete(currentTaskHandle);
 800325a:	6838      	ldr	r0, [r7, #0]
 800325c:	f000 fbd4 	bl	8003a08 <dd_delete>
}
 8003260:	bf00      	nop
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000210 	.word	0x20000210

0800326c <task1timer>:

/* --------------------------------------- */
/* ---------- Test Bench Timers ---------- */
/* --------------------------------------- */
void task1timer() {
 800326c:	b590      	push	{r4, r7, lr}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
	createTaskParams taskParams = {
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <task1timer+0x20>)
 8003274:	463c      	mov	r4, r7
 8003276:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003278:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.name = "task1",
		.deadline = TASK1_PERIOD,
		.task_type = PERIODIC,
		.func = &task1
	};
	dd_tcreate(taskParams);
 800327c:	463b      	mov	r3, r7
 800327e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003280:	f000 fb7a 	bl	8003978 <dd_tcreate>
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	bd90      	pop	{r4, r7, pc}
 800328c:	08004c6c 	.word	0x08004c6c

08003290 <task2timer>:

void task2timer() {
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
	createTaskParams taskParams = {
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <task2timer+0x20>)
 8003298:	463c      	mov	r4, r7
 800329a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800329c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.name = "task2",
		.deadline = TASK2_PERIOD,
		.task_type = PERIODIC,
		.func = &task2
	};
	dd_tcreate(taskParams);
 80032a0:	463b      	mov	r3, r7
 80032a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032a4:	f000 fb68 	bl	8003978 <dd_tcreate>
}
 80032a8:	bf00      	nop
 80032aa:	3714      	adds	r7, #20
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd90      	pop	{r4, r7, pc}
 80032b0:	08004c84 	.word	0x08004c84

080032b4 <task3timer>:

void task3timer() {
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
	createTaskParams taskParams = {
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <task3timer+0x20>)
 80032bc:	463c      	mov	r4, r7
 80032be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		.name = "task3",
		.deadline = TASK3_PERIOD,
		.task_type = PERIODIC,
		.func = &task3
	};
	dd_tcreate(taskParams);
 80032c4:	463b      	mov	r3, r7
 80032c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c8:	f000 fb56 	bl	8003978 <dd_tcreate>
}
 80032cc:	bf00      	nop
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	08004c9c 	.word	0x08004c9c

080032d8 <periodicGenerator>:

/* Auxilary Task Generator */
void periodicGenerator() {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af02      	add	r7, sp, #8
	xTimerHandle xPeriodicGenTimer1 = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
	xTimerHandle xPeriodicGenTimer2 = NULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
	xTimerHandle xPeriodicGenTimer3 = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]

	/* Test Bench #1 */
	xPeriodicGenTimer1 = xTimerCreate("Task 1", TASK1_PERIOD, pdTRUE, ( void * ) 0, task1timer);
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <periodicGenerator+0xa4>)
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	2300      	movs	r3, #0
 80032f0:	2201      	movs	r2, #1
 80032f2:	21fa      	movs	r1, #250	; 0xfa
 80032f4:	4822      	ldr	r0, [pc, #136]	; (8003380 <periodicGenerator+0xa8>)
 80032f6:	f7ff f92f 	bl	8002558 <xTimerCreate>
 80032fa:	60f8      	str	r0, [r7, #12]
	xPeriodicGenTimer2 = xTimerCreate("Task 2", TASK2_PERIOD, pdTRUE, ( void * ) 0, task2timer);
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <periodicGenerator+0xac>)
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	2300      	movs	r3, #0
 8003302:	2201      	movs	r2, #1
 8003304:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003308:	481f      	ldr	r0, [pc, #124]	; (8003388 <periodicGenerator+0xb0>)
 800330a:	f7ff f925 	bl	8002558 <xTimerCreate>
 800330e:	60b8      	str	r0, [r7, #8]
	xPeriodicGenTimer3 = xTimerCreate("Task 3", TASK3_PERIOD, pdTRUE, ( void * ) 0, task3timer);
 8003310:	4b1e      	ldr	r3, [pc, #120]	; (800338c <periodicGenerator+0xb4>)
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	2201      	movs	r2, #1
 8003318:	f240 21ee 	movw	r1, #750	; 0x2ee
 800331c:	481c      	ldr	r0, [pc, #112]	; (8003390 <periodicGenerator+0xb8>)
 800331e:	f7ff f91b 	bl	8002558 <xTimerCreate>
 8003322:	6078      	str	r0, [r7, #4]

	task1timer();
 8003324:	f7ff ffa2 	bl	800326c <task1timer>
	task2timer();
 8003328:	f7ff ffb2 	bl	8003290 <task2timer>
	task3timer();
 800332c:	f7ff ffc2 	bl	80032b4 <task3timer>

	xTimerStart(xPeriodicGenTimer1, 0);
 8003330:	f7fe fbce 	bl	8001ad0 <xTaskGetTickCount>
 8003334:	4602      	mov	r2, r0
 8003336:	2300      	movs	r3, #0
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	2300      	movs	r3, #0
 800333c:	2101      	movs	r1, #1
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f7ff f958 	bl	80025f4 <xTimerGenericCommand>
	xTimerStart(xPeriodicGenTimer2, 0);
 8003344:	f7fe fbc4 	bl	8001ad0 <xTaskGetTickCount>
 8003348:	4602      	mov	r2, r0
 800334a:	2300      	movs	r3, #0
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	2300      	movs	r3, #0
 8003350:	2101      	movs	r1, #1
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	f7ff f94e 	bl	80025f4 <xTimerGenericCommand>
	xTimerStart(xPeriodicGenTimer3, 0);
 8003358:	f7fe fbba 	bl	8001ad0 <xTaskGetTickCount>
 800335c:	4602      	mov	r2, r0
 800335e:	2300      	movs	r3, #0
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	2300      	movs	r3, #0
 8003364:	2101      	movs	r1, #1
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff f944 	bl	80025f4 <xTimerGenericCommand>

	vTaskDelete( NULL );
 800336c:	2000      	movs	r0, #0
 800336e:	f7fe f8f1 	bl	8001554 <vTaskDelete>
}
 8003372:	bf00      	nop
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	0800326d 	.word	0x0800326d
 8003380:	08004cac 	.word	0x08004cac
 8003384:	08003291 	.word	0x08003291
 8003388:	08004cb4 	.word	0x08004cb4
 800338c:	080032b5 	.word	0x080032b5
 8003390:	08004cbc 	.word	0x08004cbc

08003394 <monitor>:

void monitor() {
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
	taskNames *task_name = NULL;
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]

	while (1) {

		task_name = dd_return_active_list();
 800339e:	f000 fb6b 	bl	8003a78 <dd_return_active_list>
 80033a2:	60f8      	str	r0, [r7, #12]
		printf("\nActive Tasks: ");
 80033a4:	4843      	ldr	r0, [pc, #268]	; (80034b4 <monitor+0x120>)
 80033a6:	f000 ff6b 	bl	8004280 <printf>
		while (task_name != NULL) {
 80033aa:	e00a      	b.n	80033c2 <monitor+0x2e>
			printf(task_name->name);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 ff65 	bl	8004280 <printf>
			printf(", ");
 80033b6:	4840      	ldr	r0, [pc, #256]	; (80034b8 <monitor+0x124>)
 80033b8:	f000 ff62 	bl	8004280 <printf>
			task_name = task_name->next_cell;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	60fb      	str	r3, [r7, #12]
		while (task_name != NULL) {
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1f1      	bne.n	80033ac <monitor+0x18>
		}

		task_name = dd_return_overdue_list();
 80033c8:	f000 fb9e 	bl	8003b08 <dd_return_overdue_list>
 80033cc:	60f8      	str	r0, [r7, #12]
		printf("\nOverdue Tasks: ");
 80033ce:	483b      	ldr	r0, [pc, #236]	; (80034bc <monitor+0x128>)
 80033d0:	f000 ff56 	bl	8004280 <printf>
		while (task_name != NULL) {
 80033d4:	e00a      	b.n	80033ec <monitor+0x58>
			printf(task_name->name);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 ff50 	bl	8004280 <printf>
			printf(", ");
 80033e0:	4835      	ldr	r0, [pc, #212]	; (80034b8 <monitor+0x124>)
 80033e2:	f000 ff4d 	bl	8004280 <printf>
			task_name = task_name->next_cell;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	60fb      	str	r3, [r7, #12]
		while (task_name != NULL) {
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d1f1      	bne.n	80033d6 <monitor+0x42>
		}
		printf("\n");
 80033f2:	200a      	movs	r0, #10
 80033f4:	f001 f882 	bl	80044fc <putchar>

		printf("Time since last monitor(): %ims\n", xTaskGetTickCount() - xTicksCount);
 80033f8:	f7fe fb6a 	bl	8001ad0 <xTaskGetTickCount>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <monitor+0x12c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	4619      	mov	r1, r3
 8003406:	482f      	ldr	r0, [pc, #188]	; (80034c4 <monitor+0x130>)
 8003408:	f000 ff3a 	bl	8004280 <printf>
		int total = xTask1Count + xTask2Count + xTask3Count + xIdleCount;
 800340c:	4b2e      	ldr	r3, [pc, #184]	; (80034c8 <monitor+0x134>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b2e      	ldr	r3, [pc, #184]	; (80034cc <monitor+0x138>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	441a      	add	r2, r3
 8003416:	4b2e      	ldr	r3, [pc, #184]	; (80034d0 <monitor+0x13c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	441a      	add	r2, r3
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <monitor+0x140>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4413      	add	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
		int test = 100*xTask1Count/total;
 8003424:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <monitor+0x134>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2264      	movs	r2, #100	; 0x64
 800342a:	fb02 f203 	mul.w	r2, r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	fb92 f3f3 	sdiv	r3, r2, r3
 8003434:	607b      	str	r3, [r7, #4]
		printf("Task 1 Usage: %d%% \n", test);
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4827      	ldr	r0, [pc, #156]	; (80034d8 <monitor+0x144>)
 800343a:	f000 ff21 	bl	8004280 <printf>
		printf("Task 2 Usage: %d%% \n", (100*xTask2Count/total));
 800343e:	4b23      	ldr	r3, [pc, #140]	; (80034cc <monitor+0x138>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2264      	movs	r2, #100	; 0x64
 8003444:	fb02 f203 	mul.w	r2, r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	fb92 f3f3 	sdiv	r3, r2, r3
 800344e:	4619      	mov	r1, r3
 8003450:	4822      	ldr	r0, [pc, #136]	; (80034dc <monitor+0x148>)
 8003452:	f000 ff15 	bl	8004280 <printf>
		printf("Task 3 Usage: %d%% \n", 100*xTask3Count/total);
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <monitor+0x13c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2264      	movs	r2, #100	; 0x64
 800345c:	fb02 f203 	mul.w	r2, r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	fb92 f3f3 	sdiv	r3, r2, r3
 8003466:	4619      	mov	r1, r3
 8003468:	481d      	ldr	r0, [pc, #116]	; (80034e0 <monitor+0x14c>)
 800346a:	f000 ff09 	bl	8004280 <printf>
		printf("Idle Usage: %d%% \n", 100*xIdleCount/total);
 800346e:	4b19      	ldr	r3, [pc, #100]	; (80034d4 <monitor+0x140>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2264      	movs	r2, #100	; 0x64
 8003474:	fb02 f203 	mul.w	r2, r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	fb92 f3f3 	sdiv	r3, r2, r3
 800347e:	4619      	mov	r1, r3
 8003480:	4818      	ldr	r0, [pc, #96]	; (80034e4 <monitor+0x150>)
 8003482:	f000 fefd 	bl	8004280 <printf>
		xTicksCount = xTaskGetTickCount();
 8003486:	f7fe fb23 	bl	8001ad0 <xTaskGetTickCount>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <monitor+0x12c>)
 8003490:	601a      	str	r2, [r3, #0]
		xTask1Count = 0;
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <monitor+0x134>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
		xTask2Count = 0;
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <monitor+0x138>)
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
		xTask3Count = 0;
 800349e:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <monitor+0x13c>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
		xIdleCount = 0;
 80034a4:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <monitor+0x140>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]

		vTaskDelay(420);
 80034aa:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80034ae:	f7fe f8df 	bl	8001670 <vTaskDelay>
	while (1) {
 80034b2:	e774      	b.n	800339e <monitor+0xa>
 80034b4:	08004cc4 	.word	0x08004cc4
 80034b8:	08004cd4 	.word	0x08004cd4
 80034bc:	08004cd8 	.word	0x08004cd8
 80034c0:	20000204 	.word	0x20000204
 80034c4:	08004cec 	.word	0x08004cec
 80034c8:	20000208 	.word	0x20000208
 80034cc:	2000020c 	.word	0x2000020c
 80034d0:	20000210 	.word	0x20000210
 80034d4:	20000214 	.word	0x20000214
 80034d8:	08004d10 	.word	0x08004d10
 80034dc:	08004d28 	.word	0x08004d28
 80034e0:	08004d40 	.word	0x08004d40
 80034e4:	08004d58 	.word	0x08004d58

080034e8 <main>:
	vTaskDelete( NULL );
}


int main(void)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af02      	add	r7, sp, #8
	// Init leds
	STM_EVAL_LEDInit(amber_led);
 80034ee:	2001      	movs	r0, #1
 80034f0:	f7ff fd06 	bl	8002f00 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(green_led);
 80034f4:	2000      	movs	r0, #0
 80034f6:	f7ff fd03 	bl	8002f00 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(red_led);
 80034fa:	2002      	movs	r0, #2
 80034fc:	f7ff fd00 	bl	8002f00 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(blue_led);
 8003500:	2003      	movs	r0, #3
 8003502:	f7ff fcfd 	bl	8002f00 <STM_EVAL_LEDInit>
	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 8003506:	f000 fb85 	bl	8003c14 <prvSetupHardware>
	xExpirationTimer = xTimerCreate("Expiration Timer", 8192, pdFALSE, ( void * ) 0, purgeAndRun);
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <main+0xe8>)
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	2200      	movs	r2, #0
 8003512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003516:	482f      	ldr	r0, [pc, #188]	; (80035d4 <main+0xec>)
 8003518:	f7ff f81e 	bl	8002558 <xTimerCreate>
 800351c:	4602      	mov	r2, r0
 800351e:	4b2e      	ldr	r3, [pc, #184]	; (80035d8 <main+0xf0>)
 8003520:	601a      	str	r2, [r3, #0]
	xTimerStart( xExpirationTimer, 0 );
 8003522:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <main+0xf0>)
 8003524:	681c      	ldr	r4, [r3, #0]
 8003526:	f7fe fad3 	bl	8001ad0 <xTaskGetTickCount>
 800352a:	4602      	mov	r2, r0
 800352c:	2300      	movs	r3, #0
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	2300      	movs	r3, #0
 8003532:	2101      	movs	r1, #1
 8003534:	4620      	mov	r0, r4
 8003536:	f7ff f85d 	bl	80025f4 <xTimerGenericCommand>


	/* Create the queue used by the queue send and queue receive tasks.
	http://www.freertos.org/a00116.html */
	xQueue = xQueueCreate( 	mainQUEUE_LENGTH,		/* The number of items the queue can hold. */
 800353a:	2200      	movs	r2, #0
 800353c:	211c      	movs	r1, #28
 800353e:	2064      	movs	r0, #100	; 0x64
 8003540:	f7fd f9a0 	bl	8000884 <xQueueGenericCreate>
 8003544:	4602      	mov	r2, r0
 8003546:	4b25      	ldr	r3, [pc, #148]	; (80035dc <main+0xf4>)
 8003548:	601a      	str	r2, [r3, #0]
							sizeof( queueMsg ) );	/* The size of each item the queue holds. */
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xQueue, "MainQueue" );
 800354a:	4b24      	ldr	r3, [pc, #144]	; (80035dc <main+0xf4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4924      	ldr	r1, [pc, #144]	; (80035e0 <main+0xf8>)
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd fe47 	bl	80011e4 <vQueueAddToRegistry>


	/* Create the semaphore used by the FreeRTOS tick hook function and the
	event semaphore task. */
	vSemaphoreCreateBinary( xEventSemaphore );
 8003556:	2203      	movs	r2, #3
 8003558:	2100      	movs	r1, #0
 800355a:	2001      	movs	r0, #1
 800355c:	f7fd f992 	bl	8000884 <xQueueGenericCreate>
 8003560:	4602      	mov	r2, r0
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <main+0xfc>)
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	4b1f      	ldr	r3, [pc, #124]	; (80035e4 <main+0xfc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <main+0x94>
 800356e:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <main+0xfc>)
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	2300      	movs	r3, #0
 8003574:	2200      	movs	r2, #0
 8003576:	2100      	movs	r1, #0
 8003578:	f7fd f9dc 	bl	8000934 <xQueueGenericSend>
	/* Add to the registry, for the benefit of kernel aware debugging. */
	vQueueAddToRegistry( xEventSemaphore, "xEventSemaphore" );
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <main+0xfc>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4919      	ldr	r1, [pc, #100]	; (80035e8 <main+0x100>)
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd fe2e 	bl	80011e4 <vQueueAddToRegistry>
	/* Start the created timer.  A block time of zero is used as the timer
	command queue cannot possibly be full here (this is the first timer to
	be created, and it is not yet running).
	http://www.freertos.org/FreeRTOS-timers-xTimerStart.html */
//	xTimerStart( xExampleSoftwareTimer, 0 );
	BaseType_t xReturned = xTaskCreate(
 8003588:	2300      	movs	r3, #0
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	2304      	movs	r3, #4
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	2300      	movs	r3, #0
 8003592:	2282      	movs	r2, #130	; 0x82
 8003594:	4915      	ldr	r1, [pc, #84]	; (80035ec <main+0x104>)
 8003596:	4816      	ldr	r0, [pc, #88]	; (80035f0 <main+0x108>)
 8003598:	f7fd feaa 	bl	80012f0 <xTaskCreate>
 800359c:	6078      	str	r0, [r7, #4]
							configMINIMAL_STACK_SIZE, 		/* The size (in words) of the stack that should be created for the task. */
							NULL, 							/* A parameter that can be passed into the task. */
							4,			/* The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority. */
							NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */

	xReturned = xTaskCreate(
 800359e:	2300      	movs	r3, #0
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	2303      	movs	r3, #3
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	2300      	movs	r3, #0
 80035a8:	2282      	movs	r2, #130	; 0x82
 80035aa:	4912      	ldr	r1, [pc, #72]	; (80035f4 <main+0x10c>)
 80035ac:	4812      	ldr	r0, [pc, #72]	; (80035f8 <main+0x110>)
 80035ae:	f7fd fe9f 	bl	80012f0 <xTaskCreate>
 80035b2:	6078      	str	r0, [r7, #4]
//							configMINIMAL_STACK_SIZE, 		/* The size (in words) of the stack that should be created for the task. */
//							NULL, 							/* A parameter that can be passed into the task. */
//							3,			/* The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority. */
//							NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */

	xReturned = xTaskCreate(
 80035b4:	2300      	movs	r3, #0
 80035b6:	9301      	str	r3, [sp, #4]
 80035b8:	2303      	movs	r3, #3
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	2300      	movs	r3, #0
 80035be:	2282      	movs	r2, #130	; 0x82
 80035c0:	490e      	ldr	r1, [pc, #56]	; (80035fc <main+0x114>)
 80035c2:	480f      	ldr	r0, [pc, #60]	; (8003600 <main+0x118>)
 80035c4:	f7fd fe94 	bl	80012f0 <xTaskCreate>
 80035c8:	6078      	str	r0, [r7, #4]
							NULL, 							/* A parameter that can be passed into the task. */
							3,			/* The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority. */
							NULL );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */


	vTaskStartScheduler();
 80035ca:	f7fe f98b 	bl	80018e4 <vTaskStartScheduler>
	/* If all is well, the scheduler will now be running, and the following line
	will never be reached.  If the following line does execute, then there was
	insufficient FreeRTOS heap memory available for the idle and/or timer tasks
	to be created.  See the memory management section on the FreeRTOS web site
	for more details.  http://www.freertos.org/a00111.html */
	for( ;; );
 80035ce:	e7fe      	b.n	80035ce <main+0xe6>
 80035d0:	0800377d 	.word	0x0800377d
 80035d4:	08004d6c 	.word	0x08004d6c
 80035d8:	200001fc 	.word	0x200001fc
 80035dc:	200001f0 	.word	0x200001f0
 80035e0:	08004d80 	.word	0x08004d80
 80035e4:	20000200 	.word	0x20000200
 80035e8:	08004d8c 	.word	0x08004d8c
 80035ec:	08004d9c 	.word	0x08004d9c
 80035f0:	080038fd 	.word	0x080038fd
 80035f4:	08004dac 	.word	0x08004dac
 80035f8:	08003395 	.word	0x08003395
 80035fc:	08004db4 	.word	0x08004db4
 8003600:	080032d9 	.word	0x080032d9

08003604 <insert>:
}
/*-----------------------------------------------------------*/


void insert(taskProps task) {
 8003604:	b084      	sub	sp, #16
 8003606:	b5b0      	push	{r4, r5, r7, lr}
 8003608:	b08a      	sub	sp, #40	; 0x28
 800360a:	af00      	add	r7, sp, #0
 800360c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8003610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Create cell for task
	taskList task_cell = {
		.handle = task.handle,
 8003614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	taskList task_cell = {
 8003616:	603b      	str	r3, [r7, #0]
		.name = task.name,
 8003618:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
	taskList task_cell = {
 800361a:	607b      	str	r3, [r7, #4]
		.deadline = task.deadline,
 800361c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	taskList task_cell = {
 800361e:	60bb      	str	r3, [r7, #8]
		.task_type = task.task_type,
 8003620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
	taskList task_cell = {
 8003622:	60fb      	str	r3, [r7, #12]
		.creation_time = task.creation_time,
 8003624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
	taskList task_cell = {
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
		.next_cell = NULL,
		.previous_cell = NULL
	};

	// Create space in memory for task
	taskList *pTask = (taskList*)pvPortMalloc(sizeof(taskList));
 8003630:	201c      	movs	r0, #28
 8003632:	f7fd f895 	bl	8000760 <pvPortMalloc>
 8003636:	6238      	str	r0, [r7, #32]
	*pTask = task_cell;
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	461d      	mov	r5, r3
 800363c:	463c      	mov	r4, r7
 800363e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003642:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003646:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	// If there are no active tasks queued
	if (pActiveTasks == NULL) {
 800364a:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <insert+0xfc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d103      	bne.n	800365a <insert+0x56>
		pActiveTasks = pTask;
 8003652:	4a2b      	ldr	r2, [pc, #172]	; (8003700 <insert+0xfc>)
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	6013      	str	r3, [r2, #0]
			currTask->previous_cell = pTask;
			pActiveTasks = pTask;
		}
	}

	return;
 8003658:	e04b      	b.n	80036f2 <insert+0xee>
		taskList* currTask = pActiveTasks;
 800365a:	4b29      	ldr	r3, [pc, #164]	; (8003700 <insert+0xfc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
		while (currTask->next_cell != NULL) {
 8003660:	e016      	b.n	8003690 <insert+0x8c>
			taskState = eTaskGetState(currTask->handle);
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fe f836 	bl	80016d8 <eTaskGetState>
 800366c:	4603      	mov	r3, r0
 800366e:	77fb      	strb	r3, [r7, #31]
			if (taskState == eDeleted) {
 8003670:	7ffb      	ldrb	r3, [r7, #31]
 8003672:	2b04      	cmp	r3, #4
 8003674:	d009      	beq.n	800368a <insert+0x86>
			} else if (task.creation_time + task.deadline < currTask->creation_time + currTask->deadline) {
 8003676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003678:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367a:	441a      	add	r2, r3
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	6919      	ldr	r1, [r3, #16]
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	440b      	add	r3, r1
 8003686:	429a      	cmp	r2, r3
 8003688:	d307      	bcc.n	800369a <insert+0x96>
			currTask = currTask->next_cell;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
		while (currTask->next_cell != NULL) {
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e4      	bne.n	8003662 <insert+0x5e>
 8003698:	e000      	b.n	800369c <insert+0x98>
				break;
 800369a:	bf00      	nop
		if (task.creation_time + task.deadline >= currTask->creation_time + currTask->deadline) {
 800369c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800369e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036a0:	441a      	add	r2, r3
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	6919      	ldr	r1, [r3, #16]
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	440b      	add	r3, r1
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d30a      	bcc.n	80036c6 <insert+0xc2>
			pTask->next_cell = currTask->next_cell;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	695a      	ldr	r2, [r3, #20]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	615a      	str	r2, [r3, #20]
			pTask->previous_cell = currTask;
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	619a      	str	r2, [r3, #24]
			currTask->next_cell = pTask;
 80036be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	615a      	str	r2, [r3, #20]
	return;
 80036c4:	e015      	b.n	80036f2 <insert+0xee>
			if (currTask->previous_cell != NULL) {
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <insert+0xda>
				pTask->previous_cell = currTask->previous_cell;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	699a      	ldr	r2, [r3, #24]
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	619a      	str	r2, [r3, #24]
				currTask->previous_cell->next_cell = pTask;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	6a3a      	ldr	r2, [r7, #32]
 80036dc:	615a      	str	r2, [r3, #20]
			pTask->next_cell = currTask;
 80036de:	6a3b      	ldr	r3, [r7, #32]
 80036e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e2:	615a      	str	r2, [r3, #20]
			currTask->previous_cell = pTask;
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	6a3a      	ldr	r2, [r7, #32]
 80036e8:	619a      	str	r2, [r3, #24]
			pActiveTasks = pTask;
 80036ea:	4a05      	ldr	r2, [pc, #20]	; (8003700 <insert+0xfc>)
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	6013      	str	r3, [r2, #0]
	return;
 80036f0:	bf00      	nop
}
 80036f2:	3728      	adds	r7, #40	; 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80036fa:	b004      	add	sp, #16
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	200001f4 	.word	0x200001f4

08003704 <delete>:

void delete(TaskHandle_t handle) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	if (pActiveTasks == NULL) {
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <delete+0x74>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d02c      	beq.n	800376e <delete+0x6a>
		// Something went wrong
	} else {
		taskList* currTask = pActiveTasks;
 8003714:	4b18      	ldr	r3, [pc, #96]	; (8003778 <delete+0x74>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]
		// Search for task using handle
		while (currTask != NULL) {
 800371a:	e022      	b.n	8003762 <delete+0x5e>
			if (currTask->handle == handle) {
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d11a      	bne.n	800375c <delete+0x58>
				// Delete the task
				vTaskDelete(handle);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7fd ff14 	bl	8001554 <vTaskDelete>

				// If it is the first/only task
				if (currTask->previous_cell == NULL) {
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d104      	bne.n	800373e <delete+0x3a>
					// Move active tasks pointer to next one
					pActiveTasks = currTask->next_cell;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <delete+0x74>)
 800373a:	6013      	str	r3, [r2, #0]
 800373c:	e004      	b.n	8003748 <delete+0x44>
				// If there is a previous task
				} else {
					currTask->previous_cell->next_cell = currTask->next_cell;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	6952      	ldr	r2, [r2, #20]
 8003746:	615a      	str	r2, [r3, #20]
				}

				// If there is a next task
				if (currTask->next_cell != NULL) {
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00c      	beq.n	800376a <delete+0x66>
					currTask->next_cell->previous_cell = currTask->previous_cell;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	6992      	ldr	r2, [r2, #24]
 8003758:	619a      	str	r2, [r3, #24]
				}

				break;
 800375a:	e006      	b.n	800376a <delete+0x66>
			}

			currTask = currTask->next_cell;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	60fb      	str	r3, [r7, #12]
		while (currTask != NULL) {
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1d9      	bne.n	800371c <delete+0x18>
		}
	}
	return;
 8003768:	e000      	b.n	800376c <delete+0x68>
				break;
 800376a:	bf00      	nop
	return;
 800376c:	bf00      	nop
 800376e:	bf00      	nop
}
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	200001f4 	.word	0x200001f4

0800377c <purgeAndRun>:

void purgeAndRun() {
 800377c:	b5b0      	push	{r4, r5, r7, lr}
 800377e:	b090      	sub	sp, #64	; 0x40
 8003780:	af02      	add	r7, sp, #8
	taskList* currTask = pActiveTasks;
 8003782:	4b5b      	ldr	r3, [pc, #364]	; (80038f0 <purgeAndRun+0x174>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
	TickType_t time;

	eTaskState taskState = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23


	while (currTask != NULL) {
 800378e:	e06d      	b.n	800386c <purgeAndRun+0xf0>
		// If it has run
		taskState = eTaskGetState(currTask->handle);
 8003790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f7fd ff9f 	bl	80016d8 <eTaskGetState>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		// If it is overdue
		if (xTaskGetTickCount() < xTaskGetTickCountFromISR()) {
 80037a0:	f7fe f996 	bl	8001ad0 <xTaskGetTickCount>
 80037a4:	4604      	mov	r4, r0
 80037a6:	f7fe f9a3 	bl	8001af0 <xTaskGetTickCountFromISR>
 80037aa:	4603      	mov	r3, r0
 80037ac:	429c      	cmp	r4, r3
 80037ae:	d203      	bcs.n	80037b8 <purgeAndRun+0x3c>
			time = xTaskGetTickCount();
 80037b0:	f7fe f98e 	bl	8001ad0 <xTaskGetTickCount>
 80037b4:	6338      	str	r0, [r7, #48]	; 0x30
 80037b6:	e002      	b.n	80037be <purgeAndRun+0x42>
		} else {
			time = xTaskGetTickCount();
 80037b8:	f7fe f98a 	bl	8001ad0 <xTaskGetTickCount>
 80037bc:	6338      	str	r0, [r7, #48]	; 0x30
		}

		// If the task has been deleted
		if (taskState == eDeleted) {
 80037be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	d103      	bne.n	80037ce <purgeAndRun+0x52>
			vPortFree(currTask);
 80037c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80037c8:	f7fc ffe1 	bl	800078e <vPortFree>
 80037cc:	e04b      	b.n	8003866 <purgeAndRun+0xea>
		// If the task has expired
		} else if (currTask->creation_time + currTask->deadline <= time) {
 80037ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	441a      	add	r2, r3
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	429a      	cmp	r2, r3
 80037dc:	d83c      	bhi.n	8003858 <purgeAndRun+0xdc>
			// Allocate room for it
			overdueTasks *overdueTask = pvPortMalloc(sizeof(overdueTasks));
 80037de:	201c      	movs	r0, #28
 80037e0:	f7fc ffbe 	bl	8000760 <pvPortMalloc>
 80037e4:	61f8      	str	r0, [r7, #28]
			overdueTasks odtask = {
					.handle = currTask->handle,
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	681b      	ldr	r3, [r3, #0]
			overdueTasks odtask = {
 80037ea:	603b      	str	r3, [r7, #0]
					.name = currTask->name,
 80037ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ee:	685b      	ldr	r3, [r3, #4]
			overdueTasks odtask = {
 80037f0:	607b      	str	r3, [r7, #4]
					.deadline = currTask->deadline,
 80037f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f4:	689b      	ldr	r3, [r3, #8]
			overdueTasks odtask = {
 80037f6:	60bb      	str	r3, [r7, #8]
					.task_type = currTask->task_type,
 80037f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fa:	68db      	ldr	r3, [r3, #12]
			overdueTasks odtask = {
 80037fc:	60fb      	str	r3, [r7, #12]
					.creation_time = currTask->creation_time,
 80037fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003800:	691b      	ldr	r3, [r3, #16]
			overdueTasks odtask = {
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	4b3b      	ldr	r3, [pc, #236]	; (80038f4 <purgeAndRun+0x178>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	2300      	movs	r3, #0
 800380c:	61bb      	str	r3, [r7, #24]
					.next_cell = pOverdueTasks,
					.previous_cell = NULL
			};
			// Set pointer content to new overdue task
			*overdueTask = odtask;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	461d      	mov	r5, r3
 8003812:	463c      	mov	r4, r7
 8003814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003818:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800381c:	e885 0007 	stmia.w	r5, {r0, r1, r2}

			// If task is empty
			if (pOverdueTasks != NULL) {
 8003820:	4b34      	ldr	r3, [pc, #208]	; (80038f4 <purgeAndRun+0x178>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <purgeAndRun+0xb4>
				pOverdueTasks->previous_cell = overdueTask;
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <purgeAndRun+0x178>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69fa      	ldr	r2, [r7, #28]
 800382e:	619a      	str	r2, [r3, #24]
			};
			pOverdueTasks = overdueTask;
 8003830:	4a30      	ldr	r2, [pc, #192]	; (80038f4 <purgeAndRun+0x178>)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	6013      	str	r3, [r2, #0]

			// Adjust pointers
			pActiveTasks = currTask->next_cell;
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	4a2d      	ldr	r2, [pc, #180]	; (80038f0 <purgeAndRun+0x174>)
 800383c:	6013      	str	r3, [r2, #0]
			pActiveTasks->previous_cell = NULL;
 800383e:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <purgeAndRun+0x174>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	619a      	str	r2, [r3, #24]

			// Delete task, free memory
			vTaskDelete(currTask->handle);
 8003846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fe82 	bl	8001554 <vTaskDelete>
			vPortFree(currTask);
 8003850:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003852:	f7fc ff9c 	bl	800078e <vPortFree>
 8003856:	e006      	b.n	8003866 <purgeAndRun+0xea>
		} else {
			// Not overdue, not deleted. This is a valid task
			currTask->previous_cell = NULL;
 8003858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800385a:	2200      	movs	r2, #0
 800385c:	619a      	str	r2, [r3, #24]
			pActiveTasks = currTask;
 800385e:	4a24      	ldr	r2, [pc, #144]	; (80038f0 <purgeAndRun+0x174>)
 8003860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003862:	6013      	str	r3, [r2, #0]
			break;
 8003864:	e005      	b.n	8003872 <purgeAndRun+0xf6>
		}
		currTask = currTask->next_cell;
 8003866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	637b      	str	r3, [r7, #52]	; 0x34
	while (currTask != NULL) {
 800386c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800386e:	2b00      	cmp	r3, #0
 8003870:	d18e      	bne.n	8003790 <purgeAndRun+0x14>
	}
	// Start count of tasks in list
	taskList* countTask = pActiveTasks;
 8003872:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <purgeAndRun+0x174>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
	int num_tasks = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (countTask != NULL){
 800387c:	e005      	b.n	800388a <purgeAndRun+0x10e>
		countTask = countTask->next_cell;
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
		num_tasks += 1;
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	3301      	adds	r3, #1
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
	while (countTask != NULL){
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f6      	bne.n	800387e <purgeAndRun+0x102>
	}

	// Assign priorities
	for (int i = 0; i < num_tasks; i++) {
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	e00e      	b.n	80038b4 <purgeAndRun+0x138>
		vTaskPrioritySet(currTask->handle, num_tasks-i+1);
 8003896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	3301      	adds	r3, #1
 80038a2:	4619      	mov	r1, r3
 80038a4:	f7fd ff70 	bl	8001788 <vTaskPrioritySet>
		currTask = currTask->next_cell;
 80038a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < num_tasks; i++) {
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	3301      	adds	r3, #1
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
 80038b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	429a      	cmp	r2, r3
 80038ba:	dbec      	blt.n	8003896 <purgeAndRun+0x11a>
	}

	// If there is an active task, update expiration timer
	if (pActiveTasks != NULL) {
 80038bc:	4b0c      	ldr	r3, [pc, #48]	; (80038f0 <purgeAndRun+0x174>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <purgeAndRun+0x16a>
		xTimerChangePeriod(
 80038c4:	4b0c      	ldr	r3, [pc, #48]	; (80038f8 <purgeAndRun+0x17c>)
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <purgeAndRun+0x174>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <purgeAndRun+0x174>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	441a      	add	r2, r3
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	1ad2      	subs	r2, r2, r3
 80038da:	2300      	movs	r3, #0
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2300      	movs	r3, #0
 80038e0:	2104      	movs	r1, #4
 80038e2:	f7fe fe87 	bl	80025f4 <xTimerGenericCommand>
				xExpirationTimer,
				pActiveTasks->deadline + pActiveTasks->creation_time - time,
				0);
	}
}
 80038e6:	bf00      	nop
 80038e8:	3738      	adds	r7, #56	; 0x38
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bdb0      	pop	{r4, r5, r7, pc}
 80038ee:	bf00      	nop
 80038f0:	200001f4 	.word	0x200001f4
 80038f4:	200001f8 	.word	0x200001f8
 80038f8:	200001fc 	.word	0x200001fc

080038fc <dd_scheduler>:


void dd_scheduler(void *pvParameters) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08c      	sub	sp, #48	; 0x30
 8003900:	af02      	add	r7, sp, #8
 8003902:	6078      	str	r0, [r7, #4]
	queueMsg msg;
	while (1) {
		xQueueReceive( xQueue, &msg, portMAX_DELAY );
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <dd_scheduler+0x74>)
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	f107 010c 	add.w	r1, r7, #12
 800390c:	2300      	movs	r3, #0
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
 8003912:	f7fd fa27 	bl	8000d64 <xQueueGenericReceive>

		switch(msg.msg_type) {
 8003916:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800391a:	2b03      	cmp	r3, #3
 800391c:	d825      	bhi.n	800396a <dd_scheduler+0x6e>
 800391e:	a201      	add	r2, pc, #4	; (adr r2, 8003924 <dd_scheduler+0x28>)
 8003920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003924:	08003935 	.word	0x08003935
 8003928:	08003953 	.word	0x08003953
 800392c:	0800396b 	.word	0x0800396b
 8003930:	0800396b 	.word	0x0800396b
		case CREATE:
			insert(msg.task_props);
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800393e:	f7ff fe61 	bl	8003604 <insert>
			xQueueSend(msg.cb_queue, "y", portMAX_DELAY);
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	2300      	movs	r3, #0
 8003946:	f04f 32ff 	mov.w	r2, #4294967295
 800394a:	490a      	ldr	r1, [pc, #40]	; (8003974 <dd_scheduler+0x78>)
 800394c:	f7fc fff2 	bl	8000934 <xQueueGenericSend>
			break;
 8003950:	e00b      	b.n	800396a <dd_scheduler+0x6e>
		case DELETE:
			delete(msg.task_props.handle);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fed5 	bl	8003704 <delete>
			xQueueSend(msg.cb_queue, "y", portMAX_DELAY);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	2300      	movs	r3, #0
 800395e:	f04f 32ff 	mov.w	r2, #4294967295
 8003962:	4904      	ldr	r1, [pc, #16]	; (8003974 <dd_scheduler+0x78>)
 8003964:	f7fc ffe6 	bl	8000934 <xQueueGenericSend>
			break;
 8003968:	bf00      	nop

			break;
		case OVERDUE:
			break;
		}
		purgeAndRun();
 800396a:	f7ff ff07 	bl	800377c <purgeAndRun>
		xQueueReceive( xQueue, &msg, portMAX_DELAY );
 800396e:	e7c9      	b.n	8003904 <dd_scheduler+0x8>
 8003970:	200001f0 	.word	0x200001f0
 8003974:	08004dc8 	.word	0x08004dc8

08003978 <dd_tcreate>:
	}
}

TaskHandle_t dd_tcreate (createTaskParams create_task_params){
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b091      	sub	sp, #68	; 0x44
 800397c:	af02      	add	r7, sp, #8
 800397e:	463c      	mov	r4, r7
 8003980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TaskHandle_t xHandle = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	633b      	str	r3, [r7, #48]	; 0x30
	xTaskCreate(
		create_task_params.func,				/* The function that implements the task. */
 8003988:	68f8      	ldr	r0, [r7, #12]
		create_task_params.name, 				/* Text name for the task, just to help debugging. */
 800398a:	6839      	ldr	r1, [r7, #0]
	xTaskCreate(
 800398c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003990:	9301      	str	r3, [sp, #4]
 8003992:	2300      	movs	r3, #0
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	2300      	movs	r3, #0
 8003998:	2282      	movs	r2, #130	; 0x82
 800399a:	f7fd fca9 	bl	80012f0 <xTaskCreate>
		NULL, 							/* A parameter that can be passed into the task. */
		mainMIN_TASK_PRIORITY,			/* The priority to assign to the task.  tskIDLE_PRIORITY (which is 0) is the lowest priority.  configMAX_PRIORITIES - 1 is the highest priority. */
		&xHandle );							/* Used to obtain a handle to the created task.  Not used in this simple demo, so set to NULL. */

	// Create callback queue for backwards communication
	xQueueHandle cb_queue = xQueueCreate(1, sizeof(char));
 800399e:	2200      	movs	r2, #0
 80039a0:	2101      	movs	r1, #1
 80039a2:	2001      	movs	r0, #1
 80039a4:	f7fc ff6e 	bl	8000884 <xQueueGenericCreate>
 80039a8:	6378      	str	r0, [r7, #52]	; 0x34

	// Build message for global queue
	queueMsg msg = {
 80039aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	61bb      	str	r3, [r7, #24]
			.cb_queue = cb_queue,
			.task_props = {
					.handle = xHandle,
					.name = create_task_params.name,
 80039b2:	683b      	ldr	r3, [r7, #0]
	queueMsg msg = {
 80039b4:	61fb      	str	r3, [r7, #28]
					.deadline = create_task_params.deadline,
 80039b6:	687b      	ldr	r3, [r7, #4]
	queueMsg msg = {
 80039b8:	623b      	str	r3, [r7, #32]
					.task_type = create_task_params.task_type,
 80039ba:	7a3b      	ldrb	r3, [r7, #8]
	queueMsg msg = {
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
					.creation_time = xTaskGetTickCount()
 80039be:	f7fe f887 	bl	8001ad0 <xTaskGetTickCount>
 80039c2:	4603      	mov	r3, r0
	queueMsg msg = {
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80039c6:	2300      	movs	r3, #0
 80039c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			},
			.msg_type = CREATE
	};

	// Put message on global queue
	xQueueSend(xQueue, &msg, portMAX_DELAY);
 80039cc:	4b0d      	ldr	r3, [pc, #52]	; (8003a04 <dd_tcreate+0x8c>)
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	f107 0114 	add.w	r1, r7, #20
 80039d4:	2300      	movs	r3, #0
 80039d6:	f04f 32ff 	mov.w	r2, #4294967295
 80039da:	f7fc ffab 	bl	8000934 <xQueueGenericSend>

	// Wait on receiver to call callback queue
	char res = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	74fb      	strb	r3, [r7, #19]
	xQueueReceive(cb_queue, &res, portMAX_DELAY);
 80039e2:	f107 0113 	add.w	r1, r7, #19
 80039e6:	2300      	movs	r3, #0
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039ee:	f7fd f9b9 	bl	8000d64 <xQueueGenericReceive>

	// Delete callback queue
	vQueueDelete(cb_queue);
 80039f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80039f4:	f7fd fac8 	bl	8000f88 <vQueueDelete>


	return xHandle;
 80039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	373c      	adds	r7, #60	; 0x3c
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200001f0 	.word	0x200001f0

08003a08 <dd_delete>:

uint32_t dd_delete(TaskHandle_t t_handle){
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08c      	sub	sp, #48	; 0x30
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

	// Create callback queue for backwards communication
	xQueueHandle cb_queue = xQueueCreate(1, sizeof(char));
 8003a10:	2200      	movs	r2, #0
 8003a12:	2101      	movs	r1, #1
 8003a14:	2001      	movs	r0, #1
 8003a16:	f7fc ff35 	bl	8000884 <xQueueGenericCreate>
 8003a1a:	62f8      	str	r0, [r7, #44]	; 0x2c

	// Build message for global queue
	queueMsg msg = {
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	2300      	movs	r3, #0
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			},
			.msg_type = DELETE
	};

	// Put message on global queue
	xQueueSend(xQueue, &msg, 0);
 8003a3a:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <dd_delete+0x6c>)
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f107 0110 	add.w	r1, r7, #16
 8003a42:	2300      	movs	r3, #0
 8003a44:	2200      	movs	r2, #0
 8003a46:	f7fc ff75 	bl	8000934 <xQueueGenericSend>

	// Wait on receiver to call callback queue
	char res = 0;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
	xQueueReceive(cb_queue, &res, portMAX_DELAY);
 8003a4e:	f107 010f 	add.w	r1, r7, #15
 8003a52:	2300      	movs	r3, #0
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295
 8003a58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a5a:	f7fd f983 	bl	8000d64 <xQueueGenericReceive>
	// Delete callback queue
	vQueueDelete(cb_queue);
 8003a5e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a60:	f7fd fa92 	bl	8000f88 <vQueueDelete>

	// Delete task
	vTaskDelete(t_handle);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7fd fd75 	bl	8001554 <vTaskDelete>

	return 0;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3730      	adds	r7, #48	; 0x30
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200001f0 	.word	0x200001f0

08003a78 <dd_return_active_list>:

taskNames *dd_return_active_list(){
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	; 0x28
 8003a7c:	af00      	add	r7, sp, #0
	if (pActiveTasks == NULL) {
 8003a7e:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <dd_return_active_list+0x8c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <dd_return_active_list+0x12>
		return NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e037      	b.n	8003afa <dd_return_active_list+0x82>
	}

	taskNames *head_task_names;
	taskNames *prev_task_name;
	taskList *curr_task = pActiveTasks;
 8003a8a:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <dd_return_active_list+0x8c>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	623b      	str	r3, [r7, #32]

	taskNames temp_task_name = {
		.name = curr_task->name,
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	685b      	ldr	r3, [r3, #4]
	taskNames temp_task_name = {
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
		.next_cell = NULL
	};

	taskNames *task_name = (taskNames*)pvPortMalloc(sizeof(taskNames));
 8003a9a:	2008      	movs	r0, #8
 8003a9c:	f7fc fe60 	bl	8000760 <pvPortMalloc>
 8003aa0:	61f8      	str	r0, [r7, #28]
	*task_name = temp_task_name;
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f107 030c 	add.w	r3, r7, #12
 8003aaa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003aae:	e882 0003 	stmia.w	r2, {r0, r1}
	head_task_names = task_name;
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	61bb      	str	r3, [r7, #24]
	prev_task_name = task_name;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
	curr_task = curr_task->next_cell;
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	623b      	str	r3, [r7, #32]

	while (curr_task != NULL) {
 8003ac0:	e017      	b.n	8003af2 <dd_return_active_list+0x7a>
		taskNames temp_task_name = {
			.name = curr_task->name,
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	685b      	ldr	r3, [r3, #4]
		taskNames temp_task_name = {
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60bb      	str	r3, [r7, #8]
			.next_cell = NULL
		};

		taskNames *task_name = (taskNames*)pvPortMalloc(sizeof(taskNames));
 8003acc:	2008      	movs	r0, #8
 8003ace:	f7fc fe47 	bl	8000760 <pvPortMalloc>
 8003ad2:	6178      	str	r0, [r7, #20]
		*task_name = temp_task_name;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003ade:	e882 0003 	stmia.w	r2, {r0, r1}

		prev_task_name->next_cell = task_name;
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	605a      	str	r2, [r3, #4]
		prev_task_name = task_name;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
		curr_task = curr_task->next_cell;
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	695b      	ldr	r3, [r3, #20]
 8003af0:	623b      	str	r3, [r7, #32]
	while (curr_task != NULL) {
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e4      	bne.n	8003ac2 <dd_return_active_list+0x4a>
	}

	return head_task_names;
 8003af8:	69bb      	ldr	r3, [r7, #24]
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3728      	adds	r7, #40	; 0x28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	200001f4 	.word	0x200001f4

08003b08 <dd_return_overdue_list>:

taskNames *dd_return_overdue_list(){
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08a      	sub	sp, #40	; 0x28
 8003b0c:	af00      	add	r7, sp, #0

	if (pOverdueTasks == NULL) {
 8003b0e:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <dd_return_overdue_list+0x90>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <dd_return_overdue_list+0x12>
		return NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	e03a      	b.n	8003b90 <dd_return_overdue_list+0x88>
	}

	taskNames *head_task_names;
	taskNames *prev_task_name;
	taskList *curr_task = pOverdueTasks;
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <dd_return_overdue_list+0x90>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	623b      	str	r3, [r7, #32]

	taskNames temp_task_name = {
		.name = curr_task->name,
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	685b      	ldr	r3, [r3, #4]
	taskNames temp_task_name = {
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
		.next_cell = NULL
	};

	taskNames *task_name = (taskNames*)pvPortMalloc(sizeof(taskNames));
 8003b2a:	2008      	movs	r0, #8
 8003b2c:	f7fc fe18 	bl	8000760 <pvPortMalloc>
 8003b30:	61f8      	str	r0, [r7, #28]
	*task_name = temp_task_name;
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	461a      	mov	r2, r3
 8003b36:	f107 030c 	add.w	r3, r7, #12
 8003b3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b3e:	e882 0003 	stmia.w	r2, {r0, r1}
	head_task_names = task_name;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	61bb      	str	r3, [r7, #24]
	prev_task_name = task_name;
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
	curr_task = curr_task->next_cell;
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	623b      	str	r3, [r7, #32]

	while (curr_task != NULL) {
 8003b50:	e017      	b.n	8003b82 <dd_return_overdue_list+0x7a>
		taskNames temp_task_name = {
			.name = curr_task->name,
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	685b      	ldr	r3, [r3, #4]
		taskNames temp_task_name = {
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]
			.next_cell = NULL
		};

		taskNames *task_name = (taskNames*)pvPortMalloc(sizeof(taskNames));
 8003b5c:	2008      	movs	r0, #8
 8003b5e:	f7fc fdff 	bl	8000760 <pvPortMalloc>
 8003b62:	6178      	str	r0, [r7, #20]
		*task_name = temp_task_name;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	461a      	mov	r2, r3
 8003b68:	1d3b      	adds	r3, r7, #4
 8003b6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b6e:	e882 0003 	stmia.w	r2, {r0, r1}

		prev_task_name->next_cell = task_name;
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	605a      	str	r2, [r3, #4]
		prev_task_name = task_name;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
		curr_task = curr_task->next_cell;
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	623b      	str	r3, [r7, #32]
	while (curr_task != NULL) {
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1e4      	bne.n	8003b52 <dd_return_overdue_list+0x4a>
	}

	pOverdueTasks = NULL;
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <dd_return_overdue_list+0x90>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]

	return head_task_names;
 8003b8e:	69bb      	ldr	r3, [r7, #24]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3728      	adds	r7, #40	; 0x28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	200001f8 	.word	0x200001f8

08003b9c <vApplicationTickHook>:



void vApplicationTickHook( void )
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]

	/* The RTOS tick hook function is enabled by setting configUSE_TICK_HOOK to
	1 in FreeRTOSConfig.h.

	"Give" the semaphore on every 500th tick interrupt. */
	ulCount++;
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <vApplicationTickHook+0x3c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	4a0a      	ldr	r2, [pc, #40]	; (8003bd8 <vApplicationTickHook+0x3c>)
 8003bae:	6013      	str	r3, [r2, #0]
	if( ulCount >= 500UL )
 8003bb0:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <vApplicationTickHook+0x3c>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bb8:	d309      	bcc.n	8003bce <vApplicationTickHook+0x32>

		xHigherPriorityTaskWoken was initialised to pdFALSE, and will be set to
		pdTRUE by xSemaphoreGiveFromISR() if giving the semaphore unblocked a
		task that has equal or higher priority than the interrupted task.
		http://www.freertos.org/a00124.html */
		xSemaphoreGiveFromISR( xEventSemaphore, &xHigherPriorityTaskWoken );
 8003bba:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <vApplicationTickHook+0x40>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1d3a      	adds	r2, r7, #4
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fd f844 	bl	8000c50 <xQueueGiveFromISR>
		ulCount = 0UL;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <vApplicationTickHook+0x3c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
	are using.  http://www.freertos.org/a00090.html

	In this case, the function is running in the context of the tick interrupt,
	which will automatically check for the higher priority task to run anyway,
	so no further action is required. */
}
 8003bce:	bf00      	nop
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000218 	.word	0x20000218
 8003bdc:	20000200 	.word	0x20000200

08003be0 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 8003be4:	e7fe      	b.n	8003be4 <vApplicationMallocFailedHook+0x4>

08003be6 <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003bf0:	e7fe      	b.n	8003bf0 <vApplicationStackOverflowHook+0xa>
	...

08003bf4 <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
volatile size_t xFreeStackSpace;

	xIdleCount += 1;
 8003bfa:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <vApplicationIdleHook+0x1c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	4a03      	ldr	r2, [pc, #12]	; (8003c10 <vApplicationIdleHook+0x1c>)
 8003c02:	6013      	str	r3, [r2, #0]
//		/* By now, the kernel has allocated everything it is going to, so
//		if there is a lot of heap remaining unallocated then
//		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
//		reduced accordingly. */
//	}
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	20000214 	.word	0x20000214

08003c14 <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f7ff fa91 	bl	8003140 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c26:	e003      	b.n	8003c30 <LoopCopyDataInit>

08003c28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c28:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003c2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c2e:	3104      	adds	r1, #4

08003c30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c30:	480a      	ldr	r0, [pc, #40]	; (8003c5c <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003c32:	4b0b      	ldr	r3, [pc, #44]	; (8003c60 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003c34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003c38:	d3f6      	bcc.n	8003c28 <CopyDataInit>
  ldr  r2, =_sbss
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	; (8003c64 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003c3c:	e002      	b.n	8003c44 <LoopFillZerobss>

08003c3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003c3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c40:	f842 3b04 	str.w	r3, [r2], #4

08003c44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c44:	4b08      	ldr	r3, [pc, #32]	; (8003c68 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003c46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c48:	d3f9      	bcc.n	8003c3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c4a:	f000 f8f1 	bl	8003e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c4e:	f000 fb61 	bl	8004314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c52:	f7ff fc49 	bl	80034e8 <main>
  bx  lr    
 8003c56:	4770      	bx	lr
  ldr  r3, =_sidata
 8003c58:	08004e68 	.word	0x08004e68
  ldr  r0, =_sdata
 8003c5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c60:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8003c64:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8003c68:	200002e8 	.word	0x200002e8

08003c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c6c:	e7fe      	b.n	8003c6c <ADC_IRQHandler>

08003c6e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
}
 8003c72:	bf00      	nop
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003c80:	e7fe      	b.n	8003c80 <HardFault_Handler+0x4>

08003c82 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003c82:	b480      	push	{r7}
 8003c84:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003c86:	e7fe      	b.n	8003c86 <MemManage_Handler+0x4>

08003c88 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003c8c:	e7fe      	b.n	8003c8c <BusFault_Handler+0x4>

08003c8e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003c92:	e7fe      	b.n	8003c92 <UsageFault_Handler+0x4>

08003c94 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003cac:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <ITM_SendChar+0x58>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d01a      	beq.n	8003cee <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003cb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cbc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003cc0:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d012      	beq.n	8003cee <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8003cc8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ccc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003cd0:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8003cd8:	bf00      	nop
 8003cda:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0fa      	beq.n	8003cda <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003ce4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003cee:	687b      	ldr	r3, [r7, #4]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	e000edf0 	.word	0xe000edf0

08003d00 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	e009      	b.n	8003d26 <_write+0x26>
	{
	   ITM_SendChar( *ptr++ );
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	60ba      	str	r2, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ffc2 	bl	8003ca4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	3301      	adds	r3, #1
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	dbf1      	blt.n	8003d12 <_write+0x12>
	}

	return len;
 8003d2e:	687b      	ldr	r3, [r7, #4]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <_sbrk>:

void * _sbrk(int32_t incr)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003d40:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <_sbrk+0x38>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <_sbrk+0x16>
		heap_end = & end;
 8003d48:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <_sbrk+0x38>)
 8003d4a:	4a0a      	ldr	r2, [pc, #40]	; (8003d74 <_sbrk+0x3c>)
 8003d4c:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 8003d4e:	4b08      	ldr	r3, [pc, #32]	; (8003d70 <_sbrk+0x38>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003d54:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <_sbrk+0x38>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <_sbrk+0x38>)
 8003d5e:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003d60:	68fb      	ldr	r3, [r7, #12]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	2000021c 	.word	0x2000021c
 8003d74:	200002e8 	.word	0x200002e8

08003d78 <_close>:

int _close(int32_t file)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003d80:	4b05      	ldr	r3, [pc, #20]	; (8003d98 <_close+0x20>)
 8003d82:	2258      	movs	r2, #88	; 0x58
 8003d84:	601a      	str	r2, [r3, #0]
	return -1;
 8003d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	200002e4 	.word	0x200002e4

08003d9c <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8003da6:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <_fstat+0x20>)
 8003da8:	2258      	movs	r2, #88	; 0x58
 8003daa:	601a      	str	r2, [r3, #0]
	return -1;
 8003dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	200002e4 	.word	0x200002e4

08003dc0 <_isatty>:

int _isatty(int32_t file)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <_isatty+0x1c>)
 8003dca:	2258      	movs	r2, #88	; 0x58
 8003dcc:	601a      	str	r2, [r3, #0]
	return 0;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	200002e4 	.word	0x200002e4

08003de0 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003dec:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <_lseek+0x24>)
 8003dee:	2258      	movs	r2, #88	; 0x58
 8003df0:	601a      	str	r2, [r3, #0]
	return -1;
 8003df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	200002e4 	.word	0x200002e4

08003e08 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <_read+0x24>)
 8003e16:	2258      	movs	r2, #88	; 0x58
 8003e18:	601a      	str	r2, [r3, #0]
	return -1;
 8003e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	200002e4 	.word	0x200002e4

08003e30 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e34:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <SystemInit+0x60>)
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <SystemInit+0x60>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003e44:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <SystemInit+0x64>)
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <SystemInit+0x64>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e50:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <SystemInit+0x64>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003e56:	4a0f      	ldr	r2, [pc, #60]	; (8003e94 <SystemInit+0x64>)
 8003e58:	4b0e      	ldr	r3, [pc, #56]	; (8003e94 <SystemInit+0x64>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <SystemInit+0x64>)
 8003e68:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <SystemInit+0x68>)
 8003e6a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003e6c:	4a09      	ldr	r2, [pc, #36]	; (8003e94 <SystemInit+0x64>)
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <SystemInit+0x64>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <SystemInit+0x64>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003e7e:	f000 f80d 	bl	8003e9c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e82:	4b03      	ldr	r3, [pc, #12]	; (8003e90 <SystemInit+0x60>)
 8003e84:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e88:	609a      	str	r2, [r3, #8]
#endif
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	e000ed00 	.word	0xe000ed00
 8003e94:	40023800 	.word	0x40023800
 8003e98:	24003010 	.word	0x24003010

08003e9c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003eaa:	4a36      	ldr	r2, [pc, #216]	; (8003f84 <SetSysClock+0xe8>)
 8003eac:	4b35      	ldr	r3, [pc, #212]	; (8003f84 <SetSysClock+0xe8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003eb6:	4b33      	ldr	r3, [pc, #204]	; (8003f84 <SetSysClock+0xe8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d103      	bne.n	8003ed4 <SetSysClock+0x38>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003ed2:	d1f0      	bne.n	8003eb6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003ed4:	4b2b      	ldr	r3, [pc, #172]	; (8003f84 <SetSysClock+0xe8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	e001      	b.n	8003eea <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d142      	bne.n	8003f76 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003ef0:	4a24      	ldr	r2, [pc, #144]	; (8003f84 <SetSysClock+0xe8>)
 8003ef2:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <SetSysClock+0xe8>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efa:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003efc:	4a22      	ldr	r2, [pc, #136]	; (8003f88 <SetSysClock+0xec>)
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <SetSysClock+0xec>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f06:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003f08:	4a1e      	ldr	r2, [pc, #120]	; (8003f84 <SetSysClock+0xe8>)
 8003f0a:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <SetSysClock+0xe8>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <SetSysClock+0xe8>)
 8003f12:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <SetSysClock+0xe8>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003f1c:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <SetSysClock+0xe8>)
 8003f1e:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <SetSysClock+0xe8>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003f26:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003f28:	4b16      	ldr	r3, [pc, #88]	; (8003f84 <SetSysClock+0xe8>)
 8003f2a:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <SetSysClock+0xf0>)
 8003f2c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003f2e:	4a15      	ldr	r2, [pc, #84]	; (8003f84 <SetSysClock+0xe8>)
 8003f30:	4b14      	ldr	r3, [pc, #80]	; (8003f84 <SetSysClock+0xe8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f38:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003f3a:	bf00      	nop
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <SetSysClock+0xe8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f9      	beq.n	8003f3c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <SetSysClock+0xf4>)
 8003f4a:	f240 6205 	movw	r2, #1541	; 0x605
 8003f4e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003f50:	4a0c      	ldr	r2, [pc, #48]	; (8003f84 <SetSysClock+0xe8>)
 8003f52:	4b0c      	ldr	r3, [pc, #48]	; (8003f84 <SetSysClock+0xe8>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 0303 	bic.w	r3, r3, #3
 8003f5a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003f5c:	4a09      	ldr	r2, [pc, #36]	; (8003f84 <SetSysClock+0xe8>)
 8003f5e:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <SetSysClock+0xe8>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003f68:	bf00      	nop
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <SetSysClock+0xe8>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d1f9      	bne.n	8003f6a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	07405408 	.word	0x07405408
 8003f90:	40023c00 	.word	0x40023c00

08003f94 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003fa4:	e004      	b.n	8003fb0 <ts_itoa+0x1c>
		div *= base;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d2f3      	bcs.n	8003fa6 <ts_itoa+0x12>

	while (div != 0)
 8003fbe:	e029      	b.n	8004014 <ts_itoa+0x80>
	{
		int num = d/div;
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fd2:	fb02 f201 	mul.w	r2, r2, r1
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003fda:	697a      	ldr	r2, [r7, #20]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8003fe2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	2b09      	cmp	r3, #9
 8003fe8:	dd0a      	ble.n	8004000 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	1c59      	adds	r1, r3, #1
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	6011      	str	r1, [r2, #0]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	3237      	adds	r2, #55	; 0x37
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e009      	b.n	8004014 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	1c59      	adds	r1, r3, #1
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	6011      	str	r1, [r2, #0]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	3230      	adds	r2, #48	; 0x30
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1d2      	bne.n	8003fc0 <ts_itoa+0x2c>
	}
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b088      	sub	sp, #32
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8004036:	e07d      	b.n	8004134 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b25      	cmp	r3, #37	; 0x25
 800403e:	d171      	bne.n	8004124 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	3301      	adds	r3, #1
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d01e      	beq.n	800408c <ts_formatstring+0x66>
 800404e:	2b64      	cmp	r3, #100	; 0x64
 8004050:	dc06      	bgt.n	8004060 <ts_formatstring+0x3a>
 8004052:	2b58      	cmp	r3, #88	; 0x58
 8004054:	d050      	beq.n	80040f8 <ts_formatstring+0xd2>
 8004056:	2b63      	cmp	r3, #99	; 0x63
 8004058:	d00e      	beq.n	8004078 <ts_formatstring+0x52>
 800405a:	2b25      	cmp	r3, #37	; 0x25
 800405c:	d058      	beq.n	8004110 <ts_formatstring+0xea>
 800405e:	e05d      	b.n	800411c <ts_formatstring+0xf6>
 8004060:	2b73      	cmp	r3, #115	; 0x73
 8004062:	d02b      	beq.n	80040bc <ts_formatstring+0x96>
 8004064:	2b73      	cmp	r3, #115	; 0x73
 8004066:	dc02      	bgt.n	800406e <ts_formatstring+0x48>
 8004068:	2b69      	cmp	r3, #105	; 0x69
 800406a:	d00f      	beq.n	800408c <ts_formatstring+0x66>
 800406c:	e056      	b.n	800411c <ts_formatstring+0xf6>
 800406e:	2b75      	cmp	r3, #117	; 0x75
 8004070:	d037      	beq.n	80040e2 <ts_formatstring+0xbc>
 8004072:	2b78      	cmp	r3, #120	; 0x78
 8004074:	d040      	beq.n	80040f8 <ts_formatstring+0xd2>
 8004076:	e051      	b.n	800411c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	60fa      	str	r2, [r7, #12]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	1d11      	adds	r1, r2, #4
 8004082:	6079      	str	r1, [r7, #4]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]
				break;
 800408a:	e047      	b.n	800411c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	1d1a      	adds	r2, r3, #4
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	2b00      	cmp	r3, #0
 800409a:	da07      	bge.n	80040ac <ts_formatstring+0x86>
					{
						val *= -1;
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	425b      	negs	r3, r3
 80040a0:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	60fa      	str	r2, [r7, #12]
 80040a8:	222d      	movs	r2, #45	; 0x2d
 80040aa:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80040ac:	69f9      	ldr	r1, [r7, #28]
 80040ae:	f107 030c 	add.w	r3, r7, #12
 80040b2:	220a      	movs	r2, #10
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff ff6d 	bl	8003f94 <ts_itoa>
				}
				break;
 80040ba:	e02f      	b.n	800411c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80040c6:	e007      	b.n	80040d8 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	60fa      	str	r2, [r7, #12]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	1c51      	adds	r1, r2, #1
 80040d2:	61b9      	str	r1, [r7, #24]
 80040d4:	7812      	ldrb	r2, [r2, #0]
 80040d6:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1f3      	bne.n	80040c8 <ts_formatstring+0xa2>
					}
				}
				break;
 80040e0:	e01c      	b.n	800411c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	1d1a      	adds	r2, r3, #4
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	f107 030c 	add.w	r3, r7, #12
 80040ee:	220a      	movs	r2, #10
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ff4f 	bl	8003f94 <ts_itoa>
				break;
 80040f6:	e011      	b.n	800411c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	1d1a      	adds	r2, r3, #4
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4619      	mov	r1, r3
 8004102:	f107 030c 	add.w	r3, r7, #12
 8004106:	2210      	movs	r2, #16
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff ff43 	bl	8003f94 <ts_itoa>
				break;
 800410e:	e005      	b.n	800411c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	60fa      	str	r2, [r7, #12]
 8004116:	2225      	movs	r2, #37	; 0x25
 8004118:	701a      	strb	r2, [r3, #0]
				  break;
 800411a:	bf00      	nop
			}
			fmt++;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	3301      	adds	r3, #1
 8004120:	60bb      	str	r3, [r7, #8]
 8004122:	e007      	b.n	8004134 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	60fa      	str	r2, [r7, #12]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	1c51      	adds	r1, r2, #1
 800412e:	60b9      	str	r1, [r7, #8]
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f47f af7d 	bne.w	8004038 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	461a      	mov	r2, r3
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	1ad3      	subs	r3, r2, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	3720      	adds	r7, #32
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
	int length = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8004162:	e081      	b.n	8004268 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b25      	cmp	r3, #37	; 0x25
 800416a:	d177      	bne.n	800425c <ts_formatlength+0x108>
		{
			++fmt;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3301      	adds	r3, #1
 8004170:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	3b58      	subs	r3, #88	; 0x58
 8004178:	2b20      	cmp	r3, #32
 800417a:	d86a      	bhi.n	8004252 <ts_formatlength+0xfe>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <ts_formatlength+0x30>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	08004245 	.word	0x08004245
 8004188:	08004253 	.word	0x08004253
 800418c:	08004253 	.word	0x08004253
 8004190:	08004253 	.word	0x08004253
 8004194:	08004253 	.word	0x08004253
 8004198:	08004253 	.word	0x08004253
 800419c:	08004253 	.word	0x08004253
 80041a0:	08004253 	.word	0x08004253
 80041a4:	08004253 	.word	0x08004253
 80041a8:	08004253 	.word	0x08004253
 80041ac:	08004253 	.word	0x08004253
 80041b0:	08004209 	.word	0x08004209
 80041b4:	08004217 	.word	0x08004217
 80041b8:	08004253 	.word	0x08004253
 80041bc:	08004253 	.word	0x08004253
 80041c0:	08004253 	.word	0x08004253
 80041c4:	08004253 	.word	0x08004253
 80041c8:	08004217 	.word	0x08004217
 80041cc:	08004253 	.word	0x08004253
 80041d0:	08004253 	.word	0x08004253
 80041d4:	08004253 	.word	0x08004253
 80041d8:	08004253 	.word	0x08004253
 80041dc:	08004253 	.word	0x08004253
 80041e0:	08004253 	.word	0x08004253
 80041e4:	08004253 	.word	0x08004253
 80041e8:	08004253 	.word	0x08004253
 80041ec:	08004253 	.word	0x08004253
 80041f0:	08004225 	.word	0x08004225
 80041f4:	08004253 	.word	0x08004253
 80041f8:	08004217 	.word	0x08004217
 80041fc:	08004253 	.word	0x08004253
 8004200:	08004253 	.word	0x08004253
 8004204:	08004245 	.word	0x08004245
			{
			  case 'c':
		  		  va_arg(va, int);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	3304      	adds	r3, #4
 800420c:	603b      	str	r3, [r7, #0]
				  ++length;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3301      	adds	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
				  break;
 8004214:	e025      	b.n	8004262 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	330b      	adds	r3, #11
 800421a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	3304      	adds	r3, #4
 8004220:	603b      	str	r3, [r7, #0]
				  break;
 8004222:	e01e      	b.n	8004262 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	1d1a      	adds	r2, r3, #4
 8004228:	603a      	str	r2, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 800422e:	e002      	b.n	8004236 <ts_formatlength+0xe2>
			  			  ++length;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	60ba      	str	r2, [r7, #8]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f6      	bne.n	8004230 <ts_formatlength+0xdc>
			  	  }
				  break;
 8004242:	e00e      	b.n	8004262 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	3308      	adds	r3, #8
 8004248:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	3304      	adds	r3, #4
 800424e:	603b      	str	r3, [r7, #0]
				  break;
 8004250:	e007      	b.n	8004262 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3301      	adds	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
				  break;
 8004258:	bf00      	nop
 800425a:	e002      	b.n	8004262 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	3301      	adds	r3, #1
 8004260:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3301      	adds	r3, #1
 8004266:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f47f af79 	bne.w	8004164 <ts_formatlength+0x10>
	}
	return length;
 8004272:	68fb      	ldr	r3, [r7, #12]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8004280:	b40f      	push	{r0, r1, r2, r3}
 8004282:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
	int length = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 800428e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004292:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004298:	f7ff ff5c 	bl	8004154 <ts_formatlength>
 800429c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 800429e:	466b      	mov	r3, sp
 80042a0:	461e      	mov	r6, r3
		char buf[length];
 80042a2:	68f9      	ldr	r1, [r7, #12]
 80042a4:	1e4b      	subs	r3, r1, #1
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	460b      	mov	r3, r1
 80042aa:	461a      	mov	r2, r3
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 80042b4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80042b8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80042bc:	460b      	mov	r3, r1
 80042be:	461a      	mov	r2, r3
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	00dd      	lsls	r5, r3, #3
 80042c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80042ca:	00d4      	lsls	r4, r2, #3
 80042cc:	460b      	mov	r3, r1
 80042ce:	3307      	adds	r3, #7
 80042d0:	08db      	lsrs	r3, r3, #3
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	ebad 0d03 	sub.w	sp, sp, r3
 80042d8:	466b      	mov	r3, sp
 80042da:	3300      	adds	r3, #0
 80042dc:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 80042de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042e2:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fe9b 	bl	8004026 <ts_formatstring>
 80042f0:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	4619      	mov	r1, r3
 80042f8:	2001      	movs	r0, #1
 80042fa:	f7ff fd01 	bl	8003d00 <_write>
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8004302:	68fb      	ldr	r3, [r7, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800430e:	b004      	add	sp, #16
 8004310:	4770      	bx	lr
	...

08004314 <__libc_init_array>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	4e0d      	ldr	r6, [pc, #52]	; (800434c <__libc_init_array+0x38>)
 8004318:	4c0d      	ldr	r4, [pc, #52]	; (8004350 <__libc_init_array+0x3c>)
 800431a:	1ba4      	subs	r4, r4, r6
 800431c:	10a4      	asrs	r4, r4, #2
 800431e:	2500      	movs	r5, #0
 8004320:	42a5      	cmp	r5, r4
 8004322:	d109      	bne.n	8004338 <__libc_init_array+0x24>
 8004324:	4e0b      	ldr	r6, [pc, #44]	; (8004354 <__libc_init_array+0x40>)
 8004326:	4c0c      	ldr	r4, [pc, #48]	; (8004358 <__libc_init_array+0x44>)
 8004328:	f000 fd8e 	bl	8004e48 <_init>
 800432c:	1ba4      	subs	r4, r4, r6
 800432e:	10a4      	asrs	r4, r4, #2
 8004330:	2500      	movs	r5, #0
 8004332:	42a5      	cmp	r5, r4
 8004334:	d105      	bne.n	8004342 <__libc_init_array+0x2e>
 8004336:	bd70      	pop	{r4, r5, r6, pc}
 8004338:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800433c:	4798      	blx	r3
 800433e:	3501      	adds	r5, #1
 8004340:	e7ee      	b.n	8004320 <__libc_init_array+0xc>
 8004342:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004346:	4798      	blx	r3
 8004348:	3501      	adds	r5, #1
 800434a:	e7f2      	b.n	8004332 <__libc_init_array+0x1e>
 800434c:	08004e60 	.word	0x08004e60
 8004350:	08004e60 	.word	0x08004e60
 8004354:	08004e60 	.word	0x08004e60
 8004358:	08004e64 	.word	0x08004e64

0800435c <malloc>:
 800435c:	4b02      	ldr	r3, [pc, #8]	; (8004368 <malloc+0xc>)
 800435e:	4601      	mov	r1, r0
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	f000 b86d 	b.w	8004440 <_malloc_r>
 8004366:	bf00      	nop
 8004368:	20000028 	.word	0x20000028

0800436c <free>:
 800436c:	4b02      	ldr	r3, [pc, #8]	; (8004378 <free+0xc>)
 800436e:	4601      	mov	r1, r0
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	f000 b817 	b.w	80043a4 <_free_r>
 8004376:	bf00      	nop
 8004378:	20000028 	.word	0x20000028

0800437c <memcpy>:
 800437c:	b510      	push	{r4, lr}
 800437e:	1e43      	subs	r3, r0, #1
 8004380:	440a      	add	r2, r1
 8004382:	4291      	cmp	r1, r2
 8004384:	d100      	bne.n	8004388 <memcpy+0xc>
 8004386:	bd10      	pop	{r4, pc}
 8004388:	f811 4b01 	ldrb.w	r4, [r1], #1
 800438c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004390:	e7f7      	b.n	8004382 <memcpy+0x6>

08004392 <memset>:
 8004392:	4402      	add	r2, r0
 8004394:	4603      	mov	r3, r0
 8004396:	4293      	cmp	r3, r2
 8004398:	d100      	bne.n	800439c <memset+0xa>
 800439a:	4770      	bx	lr
 800439c:	f803 1b01 	strb.w	r1, [r3], #1
 80043a0:	e7f9      	b.n	8004396 <memset+0x4>
	...

080043a4 <_free_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4605      	mov	r5, r0
 80043a8:	2900      	cmp	r1, #0
 80043aa:	d045      	beq.n	8004438 <_free_r+0x94>
 80043ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043b0:	1f0c      	subs	r4, r1, #4
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	bfb8      	it	lt
 80043b6:	18e4      	addlt	r4, r4, r3
 80043b8:	f000 f98e 	bl	80046d8 <__malloc_lock>
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <_free_r+0x98>)
 80043be:	6813      	ldr	r3, [r2, #0]
 80043c0:	4610      	mov	r0, r2
 80043c2:	b933      	cbnz	r3, 80043d2 <_free_r+0x2e>
 80043c4:	6063      	str	r3, [r4, #4]
 80043c6:	6014      	str	r4, [r2, #0]
 80043c8:	4628      	mov	r0, r5
 80043ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ce:	f000 b984 	b.w	80046da <__malloc_unlock>
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	d90c      	bls.n	80043f0 <_free_r+0x4c>
 80043d6:	6821      	ldr	r1, [r4, #0]
 80043d8:	1862      	adds	r2, r4, r1
 80043da:	4293      	cmp	r3, r2
 80043dc:	bf04      	itt	eq
 80043de:	681a      	ldreq	r2, [r3, #0]
 80043e0:	685b      	ldreq	r3, [r3, #4]
 80043e2:	6063      	str	r3, [r4, #4]
 80043e4:	bf04      	itt	eq
 80043e6:	1852      	addeq	r2, r2, r1
 80043e8:	6022      	streq	r2, [r4, #0]
 80043ea:	6004      	str	r4, [r0, #0]
 80043ec:	e7ec      	b.n	80043c8 <_free_r+0x24>
 80043ee:	4613      	mov	r3, r2
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	b10a      	cbz	r2, 80043f8 <_free_r+0x54>
 80043f4:	42a2      	cmp	r2, r4
 80043f6:	d9fa      	bls.n	80043ee <_free_r+0x4a>
 80043f8:	6819      	ldr	r1, [r3, #0]
 80043fa:	1858      	adds	r0, r3, r1
 80043fc:	42a0      	cmp	r0, r4
 80043fe:	d10b      	bne.n	8004418 <_free_r+0x74>
 8004400:	6820      	ldr	r0, [r4, #0]
 8004402:	4401      	add	r1, r0
 8004404:	1858      	adds	r0, r3, r1
 8004406:	4282      	cmp	r2, r0
 8004408:	6019      	str	r1, [r3, #0]
 800440a:	d1dd      	bne.n	80043c8 <_free_r+0x24>
 800440c:	6810      	ldr	r0, [r2, #0]
 800440e:	6852      	ldr	r2, [r2, #4]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	4401      	add	r1, r0
 8004414:	6019      	str	r1, [r3, #0]
 8004416:	e7d7      	b.n	80043c8 <_free_r+0x24>
 8004418:	d902      	bls.n	8004420 <_free_r+0x7c>
 800441a:	230c      	movs	r3, #12
 800441c:	602b      	str	r3, [r5, #0]
 800441e:	e7d3      	b.n	80043c8 <_free_r+0x24>
 8004420:	6820      	ldr	r0, [r4, #0]
 8004422:	1821      	adds	r1, r4, r0
 8004424:	428a      	cmp	r2, r1
 8004426:	bf04      	itt	eq
 8004428:	6811      	ldreq	r1, [r2, #0]
 800442a:	6852      	ldreq	r2, [r2, #4]
 800442c:	6062      	str	r2, [r4, #4]
 800442e:	bf04      	itt	eq
 8004430:	1809      	addeq	r1, r1, r0
 8004432:	6021      	streq	r1, [r4, #0]
 8004434:	605c      	str	r4, [r3, #4]
 8004436:	e7c7      	b.n	80043c8 <_free_r+0x24>
 8004438:	bd38      	pop	{r3, r4, r5, pc}
 800443a:	bf00      	nop
 800443c:	20000220 	.word	0x20000220

08004440 <_malloc_r>:
 8004440:	b570      	push	{r4, r5, r6, lr}
 8004442:	1ccd      	adds	r5, r1, #3
 8004444:	f025 0503 	bic.w	r5, r5, #3
 8004448:	3508      	adds	r5, #8
 800444a:	2d0c      	cmp	r5, #12
 800444c:	bf38      	it	cc
 800444e:	250c      	movcc	r5, #12
 8004450:	2d00      	cmp	r5, #0
 8004452:	4606      	mov	r6, r0
 8004454:	db01      	blt.n	800445a <_malloc_r+0x1a>
 8004456:	42a9      	cmp	r1, r5
 8004458:	d903      	bls.n	8004462 <_malloc_r+0x22>
 800445a:	230c      	movs	r3, #12
 800445c:	6033      	str	r3, [r6, #0]
 800445e:	2000      	movs	r0, #0
 8004460:	bd70      	pop	{r4, r5, r6, pc}
 8004462:	f000 f939 	bl	80046d8 <__malloc_lock>
 8004466:	4a23      	ldr	r2, [pc, #140]	; (80044f4 <_malloc_r+0xb4>)
 8004468:	6814      	ldr	r4, [r2, #0]
 800446a:	4621      	mov	r1, r4
 800446c:	b991      	cbnz	r1, 8004494 <_malloc_r+0x54>
 800446e:	4c22      	ldr	r4, [pc, #136]	; (80044f8 <_malloc_r+0xb8>)
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	b91b      	cbnz	r3, 800447c <_malloc_r+0x3c>
 8004474:	4630      	mov	r0, r6
 8004476:	f000 f855 	bl	8004524 <_sbrk_r>
 800447a:	6020      	str	r0, [r4, #0]
 800447c:	4629      	mov	r1, r5
 800447e:	4630      	mov	r0, r6
 8004480:	f000 f850 	bl	8004524 <_sbrk_r>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d126      	bne.n	80044d6 <_malloc_r+0x96>
 8004488:	230c      	movs	r3, #12
 800448a:	6033      	str	r3, [r6, #0]
 800448c:	4630      	mov	r0, r6
 800448e:	f000 f924 	bl	80046da <__malloc_unlock>
 8004492:	e7e4      	b.n	800445e <_malloc_r+0x1e>
 8004494:	680b      	ldr	r3, [r1, #0]
 8004496:	1b5b      	subs	r3, r3, r5
 8004498:	d41a      	bmi.n	80044d0 <_malloc_r+0x90>
 800449a:	2b0b      	cmp	r3, #11
 800449c:	d90f      	bls.n	80044be <_malloc_r+0x7e>
 800449e:	600b      	str	r3, [r1, #0]
 80044a0:	50cd      	str	r5, [r1, r3]
 80044a2:	18cc      	adds	r4, r1, r3
 80044a4:	4630      	mov	r0, r6
 80044a6:	f000 f918 	bl	80046da <__malloc_unlock>
 80044aa:	f104 000b 	add.w	r0, r4, #11
 80044ae:	1d23      	adds	r3, r4, #4
 80044b0:	f020 0007 	bic.w	r0, r0, #7
 80044b4:	1ac3      	subs	r3, r0, r3
 80044b6:	d01b      	beq.n	80044f0 <_malloc_r+0xb0>
 80044b8:	425a      	negs	r2, r3
 80044ba:	50e2      	str	r2, [r4, r3]
 80044bc:	bd70      	pop	{r4, r5, r6, pc}
 80044be:	428c      	cmp	r4, r1
 80044c0:	bf0d      	iteet	eq
 80044c2:	6863      	ldreq	r3, [r4, #4]
 80044c4:	684b      	ldrne	r3, [r1, #4]
 80044c6:	6063      	strne	r3, [r4, #4]
 80044c8:	6013      	streq	r3, [r2, #0]
 80044ca:	bf18      	it	ne
 80044cc:	460c      	movne	r4, r1
 80044ce:	e7e9      	b.n	80044a4 <_malloc_r+0x64>
 80044d0:	460c      	mov	r4, r1
 80044d2:	6849      	ldr	r1, [r1, #4]
 80044d4:	e7ca      	b.n	800446c <_malloc_r+0x2c>
 80044d6:	1cc4      	adds	r4, r0, #3
 80044d8:	f024 0403 	bic.w	r4, r4, #3
 80044dc:	42a0      	cmp	r0, r4
 80044de:	d005      	beq.n	80044ec <_malloc_r+0xac>
 80044e0:	1a21      	subs	r1, r4, r0
 80044e2:	4630      	mov	r0, r6
 80044e4:	f000 f81e 	bl	8004524 <_sbrk_r>
 80044e8:	3001      	adds	r0, #1
 80044ea:	d0cd      	beq.n	8004488 <_malloc_r+0x48>
 80044ec:	6025      	str	r5, [r4, #0]
 80044ee:	e7d9      	b.n	80044a4 <_malloc_r+0x64>
 80044f0:	bd70      	pop	{r4, r5, r6, pc}
 80044f2:	bf00      	nop
 80044f4:	20000220 	.word	0x20000220
 80044f8:	20000224 	.word	0x20000224

080044fc <putchar>:
 80044fc:	b538      	push	{r3, r4, r5, lr}
 80044fe:	4b08      	ldr	r3, [pc, #32]	; (8004520 <putchar+0x24>)
 8004500:	681c      	ldr	r4, [r3, #0]
 8004502:	4605      	mov	r5, r0
 8004504:	b124      	cbz	r4, 8004510 <putchar+0x14>
 8004506:	69a3      	ldr	r3, [r4, #24]
 8004508:	b913      	cbnz	r3, 8004510 <putchar+0x14>
 800450a:	4620      	mov	r0, r4
 800450c:	f000 f85a 	bl	80045c4 <__sinit>
 8004510:	68a2      	ldr	r2, [r4, #8]
 8004512:	4629      	mov	r1, r5
 8004514:	4620      	mov	r0, r4
 8004516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800451a:	f000 b8df 	b.w	80046dc <_putc_r>
 800451e:	bf00      	nop
 8004520:	20000028 	.word	0x20000028

08004524 <_sbrk_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4c06      	ldr	r4, [pc, #24]	; (8004540 <_sbrk_r+0x1c>)
 8004528:	2300      	movs	r3, #0
 800452a:	4605      	mov	r5, r0
 800452c:	4608      	mov	r0, r1
 800452e:	6023      	str	r3, [r4, #0]
 8004530:	f7ff fc02 	bl	8003d38 <_sbrk>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d102      	bne.n	800453e <_sbrk_r+0x1a>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	b103      	cbz	r3, 800453e <_sbrk_r+0x1a>
 800453c:	602b      	str	r3, [r5, #0]
 800453e:	bd38      	pop	{r3, r4, r5, pc}
 8004540:	200002e4 	.word	0x200002e4

08004544 <_cleanup_r>:
 8004544:	4901      	ldr	r1, [pc, #4]	; (800454c <_cleanup_r+0x8>)
 8004546:	f000 b8a9 	b.w	800469c <_fwalk_reent>
 800454a:	bf00      	nop
 800454c:	08004aa5 	.word	0x08004aa5

08004550 <std.isra.0>:
 8004550:	2300      	movs	r3, #0
 8004552:	b510      	push	{r4, lr}
 8004554:	4604      	mov	r4, r0
 8004556:	6003      	str	r3, [r0, #0]
 8004558:	6043      	str	r3, [r0, #4]
 800455a:	6083      	str	r3, [r0, #8]
 800455c:	8181      	strh	r1, [r0, #12]
 800455e:	6643      	str	r3, [r0, #100]	; 0x64
 8004560:	81c2      	strh	r2, [r0, #14]
 8004562:	6103      	str	r3, [r0, #16]
 8004564:	6143      	str	r3, [r0, #20]
 8004566:	6183      	str	r3, [r0, #24]
 8004568:	4619      	mov	r1, r3
 800456a:	2208      	movs	r2, #8
 800456c:	305c      	adds	r0, #92	; 0x5c
 800456e:	f7ff ff10 	bl	8004392 <memset>
 8004572:	4b05      	ldr	r3, [pc, #20]	; (8004588 <std.isra.0+0x38>)
 8004574:	6263      	str	r3, [r4, #36]	; 0x24
 8004576:	4b05      	ldr	r3, [pc, #20]	; (800458c <std.isra.0+0x3c>)
 8004578:	62a3      	str	r3, [r4, #40]	; 0x28
 800457a:	4b05      	ldr	r3, [pc, #20]	; (8004590 <std.isra.0+0x40>)
 800457c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800457e:	4b05      	ldr	r3, [pc, #20]	; (8004594 <std.isra.0+0x44>)
 8004580:	6224      	str	r4, [r4, #32]
 8004582:	6323      	str	r3, [r4, #48]	; 0x30
 8004584:	bd10      	pop	{r4, pc}
 8004586:	bf00      	nop
 8004588:	08004749 	.word	0x08004749
 800458c:	0800476b 	.word	0x0800476b
 8004590:	080047a3 	.word	0x080047a3
 8004594:	080047c7 	.word	0x080047c7

08004598 <__sfmoreglue>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	1e4a      	subs	r2, r1, #1
 800459c:	2568      	movs	r5, #104	; 0x68
 800459e:	4355      	muls	r5, r2
 80045a0:	460e      	mov	r6, r1
 80045a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80045a6:	f7ff ff4b 	bl	8004440 <_malloc_r>
 80045aa:	4604      	mov	r4, r0
 80045ac:	b140      	cbz	r0, 80045c0 <__sfmoreglue+0x28>
 80045ae:	2100      	movs	r1, #0
 80045b0:	e880 0042 	stmia.w	r0, {r1, r6}
 80045b4:	300c      	adds	r0, #12
 80045b6:	60a0      	str	r0, [r4, #8]
 80045b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80045bc:	f7ff fee9 	bl	8004392 <memset>
 80045c0:	4620      	mov	r0, r4
 80045c2:	bd70      	pop	{r4, r5, r6, pc}

080045c4 <__sinit>:
 80045c4:	6983      	ldr	r3, [r0, #24]
 80045c6:	b510      	push	{r4, lr}
 80045c8:	4604      	mov	r4, r0
 80045ca:	bb33      	cbnz	r3, 800461a <__sinit+0x56>
 80045cc:	6483      	str	r3, [r0, #72]	; 0x48
 80045ce:	64c3      	str	r3, [r0, #76]	; 0x4c
 80045d0:	6503      	str	r3, [r0, #80]	; 0x50
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <__sinit+0x58>)
 80045d4:	4a12      	ldr	r2, [pc, #72]	; (8004620 <__sinit+0x5c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	6282      	str	r2, [r0, #40]	; 0x28
 80045da:	4298      	cmp	r0, r3
 80045dc:	bf04      	itt	eq
 80045de:	2301      	moveq	r3, #1
 80045e0:	6183      	streq	r3, [r0, #24]
 80045e2:	f000 f81f 	bl	8004624 <__sfp>
 80045e6:	6060      	str	r0, [r4, #4]
 80045e8:	4620      	mov	r0, r4
 80045ea:	f000 f81b 	bl	8004624 <__sfp>
 80045ee:	60a0      	str	r0, [r4, #8]
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 f817 	bl	8004624 <__sfp>
 80045f6:	2200      	movs	r2, #0
 80045f8:	60e0      	str	r0, [r4, #12]
 80045fa:	2104      	movs	r1, #4
 80045fc:	6860      	ldr	r0, [r4, #4]
 80045fe:	f7ff ffa7 	bl	8004550 <std.isra.0>
 8004602:	2201      	movs	r2, #1
 8004604:	2109      	movs	r1, #9
 8004606:	68a0      	ldr	r0, [r4, #8]
 8004608:	f7ff ffa2 	bl	8004550 <std.isra.0>
 800460c:	2202      	movs	r2, #2
 800460e:	2112      	movs	r1, #18
 8004610:	68e0      	ldr	r0, [r4, #12]
 8004612:	f7ff ff9d 	bl	8004550 <std.isra.0>
 8004616:	2301      	movs	r3, #1
 8004618:	61a3      	str	r3, [r4, #24]
 800461a:	bd10      	pop	{r4, pc}
 800461c:	08004e44 	.word	0x08004e44
 8004620:	08004545 	.word	0x08004545

08004624 <__sfp>:
 8004624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004626:	4b1c      	ldr	r3, [pc, #112]	; (8004698 <__sfp+0x74>)
 8004628:	681e      	ldr	r6, [r3, #0]
 800462a:	69b3      	ldr	r3, [r6, #24]
 800462c:	4607      	mov	r7, r0
 800462e:	b913      	cbnz	r3, 8004636 <__sfp+0x12>
 8004630:	4630      	mov	r0, r6
 8004632:	f7ff ffc7 	bl	80045c4 <__sinit>
 8004636:	3648      	adds	r6, #72	; 0x48
 8004638:	68b4      	ldr	r4, [r6, #8]
 800463a:	6873      	ldr	r3, [r6, #4]
 800463c:	3b01      	subs	r3, #1
 800463e:	d503      	bpl.n	8004648 <__sfp+0x24>
 8004640:	6833      	ldr	r3, [r6, #0]
 8004642:	b133      	cbz	r3, 8004652 <__sfp+0x2e>
 8004644:	6836      	ldr	r6, [r6, #0]
 8004646:	e7f7      	b.n	8004638 <__sfp+0x14>
 8004648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800464c:	b16d      	cbz	r5, 800466a <__sfp+0x46>
 800464e:	3468      	adds	r4, #104	; 0x68
 8004650:	e7f4      	b.n	800463c <__sfp+0x18>
 8004652:	2104      	movs	r1, #4
 8004654:	4638      	mov	r0, r7
 8004656:	f7ff ff9f 	bl	8004598 <__sfmoreglue>
 800465a:	6030      	str	r0, [r6, #0]
 800465c:	2800      	cmp	r0, #0
 800465e:	d1f1      	bne.n	8004644 <__sfp+0x20>
 8004660:	230c      	movs	r3, #12
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4604      	mov	r4, r0
 8004666:	4620      	mov	r0, r4
 8004668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800466a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800466e:	81e3      	strh	r3, [r4, #14]
 8004670:	2301      	movs	r3, #1
 8004672:	81a3      	strh	r3, [r4, #12]
 8004674:	6665      	str	r5, [r4, #100]	; 0x64
 8004676:	6025      	str	r5, [r4, #0]
 8004678:	60a5      	str	r5, [r4, #8]
 800467a:	6065      	str	r5, [r4, #4]
 800467c:	6125      	str	r5, [r4, #16]
 800467e:	6165      	str	r5, [r4, #20]
 8004680:	61a5      	str	r5, [r4, #24]
 8004682:	2208      	movs	r2, #8
 8004684:	4629      	mov	r1, r5
 8004686:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800468a:	f7ff fe82 	bl	8004392 <memset>
 800468e:	6365      	str	r5, [r4, #52]	; 0x34
 8004690:	63a5      	str	r5, [r4, #56]	; 0x38
 8004692:	64a5      	str	r5, [r4, #72]	; 0x48
 8004694:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004696:	e7e6      	b.n	8004666 <__sfp+0x42>
 8004698:	08004e44 	.word	0x08004e44

0800469c <_fwalk_reent>:
 800469c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a0:	4680      	mov	r8, r0
 80046a2:	4689      	mov	r9, r1
 80046a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80046a8:	2600      	movs	r6, #0
 80046aa:	b914      	cbnz	r4, 80046b2 <_fwalk_reent+0x16>
 80046ac:	4630      	mov	r0, r6
 80046ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046b2:	68a5      	ldr	r5, [r4, #8]
 80046b4:	6867      	ldr	r7, [r4, #4]
 80046b6:	3f01      	subs	r7, #1
 80046b8:	d501      	bpl.n	80046be <_fwalk_reent+0x22>
 80046ba:	6824      	ldr	r4, [r4, #0]
 80046bc:	e7f5      	b.n	80046aa <_fwalk_reent+0xe>
 80046be:	89ab      	ldrh	r3, [r5, #12]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d907      	bls.n	80046d4 <_fwalk_reent+0x38>
 80046c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046c8:	3301      	adds	r3, #1
 80046ca:	d003      	beq.n	80046d4 <_fwalk_reent+0x38>
 80046cc:	4629      	mov	r1, r5
 80046ce:	4640      	mov	r0, r8
 80046d0:	47c8      	blx	r9
 80046d2:	4306      	orrs	r6, r0
 80046d4:	3568      	adds	r5, #104	; 0x68
 80046d6:	e7ee      	b.n	80046b6 <_fwalk_reent+0x1a>

080046d8 <__malloc_lock>:
 80046d8:	4770      	bx	lr

080046da <__malloc_unlock>:
 80046da:	4770      	bx	lr

080046dc <_putc_r>:
 80046dc:	b570      	push	{r4, r5, r6, lr}
 80046de:	460d      	mov	r5, r1
 80046e0:	4614      	mov	r4, r2
 80046e2:	4606      	mov	r6, r0
 80046e4:	b118      	cbz	r0, 80046ee <_putc_r+0x12>
 80046e6:	6983      	ldr	r3, [r0, #24]
 80046e8:	b90b      	cbnz	r3, 80046ee <_putc_r+0x12>
 80046ea:	f7ff ff6b 	bl	80045c4 <__sinit>
 80046ee:	4b13      	ldr	r3, [pc, #76]	; (800473c <_putc_r+0x60>)
 80046f0:	429c      	cmp	r4, r3
 80046f2:	d112      	bne.n	800471a <_putc_r+0x3e>
 80046f4:	6874      	ldr	r4, [r6, #4]
 80046f6:	68a3      	ldr	r3, [r4, #8]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	60a3      	str	r3, [r4, #8]
 80046fe:	da16      	bge.n	800472e <_putc_r+0x52>
 8004700:	69a2      	ldr	r2, [r4, #24]
 8004702:	4293      	cmp	r3, r2
 8004704:	db02      	blt.n	800470c <_putc_r+0x30>
 8004706:	b2eb      	uxtb	r3, r5
 8004708:	2b0a      	cmp	r3, #10
 800470a:	d110      	bne.n	800472e <_putc_r+0x52>
 800470c:	4622      	mov	r2, r4
 800470e:	4629      	mov	r1, r5
 8004710:	4630      	mov	r0, r6
 8004712:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004716:	f000 b85b 	b.w	80047d0 <__swbuf_r>
 800471a:	4b09      	ldr	r3, [pc, #36]	; (8004740 <_putc_r+0x64>)
 800471c:	429c      	cmp	r4, r3
 800471e:	d101      	bne.n	8004724 <_putc_r+0x48>
 8004720:	68b4      	ldr	r4, [r6, #8]
 8004722:	e7e8      	b.n	80046f6 <_putc_r+0x1a>
 8004724:	4b07      	ldr	r3, [pc, #28]	; (8004744 <_putc_r+0x68>)
 8004726:	429c      	cmp	r4, r3
 8004728:	bf08      	it	eq
 800472a:	68f4      	ldreq	r4, [r6, #12]
 800472c:	e7e3      	b.n	80046f6 <_putc_r+0x1a>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	6022      	str	r2, [r4, #0]
 8004734:	701d      	strb	r5, [r3, #0]
 8004736:	b2e8      	uxtb	r0, r5
 8004738:	bd70      	pop	{r4, r5, r6, pc}
 800473a:	bf00      	nop
 800473c:	08004e04 	.word	0x08004e04
 8004740:	08004e24 	.word	0x08004e24
 8004744:	08004de4 	.word	0x08004de4

08004748 <__sread>:
 8004748:	b510      	push	{r4, lr}
 800474a:	460c      	mov	r4, r1
 800474c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004750:	f000 fa48 	bl	8004be4 <_read_r>
 8004754:	2800      	cmp	r0, #0
 8004756:	bfab      	itete	ge
 8004758:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800475a:	89a3      	ldrhlt	r3, [r4, #12]
 800475c:	181b      	addge	r3, r3, r0
 800475e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004762:	bfac      	ite	ge
 8004764:	6563      	strge	r3, [r4, #84]	; 0x54
 8004766:	81a3      	strhlt	r3, [r4, #12]
 8004768:	bd10      	pop	{r4, pc}

0800476a <__swrite>:
 800476a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800476e:	461f      	mov	r7, r3
 8004770:	898b      	ldrh	r3, [r1, #12]
 8004772:	05db      	lsls	r3, r3, #23
 8004774:	4605      	mov	r5, r0
 8004776:	460c      	mov	r4, r1
 8004778:	4616      	mov	r6, r2
 800477a:	d505      	bpl.n	8004788 <__swrite+0x1e>
 800477c:	2302      	movs	r3, #2
 800477e:	2200      	movs	r2, #0
 8004780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004784:	f000 f9b8 	bl	8004af8 <_lseek_r>
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800478e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004792:	81a3      	strh	r3, [r4, #12]
 8004794:	4632      	mov	r2, r6
 8004796:	463b      	mov	r3, r7
 8004798:	4628      	mov	r0, r5
 800479a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800479e:	f000 b869 	b.w	8004874 <_write_r>

080047a2 <__sseek>:
 80047a2:	b510      	push	{r4, lr}
 80047a4:	460c      	mov	r4, r1
 80047a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047aa:	f000 f9a5 	bl	8004af8 <_lseek_r>
 80047ae:	1c43      	adds	r3, r0, #1
 80047b0:	89a3      	ldrh	r3, [r4, #12]
 80047b2:	bf15      	itete	ne
 80047b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80047b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80047ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80047be:	81a3      	strheq	r3, [r4, #12]
 80047c0:	bf18      	it	ne
 80047c2:	81a3      	strhne	r3, [r4, #12]
 80047c4:	bd10      	pop	{r4, pc}

080047c6 <__sclose>:
 80047c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ca:	f000 b8d3 	b.w	8004974 <_close_r>
	...

080047d0 <__swbuf_r>:
 80047d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d2:	460e      	mov	r6, r1
 80047d4:	4614      	mov	r4, r2
 80047d6:	4605      	mov	r5, r0
 80047d8:	b118      	cbz	r0, 80047e2 <__swbuf_r+0x12>
 80047da:	6983      	ldr	r3, [r0, #24]
 80047dc:	b90b      	cbnz	r3, 80047e2 <__swbuf_r+0x12>
 80047de:	f7ff fef1 	bl	80045c4 <__sinit>
 80047e2:	4b21      	ldr	r3, [pc, #132]	; (8004868 <__swbuf_r+0x98>)
 80047e4:	429c      	cmp	r4, r3
 80047e6:	d12a      	bne.n	800483e <__swbuf_r+0x6e>
 80047e8:	686c      	ldr	r4, [r5, #4]
 80047ea:	69a3      	ldr	r3, [r4, #24]
 80047ec:	60a3      	str	r3, [r4, #8]
 80047ee:	89a3      	ldrh	r3, [r4, #12]
 80047f0:	071a      	lsls	r2, r3, #28
 80047f2:	d52e      	bpl.n	8004852 <__swbuf_r+0x82>
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	b363      	cbz	r3, 8004852 <__swbuf_r+0x82>
 80047f8:	6923      	ldr	r3, [r4, #16]
 80047fa:	6820      	ldr	r0, [r4, #0]
 80047fc:	1ac0      	subs	r0, r0, r3
 80047fe:	6963      	ldr	r3, [r4, #20]
 8004800:	b2f6      	uxtb	r6, r6
 8004802:	4298      	cmp	r0, r3
 8004804:	4637      	mov	r7, r6
 8004806:	db04      	blt.n	8004812 <__swbuf_r+0x42>
 8004808:	4621      	mov	r1, r4
 800480a:	4628      	mov	r0, r5
 800480c:	f000 f94a 	bl	8004aa4 <_fflush_r>
 8004810:	bb28      	cbnz	r0, 800485e <__swbuf_r+0x8e>
 8004812:	68a3      	ldr	r3, [r4, #8]
 8004814:	3b01      	subs	r3, #1
 8004816:	60a3      	str	r3, [r4, #8]
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	6022      	str	r2, [r4, #0]
 800481e:	701e      	strb	r6, [r3, #0]
 8004820:	6963      	ldr	r3, [r4, #20]
 8004822:	3001      	adds	r0, #1
 8004824:	4298      	cmp	r0, r3
 8004826:	d004      	beq.n	8004832 <__swbuf_r+0x62>
 8004828:	89a3      	ldrh	r3, [r4, #12]
 800482a:	07db      	lsls	r3, r3, #31
 800482c:	d519      	bpl.n	8004862 <__swbuf_r+0x92>
 800482e:	2e0a      	cmp	r6, #10
 8004830:	d117      	bne.n	8004862 <__swbuf_r+0x92>
 8004832:	4621      	mov	r1, r4
 8004834:	4628      	mov	r0, r5
 8004836:	f000 f935 	bl	8004aa4 <_fflush_r>
 800483a:	b190      	cbz	r0, 8004862 <__swbuf_r+0x92>
 800483c:	e00f      	b.n	800485e <__swbuf_r+0x8e>
 800483e:	4b0b      	ldr	r3, [pc, #44]	; (800486c <__swbuf_r+0x9c>)
 8004840:	429c      	cmp	r4, r3
 8004842:	d101      	bne.n	8004848 <__swbuf_r+0x78>
 8004844:	68ac      	ldr	r4, [r5, #8]
 8004846:	e7d0      	b.n	80047ea <__swbuf_r+0x1a>
 8004848:	4b09      	ldr	r3, [pc, #36]	; (8004870 <__swbuf_r+0xa0>)
 800484a:	429c      	cmp	r4, r3
 800484c:	bf08      	it	eq
 800484e:	68ec      	ldreq	r4, [r5, #12]
 8004850:	e7cb      	b.n	80047ea <__swbuf_r+0x1a>
 8004852:	4621      	mov	r1, r4
 8004854:	4628      	mov	r0, r5
 8004856:	f000 f81f 	bl	8004898 <__swsetup_r>
 800485a:	2800      	cmp	r0, #0
 800485c:	d0cc      	beq.n	80047f8 <__swbuf_r+0x28>
 800485e:	f04f 37ff 	mov.w	r7, #4294967295
 8004862:	4638      	mov	r0, r7
 8004864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004866:	bf00      	nop
 8004868:	08004e04 	.word	0x08004e04
 800486c:	08004e24 	.word	0x08004e24
 8004870:	08004de4 	.word	0x08004de4

08004874 <_write_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4c07      	ldr	r4, [pc, #28]	; (8004894 <_write_r+0x20>)
 8004878:	4605      	mov	r5, r0
 800487a:	4608      	mov	r0, r1
 800487c:	4611      	mov	r1, r2
 800487e:	2200      	movs	r2, #0
 8004880:	6022      	str	r2, [r4, #0]
 8004882:	461a      	mov	r2, r3
 8004884:	f7ff fa3c 	bl	8003d00 <_write>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_write_r+0x1e>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	b103      	cbz	r3, 8004892 <_write_r+0x1e>
 8004890:	602b      	str	r3, [r5, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	200002e4 	.word	0x200002e4

08004898 <__swsetup_r>:
 8004898:	4b32      	ldr	r3, [pc, #200]	; (8004964 <__swsetup_r+0xcc>)
 800489a:	b570      	push	{r4, r5, r6, lr}
 800489c:	681d      	ldr	r5, [r3, #0]
 800489e:	4606      	mov	r6, r0
 80048a0:	460c      	mov	r4, r1
 80048a2:	b125      	cbz	r5, 80048ae <__swsetup_r+0x16>
 80048a4:	69ab      	ldr	r3, [r5, #24]
 80048a6:	b913      	cbnz	r3, 80048ae <__swsetup_r+0x16>
 80048a8:	4628      	mov	r0, r5
 80048aa:	f7ff fe8b 	bl	80045c4 <__sinit>
 80048ae:	4b2e      	ldr	r3, [pc, #184]	; (8004968 <__swsetup_r+0xd0>)
 80048b0:	429c      	cmp	r4, r3
 80048b2:	d10f      	bne.n	80048d4 <__swsetup_r+0x3c>
 80048b4:	686c      	ldr	r4, [r5, #4]
 80048b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	0715      	lsls	r5, r2, #28
 80048be:	d42c      	bmi.n	800491a <__swsetup_r+0x82>
 80048c0:	06d0      	lsls	r0, r2, #27
 80048c2:	d411      	bmi.n	80048e8 <__swsetup_r+0x50>
 80048c4:	2209      	movs	r2, #9
 80048c6:	6032      	str	r2, [r6, #0]
 80048c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048cc:	81a3      	strh	r3, [r4, #12]
 80048ce:	f04f 30ff 	mov.w	r0, #4294967295
 80048d2:	bd70      	pop	{r4, r5, r6, pc}
 80048d4:	4b25      	ldr	r3, [pc, #148]	; (800496c <__swsetup_r+0xd4>)
 80048d6:	429c      	cmp	r4, r3
 80048d8:	d101      	bne.n	80048de <__swsetup_r+0x46>
 80048da:	68ac      	ldr	r4, [r5, #8]
 80048dc:	e7eb      	b.n	80048b6 <__swsetup_r+0x1e>
 80048de:	4b24      	ldr	r3, [pc, #144]	; (8004970 <__swsetup_r+0xd8>)
 80048e0:	429c      	cmp	r4, r3
 80048e2:	bf08      	it	eq
 80048e4:	68ec      	ldreq	r4, [r5, #12]
 80048e6:	e7e6      	b.n	80048b6 <__swsetup_r+0x1e>
 80048e8:	0751      	lsls	r1, r2, #29
 80048ea:	d512      	bpl.n	8004912 <__swsetup_r+0x7a>
 80048ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ee:	b141      	cbz	r1, 8004902 <__swsetup_r+0x6a>
 80048f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048f4:	4299      	cmp	r1, r3
 80048f6:	d002      	beq.n	80048fe <__swsetup_r+0x66>
 80048f8:	4630      	mov	r0, r6
 80048fa:	f7ff fd53 	bl	80043a4 <_free_r>
 80048fe:	2300      	movs	r3, #0
 8004900:	6363      	str	r3, [r4, #52]	; 0x34
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004908:	81a3      	strh	r3, [r4, #12]
 800490a:	2300      	movs	r3, #0
 800490c:	6063      	str	r3, [r4, #4]
 800490e:	6923      	ldr	r3, [r4, #16]
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	89a3      	ldrh	r3, [r4, #12]
 8004914:	f043 0308 	orr.w	r3, r3, #8
 8004918:	81a3      	strh	r3, [r4, #12]
 800491a:	6923      	ldr	r3, [r4, #16]
 800491c:	b94b      	cbnz	r3, 8004932 <__swsetup_r+0x9a>
 800491e:	89a3      	ldrh	r3, [r4, #12]
 8004920:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004928:	d003      	beq.n	8004932 <__swsetup_r+0x9a>
 800492a:	4621      	mov	r1, r4
 800492c:	4630      	mov	r0, r6
 800492e:	f000 f919 	bl	8004b64 <__smakebuf_r>
 8004932:	89a2      	ldrh	r2, [r4, #12]
 8004934:	f012 0301 	ands.w	r3, r2, #1
 8004938:	d00c      	beq.n	8004954 <__swsetup_r+0xbc>
 800493a:	2300      	movs	r3, #0
 800493c:	60a3      	str	r3, [r4, #8]
 800493e:	6963      	ldr	r3, [r4, #20]
 8004940:	425b      	negs	r3, r3
 8004942:	61a3      	str	r3, [r4, #24]
 8004944:	6923      	ldr	r3, [r4, #16]
 8004946:	b953      	cbnz	r3, 800495e <__swsetup_r+0xc6>
 8004948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800494c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004950:	d1ba      	bne.n	80048c8 <__swsetup_r+0x30>
 8004952:	bd70      	pop	{r4, r5, r6, pc}
 8004954:	0792      	lsls	r2, r2, #30
 8004956:	bf58      	it	pl
 8004958:	6963      	ldrpl	r3, [r4, #20]
 800495a:	60a3      	str	r3, [r4, #8]
 800495c:	e7f2      	b.n	8004944 <__swsetup_r+0xac>
 800495e:	2000      	movs	r0, #0
 8004960:	e7f7      	b.n	8004952 <__swsetup_r+0xba>
 8004962:	bf00      	nop
 8004964:	20000028 	.word	0x20000028
 8004968:	08004e04 	.word	0x08004e04
 800496c:	08004e24 	.word	0x08004e24
 8004970:	08004de4 	.word	0x08004de4

08004974 <_close_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4c06      	ldr	r4, [pc, #24]	; (8004990 <_close_r+0x1c>)
 8004978:	2300      	movs	r3, #0
 800497a:	4605      	mov	r5, r0
 800497c:	4608      	mov	r0, r1
 800497e:	6023      	str	r3, [r4, #0]
 8004980:	f7ff f9fa 	bl	8003d78 <_close>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_close_r+0x1a>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	b103      	cbz	r3, 800498e <_close_r+0x1a>
 800498c:	602b      	str	r3, [r5, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	200002e4 	.word	0x200002e4

08004994 <__sflush_r>:
 8004994:	898a      	ldrh	r2, [r1, #12]
 8004996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800499a:	4605      	mov	r5, r0
 800499c:	0710      	lsls	r0, r2, #28
 800499e:	460c      	mov	r4, r1
 80049a0:	d45a      	bmi.n	8004a58 <__sflush_r+0xc4>
 80049a2:	684b      	ldr	r3, [r1, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	dc05      	bgt.n	80049b4 <__sflush_r+0x20>
 80049a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	dc02      	bgt.n	80049b4 <__sflush_r+0x20>
 80049ae:	2000      	movs	r0, #0
 80049b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	d0f9      	beq.n	80049ae <__sflush_r+0x1a>
 80049ba:	2300      	movs	r3, #0
 80049bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049c0:	682f      	ldr	r7, [r5, #0]
 80049c2:	602b      	str	r3, [r5, #0]
 80049c4:	d033      	beq.n	8004a2e <__sflush_r+0x9a>
 80049c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049c8:	89a3      	ldrh	r3, [r4, #12]
 80049ca:	075a      	lsls	r2, r3, #29
 80049cc:	d505      	bpl.n	80049da <__sflush_r+0x46>
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	1ac0      	subs	r0, r0, r3
 80049d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049d4:	b10b      	cbz	r3, 80049da <__sflush_r+0x46>
 80049d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049d8:	1ac0      	subs	r0, r0, r3
 80049da:	2300      	movs	r3, #0
 80049dc:	4602      	mov	r2, r0
 80049de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049e0:	6a21      	ldr	r1, [r4, #32]
 80049e2:	4628      	mov	r0, r5
 80049e4:	47b0      	blx	r6
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	89a3      	ldrh	r3, [r4, #12]
 80049ea:	d106      	bne.n	80049fa <__sflush_r+0x66>
 80049ec:	6829      	ldr	r1, [r5, #0]
 80049ee:	291d      	cmp	r1, #29
 80049f0:	d84b      	bhi.n	8004a8a <__sflush_r+0xf6>
 80049f2:	4a2b      	ldr	r2, [pc, #172]	; (8004aa0 <__sflush_r+0x10c>)
 80049f4:	40ca      	lsrs	r2, r1
 80049f6:	07d6      	lsls	r6, r2, #31
 80049f8:	d547      	bpl.n	8004a8a <__sflush_r+0xf6>
 80049fa:	2200      	movs	r2, #0
 80049fc:	6062      	str	r2, [r4, #4]
 80049fe:	04d9      	lsls	r1, r3, #19
 8004a00:	6922      	ldr	r2, [r4, #16]
 8004a02:	6022      	str	r2, [r4, #0]
 8004a04:	d504      	bpl.n	8004a10 <__sflush_r+0x7c>
 8004a06:	1c42      	adds	r2, r0, #1
 8004a08:	d101      	bne.n	8004a0e <__sflush_r+0x7a>
 8004a0a:	682b      	ldr	r3, [r5, #0]
 8004a0c:	b903      	cbnz	r3, 8004a10 <__sflush_r+0x7c>
 8004a0e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a12:	602f      	str	r7, [r5, #0]
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d0ca      	beq.n	80049ae <__sflush_r+0x1a>
 8004a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a1c:	4299      	cmp	r1, r3
 8004a1e:	d002      	beq.n	8004a26 <__sflush_r+0x92>
 8004a20:	4628      	mov	r0, r5
 8004a22:	f7ff fcbf 	bl	80043a4 <_free_r>
 8004a26:	2000      	movs	r0, #0
 8004a28:	6360      	str	r0, [r4, #52]	; 0x34
 8004a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a2e:	6a21      	ldr	r1, [r4, #32]
 8004a30:	2301      	movs	r3, #1
 8004a32:	4628      	mov	r0, r5
 8004a34:	47b0      	blx	r6
 8004a36:	1c41      	adds	r1, r0, #1
 8004a38:	d1c6      	bne.n	80049c8 <__sflush_r+0x34>
 8004a3a:	682b      	ldr	r3, [r5, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0c3      	beq.n	80049c8 <__sflush_r+0x34>
 8004a40:	2b1d      	cmp	r3, #29
 8004a42:	d001      	beq.n	8004a48 <__sflush_r+0xb4>
 8004a44:	2b16      	cmp	r3, #22
 8004a46:	d101      	bne.n	8004a4c <__sflush_r+0xb8>
 8004a48:	602f      	str	r7, [r5, #0]
 8004a4a:	e7b0      	b.n	80049ae <__sflush_r+0x1a>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a52:	81a3      	strh	r3, [r4, #12]
 8004a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a58:	690f      	ldr	r7, [r1, #16]
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	d0a7      	beq.n	80049ae <__sflush_r+0x1a>
 8004a5e:	0793      	lsls	r3, r2, #30
 8004a60:	680e      	ldr	r6, [r1, #0]
 8004a62:	bf08      	it	eq
 8004a64:	694b      	ldreq	r3, [r1, #20]
 8004a66:	600f      	str	r7, [r1, #0]
 8004a68:	bf18      	it	ne
 8004a6a:	2300      	movne	r3, #0
 8004a6c:	eba6 0807 	sub.w	r8, r6, r7
 8004a70:	608b      	str	r3, [r1, #8]
 8004a72:	f1b8 0f00 	cmp.w	r8, #0
 8004a76:	dd9a      	ble.n	80049ae <__sflush_r+0x1a>
 8004a78:	4643      	mov	r3, r8
 8004a7a:	463a      	mov	r2, r7
 8004a7c:	6a21      	ldr	r1, [r4, #32]
 8004a7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a80:	4628      	mov	r0, r5
 8004a82:	47b0      	blx	r6
 8004a84:	2800      	cmp	r0, #0
 8004a86:	dc07      	bgt.n	8004a98 <__sflush_r+0x104>
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a98:	4407      	add	r7, r0
 8004a9a:	eba8 0800 	sub.w	r8, r8, r0
 8004a9e:	e7e8      	b.n	8004a72 <__sflush_r+0xde>
 8004aa0:	20400001 	.word	0x20400001

08004aa4 <_fflush_r>:
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	690b      	ldr	r3, [r1, #16]
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	460c      	mov	r4, r1
 8004aac:	b1db      	cbz	r3, 8004ae6 <_fflush_r+0x42>
 8004aae:	b118      	cbz	r0, 8004ab8 <_fflush_r+0x14>
 8004ab0:	6983      	ldr	r3, [r0, #24]
 8004ab2:	b90b      	cbnz	r3, 8004ab8 <_fflush_r+0x14>
 8004ab4:	f7ff fd86 	bl	80045c4 <__sinit>
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <_fflush_r+0x48>)
 8004aba:	429c      	cmp	r4, r3
 8004abc:	d109      	bne.n	8004ad2 <_fflush_r+0x2e>
 8004abe:	686c      	ldr	r4, [r5, #4]
 8004ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac4:	b17b      	cbz	r3, 8004ae6 <_fflush_r+0x42>
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	4628      	mov	r0, r5
 8004aca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ace:	f7ff bf61 	b.w	8004994 <__sflush_r>
 8004ad2:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <_fflush_r+0x4c>)
 8004ad4:	429c      	cmp	r4, r3
 8004ad6:	d101      	bne.n	8004adc <_fflush_r+0x38>
 8004ad8:	68ac      	ldr	r4, [r5, #8]
 8004ada:	e7f1      	b.n	8004ac0 <_fflush_r+0x1c>
 8004adc:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <_fflush_r+0x50>)
 8004ade:	429c      	cmp	r4, r3
 8004ae0:	bf08      	it	eq
 8004ae2:	68ec      	ldreq	r4, [r5, #12]
 8004ae4:	e7ec      	b.n	8004ac0 <_fflush_r+0x1c>
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	bd38      	pop	{r3, r4, r5, pc}
 8004aea:	bf00      	nop
 8004aec:	08004e04 	.word	0x08004e04
 8004af0:	08004e24 	.word	0x08004e24
 8004af4:	08004de4 	.word	0x08004de4

08004af8 <_lseek_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4c07      	ldr	r4, [pc, #28]	; (8004b18 <_lseek_r+0x20>)
 8004afc:	4605      	mov	r5, r0
 8004afe:	4608      	mov	r0, r1
 8004b00:	4611      	mov	r1, r2
 8004b02:	2200      	movs	r2, #0
 8004b04:	6022      	str	r2, [r4, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f7ff f96a 	bl	8003de0 <_lseek>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d102      	bne.n	8004b16 <_lseek_r+0x1e>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	b103      	cbz	r3, 8004b16 <_lseek_r+0x1e>
 8004b14:	602b      	str	r3, [r5, #0]
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	200002e4 	.word	0x200002e4

08004b1c <__swhatbuf_r>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	460e      	mov	r6, r1
 8004b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b24:	2900      	cmp	r1, #0
 8004b26:	b090      	sub	sp, #64	; 0x40
 8004b28:	4614      	mov	r4, r2
 8004b2a:	461d      	mov	r5, r3
 8004b2c:	da07      	bge.n	8004b3e <__swhatbuf_r+0x22>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	602b      	str	r3, [r5, #0]
 8004b32:	89b3      	ldrh	r3, [r6, #12]
 8004b34:	061a      	lsls	r2, r3, #24
 8004b36:	d410      	bmi.n	8004b5a <__swhatbuf_r+0x3e>
 8004b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3c:	e00e      	b.n	8004b5c <__swhatbuf_r+0x40>
 8004b3e:	aa01      	add	r2, sp, #4
 8004b40:	f000 f862 	bl	8004c08 <_fstat_r>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	dbf2      	blt.n	8004b2e <__swhatbuf_r+0x12>
 8004b48:	9a02      	ldr	r2, [sp, #8]
 8004b4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b52:	425a      	negs	r2, r3
 8004b54:	415a      	adcs	r2, r3
 8004b56:	602a      	str	r2, [r5, #0]
 8004b58:	e7ee      	b.n	8004b38 <__swhatbuf_r+0x1c>
 8004b5a:	2340      	movs	r3, #64	; 0x40
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	b010      	add	sp, #64	; 0x40
 8004b62:	bd70      	pop	{r4, r5, r6, pc}

08004b64 <__smakebuf_r>:
 8004b64:	898b      	ldrh	r3, [r1, #12]
 8004b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b68:	079d      	lsls	r5, r3, #30
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	460c      	mov	r4, r1
 8004b6e:	d507      	bpl.n	8004b80 <__smakebuf_r+0x1c>
 8004b70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	6123      	str	r3, [r4, #16]
 8004b78:	2301      	movs	r3, #1
 8004b7a:	6163      	str	r3, [r4, #20]
 8004b7c:	b002      	add	sp, #8
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	ab01      	add	r3, sp, #4
 8004b82:	466a      	mov	r2, sp
 8004b84:	f7ff ffca 	bl	8004b1c <__swhatbuf_r>
 8004b88:	9900      	ldr	r1, [sp, #0]
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f7ff fc57 	bl	8004440 <_malloc_r>
 8004b92:	b948      	cbnz	r0, 8004ba8 <__smakebuf_r+0x44>
 8004b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b98:	059a      	lsls	r2, r3, #22
 8004b9a:	d4ef      	bmi.n	8004b7c <__smakebuf_r+0x18>
 8004b9c:	f023 0303 	bic.w	r3, r3, #3
 8004ba0:	f043 0302 	orr.w	r3, r3, #2
 8004ba4:	81a3      	strh	r3, [r4, #12]
 8004ba6:	e7e3      	b.n	8004b70 <__smakebuf_r+0xc>
 8004ba8:	4b0d      	ldr	r3, [pc, #52]	; (8004be0 <__smakebuf_r+0x7c>)
 8004baa:	62b3      	str	r3, [r6, #40]	; 0x28
 8004bac:	89a3      	ldrh	r3, [r4, #12]
 8004bae:	6020      	str	r0, [r4, #0]
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	9b00      	ldr	r3, [sp, #0]
 8004bb8:	6163      	str	r3, [r4, #20]
 8004bba:	9b01      	ldr	r3, [sp, #4]
 8004bbc:	6120      	str	r0, [r4, #16]
 8004bbe:	b15b      	cbz	r3, 8004bd8 <__smakebuf_r+0x74>
 8004bc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f000 f831 	bl	8004c2c <_isatty_r>
 8004bca:	b128      	cbz	r0, 8004bd8 <__smakebuf_r+0x74>
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	f023 0303 	bic.w	r3, r3, #3
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	81a3      	strh	r3, [r4, #12]
 8004bd8:	89a3      	ldrh	r3, [r4, #12]
 8004bda:	431d      	orrs	r5, r3
 8004bdc:	81a5      	strh	r5, [r4, #12]
 8004bde:	e7cd      	b.n	8004b7c <__smakebuf_r+0x18>
 8004be0:	08004545 	.word	0x08004545

08004be4 <_read_r>:
 8004be4:	b538      	push	{r3, r4, r5, lr}
 8004be6:	4c07      	ldr	r4, [pc, #28]	; (8004c04 <_read_r+0x20>)
 8004be8:	4605      	mov	r5, r0
 8004bea:	4608      	mov	r0, r1
 8004bec:	4611      	mov	r1, r2
 8004bee:	2200      	movs	r2, #0
 8004bf0:	6022      	str	r2, [r4, #0]
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f7ff f908 	bl	8003e08 <_read>
 8004bf8:	1c43      	adds	r3, r0, #1
 8004bfa:	d102      	bne.n	8004c02 <_read_r+0x1e>
 8004bfc:	6823      	ldr	r3, [r4, #0]
 8004bfe:	b103      	cbz	r3, 8004c02 <_read_r+0x1e>
 8004c00:	602b      	str	r3, [r5, #0]
 8004c02:	bd38      	pop	{r3, r4, r5, pc}
 8004c04:	200002e4 	.word	0x200002e4

08004c08 <_fstat_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4c07      	ldr	r4, [pc, #28]	; (8004c28 <_fstat_r+0x20>)
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	4605      	mov	r5, r0
 8004c10:	4608      	mov	r0, r1
 8004c12:	4611      	mov	r1, r2
 8004c14:	6023      	str	r3, [r4, #0]
 8004c16:	f7ff f8c1 	bl	8003d9c <_fstat>
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	d102      	bne.n	8004c24 <_fstat_r+0x1c>
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	b103      	cbz	r3, 8004c24 <_fstat_r+0x1c>
 8004c22:	602b      	str	r3, [r5, #0]
 8004c24:	bd38      	pop	{r3, r4, r5, pc}
 8004c26:	bf00      	nop
 8004c28:	200002e4 	.word	0x200002e4

08004c2c <_isatty_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	4c06      	ldr	r4, [pc, #24]	; (8004c48 <_isatty_r+0x1c>)
 8004c30:	2300      	movs	r3, #0
 8004c32:	4605      	mov	r5, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	f7ff f8c2 	bl	8003dc0 <_isatty>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_isatty_r+0x1a>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_isatty_r+0x1a>
 8004c44:	602b      	str	r3, [r5, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	200002e4 	.word	0x200002e4
 8004c4c:	454c4449 	.word	0x454c4449
 8004c50:	00000000 	.word	0x00000000
 8004c54:	20726d54 	.word	0x20726d54
 8004c58:	00637653 	.word	0x00637653
 8004c5c:	51726d54 	.word	0x51726d54
 8004c60:	00000000 	.word	0x00000000
 8004c64:	6b736174 	.word	0x6b736174
 8004c68:	00000031 	.word	0x00000031
 8004c6c:	08004c64 	.word	0x08004c64
 8004c70:	000000fa 	.word	0x000000fa
 8004c74:	00000000 	.word	0x00000000
 8004c78:	08003189 	.word	0x08003189
 8004c7c:	6b736174 	.word	0x6b736174
 8004c80:	00000032 	.word	0x00000032
 8004c84:	08004c7c 	.word	0x08004c7c
 8004c88:	000001f4 	.word	0x000001f4
 8004c8c:	00000000 	.word	0x00000000
 8004c90:	080031d5 	.word	0x080031d5
 8004c94:	6b736174 	.word	0x6b736174
 8004c98:	00000033 	.word	0x00000033
 8004c9c:	08004c94 	.word	0x08004c94
 8004ca0:	000002ee 	.word	0x000002ee
 8004ca4:	00000000 	.word	0x00000000
 8004ca8:	08003221 	.word	0x08003221
 8004cac:	6b736154 	.word	0x6b736154
 8004cb0:	00003120 	.word	0x00003120
 8004cb4:	6b736154 	.word	0x6b736154
 8004cb8:	00003220 	.word	0x00003220
 8004cbc:	6b736154 	.word	0x6b736154
 8004cc0:	00003320 	.word	0x00003320
 8004cc4:	7463410a 	.word	0x7463410a
 8004cc8:	20657669 	.word	0x20657669
 8004ccc:	6b736154 	.word	0x6b736154
 8004cd0:	00203a73 	.word	0x00203a73
 8004cd4:	0000202c 	.word	0x0000202c
 8004cd8:	65764f0a 	.word	0x65764f0a
 8004cdc:	65756472 	.word	0x65756472
 8004ce0:	73615420 	.word	0x73615420
 8004ce4:	203a736b 	.word	0x203a736b
 8004ce8:	00000000 	.word	0x00000000
 8004cec:	656d6954 	.word	0x656d6954
 8004cf0:	6e697320 	.word	0x6e697320
 8004cf4:	6c206563 	.word	0x6c206563
 8004cf8:	20747361 	.word	0x20747361
 8004cfc:	696e6f6d 	.word	0x696e6f6d
 8004d00:	28726f74 	.word	0x28726f74
 8004d04:	25203a29 	.word	0x25203a29
 8004d08:	0a736d69 	.word	0x0a736d69
 8004d0c:	00000000 	.word	0x00000000
 8004d10:	6b736154 	.word	0x6b736154
 8004d14:	55203120 	.word	0x55203120
 8004d18:	65676173 	.word	0x65676173
 8004d1c:	6425203a 	.word	0x6425203a
 8004d20:	0a202525 	.word	0x0a202525
 8004d24:	00000000 	.word	0x00000000
 8004d28:	6b736154 	.word	0x6b736154
 8004d2c:	55203220 	.word	0x55203220
 8004d30:	65676173 	.word	0x65676173
 8004d34:	6425203a 	.word	0x6425203a
 8004d38:	0a202525 	.word	0x0a202525
 8004d3c:	00000000 	.word	0x00000000
 8004d40:	6b736154 	.word	0x6b736154
 8004d44:	55203320 	.word	0x55203320
 8004d48:	65676173 	.word	0x65676173
 8004d4c:	6425203a 	.word	0x6425203a
 8004d50:	0a202525 	.word	0x0a202525
 8004d54:	00000000 	.word	0x00000000
 8004d58:	656c6449 	.word	0x656c6449
 8004d5c:	61735520 	.word	0x61735520
 8004d60:	203a6567 	.word	0x203a6567
 8004d64:	25256425 	.word	0x25256425
 8004d68:	00000a20 	.word	0x00000a20
 8004d6c:	69707845 	.word	0x69707845
 8004d70:	69746172 	.word	0x69746172
 8004d74:	54206e6f 	.word	0x54206e6f
 8004d78:	72656d69 	.word	0x72656d69
 8004d7c:	00000000 	.word	0x00000000
 8004d80:	6e69614d 	.word	0x6e69614d
 8004d84:	75657551 	.word	0x75657551
 8004d88:	00000065 	.word	0x00000065
 8004d8c:	65764578 	.word	0x65764578
 8004d90:	6553746e 	.word	0x6553746e
 8004d94:	6870616d 	.word	0x6870616d
 8004d98:	0065726f 	.word	0x0065726f
 8004d9c:	735f6464 	.word	0x735f6464
 8004da0:	64656863 	.word	0x64656863
 8004da4:	72656c75 	.word	0x72656c75
 8004da8:	00000000 	.word	0x00000000
 8004dac:	696e6f6d 	.word	0x696e6f6d
 8004db0:	00726f74 	.word	0x00726f74
 8004db4:	69726570 	.word	0x69726570
 8004db8:	6369646f 	.word	0x6369646f
 8004dbc:	656e6547 	.word	0x656e6547
 8004dc0:	6f746172 	.word	0x6f746172
 8004dc4:	00000072 	.word	0x00000072
 8004dc8:	00000079 	.word	0x00000079

08004dcc <GPIO_PIN>:
 8004dcc:	20001000 80004000                       ... .@..

08004dd4 <GPIO_CLK>:
 8004dd4:	00000008 00000008 00000008 00000008     ................

08004de4 <__sf_fake_stderr>:
	...

08004e04 <__sf_fake_stdin>:
	...

08004e24 <__sf_fake_stdout>:
	...

08004e44 <_global_impure_ptr>:
 8004e44:	2000002c                                ,.. 

08004e48 <_init>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	bf00      	nop
 8004e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4e:	bc08      	pop	{r3}
 8004e50:	469e      	mov	lr, r3
 8004e52:	4770      	bx	lr

08004e54 <_fini>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	bf00      	nop
 8004e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5a:	bc08      	pop	{r3}
 8004e5c:	469e      	mov	lr, r3
 8004e5e:	4770      	bx	lr
